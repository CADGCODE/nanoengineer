/* #line 1 "NanorexMMPImportExport.rl" */
// *********************** GENERATED BY RAGEL 6.0 *******************
// ** Do not edit directly. Edit NanorexMMPImportExport.rl instead **
// ******************************************************************

// Copyright 2008 Nanorex, Inc.  See LICENSE file for details.

#include "NanorexMMPImportExport.h"
#include <Nanorex/Interface/NXAtomData.h>
#include <Nanorex/Utility/NXUtility.h>
#include <QFileInfo>

#define VERBOSE

#if defined(VERBOSE)

#if 0
#define CDEBUG(s) DEBUG_MSG(inputFilename, lineNum, s)
inline void DEBUG_MSG(string const& filename, int line, string const& s)
{
	NXLOG_DEBUG(filename, NXUtility::itos(line)+": "+s);
/*    Nanorex::NXLogger* logger = Nanorex::NXLogger::Instance();
    if (logger != 0)
        logger->log(Nanorex::NXLogLevel_Info, filename, msg.str());*/
}
#endif

#define CERR(s) { cerr << inputFilename << ": " << NXUtility::itos(lineNum) \
<< ": " << s << endl; }
// #define CDEBUG(s) NXLOG_DEBUG(inputFilename, NXUtility::itos(lineNum)+": "+s)
#define CDEBUG(s) { cerr << inputFilename << ": " << NXUtility::itos(lineNum) \
<< ": " << s << endl; }
#define CLOG(s) NXLOG_INFO(inputFilename, NXUtility::itos(lineNum)+": "+s)

#else
#define CDEBUG(s)
#define CLOG(s)
#endif

#define CSEVERE(s) NXLOG_SEVERE(inputFilename, NXUtility::itos(lineNum)+": "+s)



/* #line 103 "NanorexMMPImportExport.rl" */


/* #line 107 "NanorexMMPImportExport.rl" */

// static data from Ragel


/* #line 53 "NanorexMMPImportExport.cpp" */
static const char _mmp_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 7, 1, 
	8, 1, 9, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 20, 1, 21, 1, 
	24, 1, 25, 1, 29, 1, 31, 1, 
	32, 1, 33, 1, 34, 1, 35, 1, 
	36, 1, 37, 1, 38, 1, 39, 1, 
	40, 1, 42, 1, 45, 1, 47, 1, 
	48, 1, 52, 1, 56, 1, 58, 1, 
	73, 1, 74, 2, 0, 44, 2, 0, 
	69, 2, 0, 71, 2, 0, 72, 2, 
	5, 15, 2, 5, 16, 2, 5, 17, 
	2, 6, 7, 2, 8, 32, 2, 8, 
	33, 2, 8, 34, 2, 8, 35, 2, 
	8, 36, 2, 8, 37, 2, 8, 38, 
	2, 8, 39, 2, 8, 40, 2, 11, 
	18, 2, 11, 31, 2, 50, 27, 2, 
	52, 0, 2, 56, 57, 3, 0, 19, 
	67, 3, 0, 22, 70, 3, 0, 23, 
	68, 3, 0, 26, 65, 3, 0, 28, 
	66, 3, 0, 30, 53, 3, 0, 41, 
	61, 3, 0, 43, 54, 3, 0, 43, 
	62, 3, 0, 46, 55, 3, 0, 49, 
	64, 3, 0, 51, 63, 3, 20, 0, 
	69, 3, 59, 0, 60, 4, 12, 0, 
	23, 68, 4, 12, 0, 26, 65, 4, 
	12, 0, 28, 66, 4, 12, 0, 43, 
	54, 4, 12, 0, 43, 62, 4, 12, 
	0, 51, 63, 4, 48, 0, 49, 64, 
	5, 11, 18, 0, 19, 67
};

static const short _mmp_parser_key_offsets[] = {
	0, 0, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 17, 23, 25, 27, 29, 
	31, 33, 37, 42, 43, 44, 45, 46, 
	47, 48, 49, 55, 61, 62, 63, 64, 
	65, 70, 75, 80, 81, 82, 83, 87, 
	92, 93, 94, 95, 100, 105, 110, 111, 
	112, 113, 114, 119, 124, 135, 149, 163, 
	168, 180, 185, 186, 187, 188, 193, 198, 
	199, 200, 201, 202, 207, 212, 213, 214, 
	215, 216, 217, 218, 219, 220, 225, 230, 
	235, 236, 237, 241, 243, 245, 247, 261, 
	275, 288, 301, 303, 304, 305, 306, 307, 
	308, 312, 318, 325, 330, 335, 337, 344, 
	346, 350, 356, 358, 360, 362, 364, 366, 
	370, 375, 376, 377, 378, 379, 380, 381, 
	382, 383, 388, 390, 402, 405, 408, 411, 
	416, 423, 430, 436, 443, 451, 457, 462, 
	468, 477, 481, 489, 495, 504, 508, 516, 
	522, 531, 535, 543, 549, 555, 568, 570, 
	585, 600, 614, 622, 626, 634, 642, 650, 
	654, 662, 670, 678, 682, 690, 698, 706, 
	713, 716, 719, 722, 730, 735, 742, 750, 
	758, 760, 768, 771, 774, 777, 780, 783, 
	786, 789, 792, 795, 800, 807, 814, 821, 
	829, 835, 837, 845, 852, 855, 858, 861, 
	867, 879, 894, 909, 915, 924, 928, 937, 
	943, 952, 956, 965, 971, 980, 984, 993, 
	999, 1008, 1012, 1021, 1027, 1033, 1042, 1046, 
	1055, 1061, 1067, 1076, 1080, 1089, 1095, 1104, 
	1108, 1117, 1123, 1132, 1136, 1145, 1151, 1157, 
	1166, 1170, 1179, 1185, 1191, 1193, 1203, 1209, 
	1213, 1221, 1231, 1237, 1241, 1249, 1259, 1265, 
	1269, 1277, 1287, 1293, 1297, 1305, 1315, 1321, 
	1325, 1333, 1343, 1349, 1353, 1361, 1371, 1377, 
	1381, 1389, 1399, 1405, 1409, 1417, 1427, 1433, 
	1437, 1445, 1459, 1462, 1465, 1468, 1471, 1474, 
	1481, 1488, 1490, 1503, 1515, 1530, 1545, 1551, 
	1565, 1568, 1571, 1574, 1577, 1583, 1589, 1601, 
	1616, 1631, 1637, 1650, 1652, 1667, 1682, 1696, 
	1710, 1713, 1716, 1719, 1724, 1732, 1735, 1738, 
	1741, 1746, 1758, 1773, 1788, 1802, 1814, 1829, 
	1844, 1846, 1860, 1863, 1866, 1869, 1872, 1877, 
	1889, 1904, 1919, 1933, 1945, 1960, 1975, 1977, 
	1991, 1994, 1997, 2000, 2003, 2006, 2009, 2012, 
	2015, 2020, 2032, 2047, 2062, 2076, 2088, 2103, 
	2118, 2120, 2134, 2137, 2140, 2145, 2151, 2163, 
	2178, 2193, 2199, 2212, 2214, 2229, 2244, 2258, 
	2272, 2274, 2274, 2287
};

static const char _mmp_parser_trans_keys[] = {
	10, 32, 109, 9, 13, 109, 112, 102, 
	111, 114, 109, 97, 116, 9, 32, 11, 
	13, 9, 32, 11, 13, 48, 57, 48, 
	57, 48, 57, 48, 57, 48, 57, 48, 
	57, 9, 32, 11, 13, 9, 32, 114, 
	11, 13, 101, 113, 117, 105, 114, 101, 
	100, 10, 32, 35, 59, 9, 13, 10, 
	32, 103, 107, 9, 13, 114, 111, 117, 
	112, 9, 32, 40, 11, 13, 9, 32, 
	40, 11, 13, 9, 32, 86, 11, 13, 
	105, 101, 119, 9, 32, 11, 13, 9, 
	32, 68, 11, 13, 97, 116, 97, 9, 
	32, 41, 11, 13, 10, 32, 35, 9, 
	13, 10, 32, 103, 9, 13, 114, 111, 
	117, 112, 9, 32, 40, 11, 13, 9, 
	32, 40, 11, 13, 9, 32, 95, 11, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 41, 95, 11, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, 9, 32, 41, 
	95, 11, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 9, 13, 
	10, 32, 35, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 101, 9, 
	13, 110, 100, 49, 10, 32, 35, 9, 
	13, 10, 32, 103, 9, 13, 114, 111, 
	117, 112, 9, 32, 40, 11, 13, 9, 
	32, 67, 11, 13, 108, 105, 112, 98, 
	111, 97, 114, 100, 9, 32, 41, 11, 
	13, 10, 32, 35, 9, 13, 10, 32, 
	101, 9, 13, 110, 100, 9, 32, 11, 
	13, -1, 10, -1, 10, -1, 10, 10, 
	32, 35, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, 9, 32, 95, 11, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	9, 32, 95, 11, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 101, 
	108, 118, 105, 110, 9, 32, 11, 13, 
	9, 32, 11, 13, 48, 57, 10, 32, 
	35, 9, 13, 48, 57, 10, 32, 35, 
	9, 13, 10, 32, 103, 9, 13, -1, 
	10, 10, 32, 35, 9, 13, 48, 57, 
	-1, 10, 9, 32, 11, 13, 9, 32, 
	11, 13, 48, 57, 48, 57, 48, 57, 
	48, 57, 48, 57, 48, 57, 9, 32, 
	11, 13, 9, 32, 112, 11, 13, 114, 
	101, 102, 101, 114, 114, 101, 100, 10, 
	32, 35, 9, 13, -1, 10, -1, 10, 
	32, 97, 98, 99, 101, 103, 105, 109, 
	9, 13, -1, 10, 116, -1, 10, 111, 
	-1, 10, 109, -1, 10, 32, 9, 13, 
	-1, 10, 32, 9, 13, 48, 57, -1, 
	10, 32, 9, 13, 48, 57, -1, 10, 
	32, 40, 9, 13, -1, 10, 32, 9, 
	13, 48, 57, -1, 10, 32, 41, 9, 
	13, 48, 57, -1, 10, 32, 41, 9, 
	13, -1, 10, 32, 9, 13, -1, 10, 
	32, 40, 9, 13, -1, 10, 32, 43, 
	45, 9, 13, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, -1, 
	10, 32, 43, 45, 9, 13, 48, 57, 
	-1, 10, 48, 57, -1, 10, 32, 44, 
	9, 13, 48, 57, -1, 10, 32, 44, 
	9, 13, -1, 10, 32, 43, 45, 9, 
	13, 48, 57, -1, 10, 48, 57, -1, 
	10, 32, 41, 9, 13, 48, 57, -1, 
	10, 32, 41, 9, 13, -1, 10, 32, 
	35, 9, 13, -1, 10, 32, 35, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, -1, 10, 32, 35, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 41, 9, 13, 48, 57, -1, 10, 
	48, 57, -1, 10, 32, 41, 9, 13, 
	48, 57, -1, 10, 32, 41, 9, 13, 
	48, 57, -1, 10, 32, 44, 9, 13, 
	48, 57, -1, 10, 48, 57, -1, 10, 
	32, 44, 9, 13, 48, 57, -1, 10, 
	32, 44, 9, 13, 48, 57, -1, 10, 
	32, 44, 9, 13, 48, 57, -1, 10, 
	48, 57, -1, 10, 32, 44, 9, 13, 
	48, 57, -1, 10, 32, 44, 9, 13, 
	48, 57, -1, 10, 32, 41, 9, 13, 
	48, 57, -1, 10, 32, 9, 13, 48, 
	57, -1, 10, 111, -1, 10, 110, -1, 
	10, 100, -1, 10, 95, 97, 99, 103, 
	49, 51, -1, 10, 32, 9, 13, -1, 
	10, 32, 9, 13, 48, 57, -1, 10, 
	32, 35, 9, 13, 48, 57, -1, 10, 
	32, 35, 9, 13, 48, 57, -1, 10, 
	-1, 10, 32, 35, 9, 13, 48, 57, 
	-1, 10, 100, -1, 10, 105, -1, 10, 
	114, -1, 10, 101, -1, 10, 99, -1, 
	10, 116, -1, 10, 105, -1, 10, 111, 
	-1, 10, 110, -1, 10, 32, 9, 13, 
	-1, 10, 32, 9, 13, 48, 57, -1, 
	10, 32, 9, 13, 48, 57, -1, 10, 
	32, 9, 13, 48, 57, -1, 10, 32, 
	35, 9, 13, 48, 57, -1, 10, 32, 
	35, 9, 13, -1, 10, -1, 10, 32, 
	35, 9, 13, 48, 57, -1, 10, 32, 
	9, 13, 48, 57, -1, 10, 115, -1, 
	10, 121, -1, 10, 115, -1, 10, 32, 
	40, 9, 13, -1, 10, 32, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 41, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 41, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	40, 9, 13, -1, 10, 32, 43, 45, 
	9, 13, 48, 57, -1, 10, 48, 57, 
	-1, 10, 32, 44, 46, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, -1, 
	10, 32, 43, 45, 9, 13, 48, 57, 
	-1, 10, 48, 57, -1, 10, 32, 44, 
	46, 9, 13, 48, 57, -1, 10, 32, 
	44, 9, 13, -1, 10, 32, 43, 45, 
	9, 13, 48, 57, -1, 10, 48, 57, 
	-1, 10, 32, 44, 46, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, -1, 
	10, 32, 43, 45, 9, 13, 48, 57, 
	-1, 10, 48, 57, -1, 10, 32, 41, 
	46, 9, 13, 48, 57, -1, 10, 32, 
	41, 9, 13, -1, 10, 32, 40, 9, 
	13, -1, 10, 32, 43, 45, 9, 13, 
	48, 57, -1, 10, 48, 57, -1, 10, 
	32, 41, 46, 9, 13, 48, 57, -1, 
	10, 32, 41, 9, 13, -1, 10, 32, 
	40, 9, 13, -1, 10, 32, 43, 45, 
	9, 13, 48, 57, -1, 10, 48, 57, 
	-1, 10, 32, 44, 46, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, -1, 
	10, 32, 43, 45, 9, 13, 48, 57, 
	-1, 10, 48, 57, -1, 10, 32, 44, 
	46, 9, 13, 48, 57, -1, 10, 32, 
	44, 9, 13, -1, 10, 32, 43, 45, 
	9, 13, 48, 57, -1, 10, 48, 57, 
	-1, 10, 32, 41, 46, 9, 13, 48, 
	57, -1, 10, 32, 41, 9, 13, -1, 
	10, 32, 40, 9, 13, -1, 10, 32, 
	43, 45, 9, 13, 48, 57, -1, 10, 
	48, 57, -1, 10, 32, 41, 46, 9, 
	13, 48, 57, -1, 10, 32, 41, 9, 
	13, -1, 10, 32, 35, 9, 13, -1, 
	10, -1, 10, 32, 41, 69, 101, 9, 
	13, 48, 57, -1, 10, 43, 45, 48, 
	57, -1, 10, 48, 57, -1, 10, 32, 
	41, 9, 13, 48, 57, -1, 10, 32, 
	41, 69, 101, 9, 13, 48, 57, -1, 
	10, 43, 45, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 41, 9, 13, 48, 
	57, -1, 10, 32, 44, 69, 101, 9, 
	13, 48, 57, -1, 10, 43, 45, 48, 
	57, -1, 10, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 32, 
	44, 69, 101, 9, 13, 48, 57, -1, 
	10, 43, 45, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 41, 69, 101, 9, 
	13, 48, 57, -1, 10, 43, 45, 48, 
	57, -1, 10, 48, 57, -1, 10, 32, 
	41, 9, 13, 48, 57, -1, 10, 32, 
	41, 69, 101, 9, 13, 48, 57, -1, 
	10, 43, 45, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 41, 9, 13, 48, 
	57, -1, 10, 32, 44, 69, 101, 9, 
	13, 48, 57, -1, 10, 43, 45, 48, 
	57, -1, 10, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 32, 
	44, 69, 101, 9, 13, 48, 57, -1, 
	10, 43, 45, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 44, 69, 101, 9, 
	13, 48, 57, -1, 10, 43, 45, 48, 
	57, -1, 10, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 32, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 103, -1, 10, 
	114, -1, 10, 111, -1, 10, 117, -1, 
	10, 112, -1, 10, 32, 35, 40, 9, 
	13, -1, 10, 32, 35, 40, 9, 13, 
	-1, 10, -1, 10, 32, 41, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 41, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 41, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 9, 13, -1, 
	10, 32, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 114, 
	-1, 10, 111, -1, 10, 117, -1, 10, 
	112, -1, 10, 32, 40, 9, 13, -1, 
	10, 32, 40, 9, 13, -1, 10, 32, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 41, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 41, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 35, 9, 13, -1, 10, 32, 
	35, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, -1, 10, 32, 35, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 35, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	110, -1, 10, 102, -1, 10, 111, -1, 
	10, 32, 9, 13, -1, 10, 32, 97, 
	99, 111, 9, 13, -1, 10, 116, -1, 
	10, 111, -1, 10, 109, -1, 10, 32, 
	9, 13, -1, 10, 32, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 61, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	61, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 35, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	35, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, -1, 10, 
	32, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 104, -1, 
	10, 117, -1, 10, 110, -1, 10, 107, 
	-1, 10, 32, 9, 13, -1, 10, 32, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 61, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 61, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 35, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, -1, 10, 32, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 112, -1, 10, 101, -1, 10, 110, 
	-1, 10, 103, -1, 10, 114, -1, 10, 
	111, -1, 10, 117, -1, 10, 112, -1, 
	10, 32, 9, 13, -1, 10, 32, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 61, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 61, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 35, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 35, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	-1, 10, 32, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	111, -1, 10, 108, -1, 10, 32, 9, 
	13, -1, 10, 32, 40, 9, 13, -1, 
	10, 32, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 41, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 41, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 9, 13, -1, 
	10, 32, 35, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, -1, 10, -1, 10, 
	32, 35, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	35, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, -1, 10, 32, 35, 97, 98, 
	99, 101, 103, 105, 109, 9, 13, -1, 
	10, 32, 97, 98, 99, 101, 103, 105, 
	109, 9, 13, 0
};

static const char _mmp_parser_single_lengths[] = {
	0, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 0, 0, 0, 0, 
	0, 2, 3, 1, 1, 1, 1, 1, 
	1, 1, 4, 4, 1, 1, 1, 1, 
	3, 3, 3, 1, 1, 1, 2, 3, 
	1, 1, 1, 3, 3, 3, 1, 1, 
	1, 1, 3, 3, 3, 4, 4, 3, 
	4, 3, 1, 1, 1, 3, 3, 1, 
	1, 1, 1, 3, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 3, 3, 
	1, 1, 2, 2, 2, 2, 4, 4, 
	3, 3, 2, 1, 1, 1, 1, 1, 
	2, 2, 3, 3, 3, 2, 3, 2, 
	2, 2, 0, 0, 0, 0, 0, 2, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 2, 10, 3, 3, 3, 3, 
	3, 3, 4, 3, 4, 4, 3, 4, 
	5, 2, 4, 4, 5, 2, 4, 4, 
	5, 2, 4, 4, 4, 5, 2, 5, 
	5, 4, 4, 2, 4, 4, 4, 2, 
	4, 4, 4, 2, 4, 4, 4, 3, 
	3, 3, 3, 6, 3, 3, 4, 4, 
	2, 4, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	4, 2, 4, 3, 3, 3, 3, 4, 
	4, 5, 5, 4, 5, 2, 5, 4, 
	5, 2, 5, 4, 5, 2, 5, 4, 
	5, 2, 5, 4, 4, 5, 2, 5, 
	4, 4, 5, 2, 5, 4, 5, 2, 
	5, 4, 5, 2, 5, 4, 4, 5, 
	2, 5, 4, 4, 2, 6, 4, 2, 
	4, 6, 4, 2, 4, 6, 4, 2, 
	4, 6, 4, 2, 4, 6, 4, 2, 
	4, 6, 4, 2, 4, 6, 4, 2, 
	4, 6, 4, 2, 4, 6, 4, 2, 
	4, 4, 3, 3, 3, 3, 3, 5, 
	5, 2, 5, 4, 5, 5, 4, 4, 
	3, 3, 3, 3, 4, 4, 4, 5, 
	5, 4, 5, 2, 5, 5, 4, 4, 
	3, 3, 3, 3, 6, 3, 3, 3, 
	3, 4, 5, 5, 4, 4, 5, 5, 
	2, 4, 3, 3, 3, 3, 3, 4, 
	5, 5, 4, 4, 5, 5, 2, 4, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 4, 5, 5, 4, 4, 5, 5, 
	2, 4, 3, 3, 3, 4, 4, 5, 
	5, 4, 5, 2, 5, 5, 4, 4, 
	2, 0, 11, 10
};

static const char _mmp_parser_range_lengths[] = {
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 1, 1, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 1, 1, 4, 5, 5, 1, 
	4, 1, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 0, 0, 0, 5, 5, 
	5, 5, 0, 0, 0, 0, 0, 0, 
	1, 2, 2, 1, 1, 0, 2, 0, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 0, 0, 1, 
	2, 2, 1, 2, 2, 1, 1, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 1, 4, 0, 5, 
	5, 5, 2, 1, 2, 2, 2, 1, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	0, 0, 0, 1, 1, 2, 2, 2, 
	0, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 2, 2, 2, 2, 
	1, 0, 2, 2, 0, 0, 0, 1, 
	4, 5, 5, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 1, 2, 1, 2, 
	1, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 1, 2, 
	1, 2, 1, 1, 0, 2, 1, 1, 
	2, 2, 1, 1, 2, 2, 1, 1, 
	2, 2, 1, 1, 2, 2, 1, 1, 
	2, 2, 1, 1, 2, 2, 1, 1, 
	2, 2, 1, 1, 2, 2, 1, 1, 
	2, 5, 0, 0, 0, 0, 0, 1, 
	1, 0, 4, 4, 5, 5, 1, 5, 
	0, 0, 0, 0, 1, 1, 4, 5, 
	5, 1, 4, 0, 5, 5, 5, 5, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	1, 4, 5, 5, 5, 4, 5, 5, 
	0, 5, 0, 0, 0, 0, 1, 4, 
	5, 5, 5, 4, 5, 5, 0, 5, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 4, 5, 5, 5, 4, 5, 5, 
	0, 5, 0, 0, 1, 1, 4, 5, 
	5, 1, 4, 0, 5, 5, 5, 5, 
	0, 0, 1, 1
};

static const short _mmp_parser_index_offsets[] = {
	0, 0, 5, 7, 9, 11, 13, 15, 
	17, 19, 21, 25, 30, 32, 34, 36, 
	38, 40, 44, 49, 51, 53, 55, 57, 
	59, 61, 63, 69, 75, 77, 79, 81, 
	83, 88, 93, 98, 100, 102, 104, 108, 
	113, 115, 117, 119, 124, 129, 134, 136, 
	138, 140, 142, 147, 152, 160, 170, 180, 
	185, 194, 199, 201, 203, 205, 210, 215, 
	217, 219, 221, 223, 228, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 254, 259, 
	264, 266, 268, 272, 275, 278, 281, 291, 
	301, 310, 319, 322, 324, 326, 328, 330, 
	332, 336, 341, 347, 352, 357, 360, 366, 
	369, 373, 378, 380, 382, 384, 386, 388, 
	392, 397, 399, 401, 403, 405, 407, 409, 
	411, 413, 418, 421, 433, 437, 441, 445, 
	450, 456, 462, 468, 474, 481, 487, 492, 
	498, 506, 510, 517, 523, 531, 535, 542, 
	548, 556, 560, 567, 573, 579, 589, 592, 
	603, 614, 624, 631, 635, 642, 649, 656, 
	660, 667, 674, 681, 685, 692, 699, 706, 
	712, 716, 720, 724, 732, 737, 743, 750, 
	757, 760, 767, 771, 775, 779, 783, 787, 
	791, 795, 799, 803, 808, 814, 820, 826, 
	833, 839, 842, 849, 855, 859, 863, 867, 
	873, 882, 893, 904, 910, 918, 922, 930, 
	936, 944, 948, 956, 962, 970, 974, 982, 
	988, 996, 1000, 1008, 1014, 1020, 1028, 1032, 
	1040, 1046, 1052, 1060, 1064, 1072, 1078, 1086, 
	1090, 1098, 1104, 1112, 1116, 1124, 1130, 1136, 
	1144, 1148, 1156, 1162, 1168, 1171, 1180, 1186, 
	1190, 1197, 1206, 1212, 1216, 1223, 1232, 1238, 
	1242, 1249, 1258, 1264, 1268, 1275, 1284, 1290, 
	1294, 1301, 1310, 1316, 1320, 1327, 1336, 1342, 
	1346, 1353, 1362, 1368, 1372, 1379, 1388, 1394, 
	1398, 1405, 1415, 1419, 1423, 1427, 1431, 1435, 
	1442, 1449, 1452, 1462, 1471, 1482, 1493, 1499, 
	1509, 1513, 1517, 1521, 1525, 1531, 1537, 1546, 
	1557, 1568, 1574, 1584, 1587, 1598, 1609, 1619, 
	1629, 1633, 1637, 1641, 1646, 1654, 1658, 1662, 
	1666, 1671, 1680, 1691, 1702, 1712, 1721, 1732, 
	1743, 1746, 1756, 1760, 1764, 1768, 1772, 1777, 
	1786, 1797, 1808, 1818, 1827, 1838, 1849, 1852, 
	1862, 1866, 1870, 1874, 1878, 1882, 1886, 1890, 
	1894, 1899, 1908, 1919, 1930, 1940, 1949, 1960, 
	1971, 1974, 1984, 1988, 1992, 1997, 2003, 2012, 
	2023, 2034, 2040, 2050, 2053, 2064, 2075, 2085, 
	2095, 2098, 2099, 2112
};

static const short _mmp_parser_indicies[] = {
	2, 0, 3, 0, 1, 4, 1, 5, 
	1, 6, 1, 7, 1, 8, 1, 9, 
	1, 10, 1, 11, 1, 12, 12, 12, 
	1, 12, 12, 12, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 19, 19, 1, 19, 19, 20, 19, 
	1, 21, 1, 22, 1, 23, 1, 24, 
	1, 25, 1, 26, 1, 27, 1, 28, 
	27, 29, 30, 27, 1, 28, 31, 32, 
	33, 31, 1, 34, 1, 35, 1, 36, 
	1, 37, 1, 38, 38, 39, 38, 1, 
	40, 40, 41, 40, 1, 41, 41, 42, 
	41, 1, 43, 1, 44, 1, 45, 1, 
	46, 46, 46, 1, 46, 46, 47, 46, 
	1, 48, 1, 49, 1, 50, 1, 50, 
	50, 51, 50, 1, 52, 51, 53, 51, 
	1, 55, 54, 56, 54, 1, 57, 1, 
	58, 1, 59, 1, 60, 1, 61, 61, 
	62, 61, 1, 63, 63, 64, 63, 1, 
	64, 64, 65, 64, 65, 65, 65, 1, 
	66, 66, 67, 69, 66, 68, 69, 69, 
	69, 1, 70, 70, 71, 69, 70, 68, 
	69, 69, 69, 1, 73, 72, 74, 72, 
	1, 73, 72, 74, 75, 72, 75, 75, 
	75, 1, 77, 76, 78, 76, 1, 79, 
	1, 80, 1, 81, 1, 82, 81, 83, 
	81, 1, 85, 84, 86, 84, 1, 87, 
	1, 88, 1, 89, 1, 90, 1, 90, 
	90, 91, 90, 1, 91, 91, 92, 91, 
	1, 93, 1, 94, 1, 95, 1, 96, 
	1, 97, 1, 98, 1, 99, 1, 100, 
	1, 100, 100, 101, 100, 1, 102, 101, 
	103, 101, 1, 105, 104, 106, 104, 1, 
	107, 1, 108, 1, 109, 109, 109, 1, 
	1, 102, 103, 1, 82, 83, 1, 73, 
	74, 111, 110, 112, 114, 110, 113, 114, 
	114, 114, 1, 73, 115, 74, 114, 115, 
	113, 114, 114, 114, 1, 113, 113, 114, 
	113, 113, 114, 114, 114, 1, 68, 68, 
	69, 68, 68, 69, 69, 69, 1, 1, 
	52, 53, 116, 1, 117, 1, 118, 1, 
	119, 1, 120, 1, 121, 121, 121, 1, 
	121, 121, 121, 122, 1, 124, 123, 125, 
	123, 126, 1, 128, 127, 129, 127, 1, 
	128, 130, 32, 130, 1, 1, 128, 129, 
	124, 123, 125, 123, 126, 1, 1, 28, 
	29, 131, 131, 131, 1, 131, 131, 131, 
	132, 1, 133, 1, 134, 1, 135, 1, 
	136, 1, 137, 1, 138, 138, 138, 1, 
	138, 138, 139, 138, 1, 140, 1, 141, 
	1, 142, 1, 143, 1, 144, 1, 145, 
	1, 146, 1, 147, 1, 28, 147, 29, 
	147, 1, 148, 150, 149, 148, 152, 151, 
	153, 154, 155, 156, 157, 158, 159, 151, 
	149, 148, 150, 160, 149, 148, 150, 161, 
	149, 148, 150, 162, 149, 148, 150, 163, 
	163, 149, 148, 150, 163, 163, 164, 149, 
	148, 150, 165, 165, 166, 149, 148, 150, 
	167, 168, 167, 149, 148, 150, 168, 168, 
	169, 149, 148, 150, 170, 171, 170, 172, 
	149, 148, 150, 170, 171, 170, 149, 148, 
	150, 173, 173, 149, 148, 150, 174, 175, 
	174, 149, 148, 150, 175, 176, 177, 175, 
	178, 149, 148, 150, 178, 149, 148, 150, 
	179, 180, 179, 181, 149, 148, 150, 179, 
	180, 179, 149, 148, 150, 182, 183, 184, 
	182, 185, 149, 148, 150, 185, 149, 148, 
	150, 186, 187, 186, 188, 149, 148, 150, 
	186, 187, 186, 149, 148, 150, 189, 190, 
	191, 189, 192, 149, 148, 150, 192, 149, 
	148, 150, 193, 194, 193, 195, 149, 148, 
	150, 193, 194, 193, 149, 148, 197, 196, 
	198, 196, 149, 148, 197, 196, 198, 199, 
	196, 199, 199, 199, 149, 148, 197, 198, 
	148, 201, 200, 202, 204, 200, 203, 204, 
	204, 204, 149, 148, 197, 205, 198, 204, 
	205, 203, 204, 204, 204, 149, 148, 150, 
	203, 204, 203, 203, 204, 204, 204, 149, 
	148, 150, 193, 194, 193, 195, 149, 148, 
	150, 206, 149, 148, 150, 207, 208, 207, 
	209, 149, 148, 150, 207, 208, 207, 209, 
	149, 148, 150, 186, 187, 186, 188, 149, 
	148, 150, 210, 149, 148, 150, 211, 212, 
	211, 213, 149, 148, 150, 211, 212, 211, 
	213, 149, 148, 150, 179, 180, 179, 181, 
	149, 148, 150, 214, 149, 148, 150, 215, 
	216, 215, 217, 149, 148, 150, 215, 216, 
	215, 217, 149, 148, 150, 170, 171, 170, 
	172, 149, 148, 150, 165, 165, 166, 149, 
	148, 150, 218, 149, 148, 150, 219, 149, 
	148, 150, 220, 149, 148, 150, 222, 221, 
	221, 221, 221, 149, 148, 150, 223, 223, 
	149, 148, 150, 223, 223, 224, 149, 148, 
	226, 225, 227, 225, 228, 149, 148, 230, 
	229, 231, 229, 224, 149, 148, 230, 231, 
	148, 226, 225, 227, 225, 228, 149, 148, 
	150, 232, 149, 148, 150, 233, 149, 148, 
	150, 234, 149, 148, 150, 235, 149, 148, 
	150, 236, 149, 148, 150, 237, 149, 148, 
	150, 238, 149, 148, 150, 239, 149, 148, 
	150, 240, 149, 148, 150, 241, 241, 149, 
	148, 150, 241, 241, 242, 149, 148, 150, 
	243, 243, 244, 149, 148, 150, 243, 243, 
	245, 149, 148, 247, 246, 248, 246, 249, 
	149, 148, 247, 246, 248, 246, 149, 148, 
	247, 248, 148, 247, 246, 248, 246, 249, 
	149, 148, 150, 243, 243, 244, 149, 148, 
	150, 250, 149, 148, 150, 251, 149, 148, 
	150, 252, 149, 148, 150, 252, 253, 252, 
	149, 148, 150, 253, 254, 253, 254, 254, 
	254, 149, 148, 150, 255, 256, 258, 255, 
	257, 258, 258, 258, 149, 148, 150, 259, 
	260, 258, 259, 257, 258, 258, 258, 149, 
	148, 150, 261, 262, 261, 149, 148, 150, 
	262, 263, 263, 262, 264, 149, 148, 150, 
	265, 149, 148, 150, 266, 267, 268, 266, 
	265, 149, 148, 150, 269, 270, 269, 149, 
	148, 150, 271, 272, 272, 271, 273, 149, 
	148, 150, 274, 149, 148, 150, 275, 276, 
	277, 275, 274, 149, 148, 150, 278, 279, 
	278, 149, 148, 150, 280, 281, 281, 280, 
	282, 149, 148, 150, 283, 149, 148, 150, 
	284, 285, 286, 284, 283, 149, 148, 150, 
	287, 288, 287, 149, 148, 150, 289, 290, 
	290, 289, 291, 149, 148, 150, 292, 149, 
	148, 150, 293, 294, 295, 293, 292, 149, 
	148, 150, 296, 297, 296, 149, 148, 150, 
	298, 299, 298, 149, 148, 150, 299, 300, 
	300, 299, 301, 149, 148, 150, 302, 149, 
	148, 150, 303, 304, 305, 303, 302, 149, 
	148, 150, 306, 307, 306, 149, 148, 150, 
	308, 309, 308, 149, 148, 150, 309, 310, 
	310, 309, 311, 149, 148, 150, 312, 149, 
	148, 150, 313, 314, 315, 313, 312, 149, 
	148, 150, 316, 317, 316, 149, 148, 150, 
	318, 319, 319, 318, 320, 149, 148, 150, 
	321, 149, 148, 150, 322, 323, 324, 322, 
	321, 149, 148, 150, 325, 326, 325, 149, 
	148, 150, 327, 328, 328, 327, 329, 149, 
	148, 150, 330, 149, 148, 150, 331, 332, 
	333, 331, 330, 149, 148, 150, 334, 335, 
	334, 149, 148, 150, 336, 337, 336, 149, 
	148, 150, 337, 338, 338, 337, 339, 149, 
	148, 150, 340, 149, 148, 150, 341, 342, 
	343, 341, 340, 149, 148, 150, 344, 345, 
	344, 149, 148, 347, 346, 348, 346, 149, 
	148, 347, 348, 148, 150, 341, 342, 349, 
	349, 341, 343, 149, 148, 150, 350, 350, 
	351, 149, 148, 150, 351, 149, 148, 150, 
	341, 342, 341, 351, 149, 148, 150, 331, 
	332, 352, 352, 331, 333, 149, 148, 150, 
	353, 353, 354, 149, 148, 150, 354, 149, 
	148, 150, 331, 332, 331, 354, 149, 148, 
	150, 322, 323, 355, 355, 322, 324, 149, 
	148, 150, 356, 356, 357, 149, 148, 150, 
	357, 149, 148, 150, 322, 323, 322, 357, 
	149, 148, 150, 313, 314, 358, 358, 313, 
	315, 149, 148, 150, 359, 359, 360, 149, 
	148, 150, 360, 149, 148, 150, 313, 314, 
	313, 360, 149, 148, 150, 303, 304, 361, 
	361, 303, 305, 149, 148, 150, 362, 362, 
	363, 149, 148, 150, 363, 149, 148, 150, 
	303, 304, 303, 363, 149, 148, 150, 293, 
	294, 364, 364, 293, 295, 149, 148, 150, 
	365, 365, 366, 149, 148, 150, 366, 149, 
	148, 150, 293, 294, 293, 366, 149, 148, 
	150, 284, 285, 367, 367, 284, 286, 149, 
	148, 150, 368, 368, 369, 149, 148, 150, 
	369, 149, 148, 150, 284, 285, 284, 369, 
	149, 148, 150, 275, 276, 370, 370, 275, 
	277, 149, 148, 150, 371, 371, 372, 149, 
	148, 150, 372, 149, 148, 150, 275, 276, 
	275, 372, 149, 148, 150, 266, 267, 373, 
	373, 266, 268, 149, 148, 150, 374, 374, 
	375, 149, 148, 150, 375, 149, 148, 150, 
	266, 267, 266, 375, 149, 148, 150, 257, 
	258, 257, 257, 258, 258, 258, 149, 148, 
	150, 376, 149, 148, 150, 377, 149, 148, 
	150, 378, 149, 148, 150, 379, 149, 148, 
	150, 380, 149, 148, 382, 381, 383, 384, 
	381, 149, 148, 386, 385, 387, 388, 385, 
	149, 148, 386, 387, 148, 150, 389, 390, 
	391, 389, 391, 391, 391, 149, 148, 150, 
	389, 391, 389, 391, 391, 391, 149, 148, 
	150, 392, 393, 395, 392, 394, 395, 395, 
	395, 149, 148, 150, 396, 390, 395, 396, 
	394, 395, 395, 395, 149, 148, 386, 390, 
	387, 390, 149, 148, 150, 394, 395, 394, 
	394, 395, 395, 395, 149, 148, 150, 397, 
	149, 148, 150, 398, 149, 148, 150, 399, 
	149, 148, 150, 400, 149, 148, 150, 401, 
	402, 401, 149, 148, 150, 403, 404, 403, 
	149, 148, 150, 404, 405, 404, 405, 405, 
	405, 149, 148, 150, 406, 407, 409, 406, 
	408, 409, 409, 409, 149, 148, 150, 410, 
	411, 409, 410, 408, 409, 409, 409, 149, 
	148, 413, 412, 414, 412, 149, 148, 413, 
	412, 414, 415, 412, 415, 415, 415, 149, 
	148, 413, 414, 148, 417, 416, 418, 420, 
	416, 419, 420, 420, 420, 149, 148, 413, 
	421, 414, 420, 421, 419, 420, 420, 420, 
	149, 148, 150, 419, 420, 419, 419, 420, 
	420, 420, 149, 148, 150, 408, 409, 408, 
	408, 409, 409, 409, 149, 148, 150, 422, 
	149, 148, 150, 423, 149, 148, 150, 424, 
	149, 148, 150, 425, 425, 149, 148, 150, 
	425, 426, 427, 428, 425, 149, 148, 150, 
	429, 149, 148, 150, 430, 149, 148, 150, 
	431, 149, 148, 150, 432, 432, 149, 148, 
	150, 432, 433, 432, 433, 433, 433, 149, 
	148, 150, 434, 437, 436, 434, 435, 436, 
	436, 436, 149, 148, 150, 438, 439, 436, 
	438, 435, 436, 436, 436, 149, 148, 150, 
	435, 436, 435, 435, 436, 436, 436, 149, 
	148, 150, 439, 440, 439, 440, 440, 440, 
	149, 148, 442, 441, 443, 445, 441, 444, 
	445, 445, 445, 149, 148, 447, 446, 448, 
	445, 446, 444, 445, 445, 445, 149, 148, 
	447, 448, 148, 150, 444, 445, 444, 444, 
	445, 445, 445, 149, 148, 150, 449, 149, 
	148, 150, 450, 149, 148, 150, 451, 149, 
	148, 150, 452, 149, 148, 150, 453, 453, 
	149, 148, 150, 453, 454, 453, 454, 454, 
	454, 149, 148, 150, 455, 458, 457, 455, 
	456, 457, 457, 457, 149, 148, 150, 459, 
	460, 457, 459, 456, 457, 457, 457, 149, 
	148, 150, 456, 457, 456, 456, 457, 457, 
	457, 149, 148, 150, 460, 461, 460, 461, 
	461, 461, 149, 148, 463, 462, 464, 466, 
	462, 465, 466, 466, 466, 149, 148, 468, 
	467, 469, 466, 467, 465, 466, 466, 466, 
	149, 148, 468, 469, 148, 150, 465, 466, 
	465, 465, 466, 466, 466, 149, 148, 150, 
	470, 149, 148, 150, 471, 149, 148, 150, 
	472, 149, 148, 150, 473, 149, 148, 150, 
	474, 149, 148, 150, 475, 149, 148, 150, 
	476, 149, 148, 150, 477, 149, 148, 150, 
	478, 478, 149, 148, 150, 478, 479, 478, 
	479, 479, 479, 149, 148, 150, 480, 483, 
	482, 480, 481, 482, 482, 482, 149, 148, 
	150, 484, 485, 482, 484, 481, 482, 482, 
	482, 149, 148, 150, 481, 482, 481, 481, 
	482, 482, 482, 149, 148, 150, 485, 486, 
	485, 486, 486, 486, 149, 148, 488, 487, 
	489, 491, 487, 490, 491, 491, 491, 149, 
	148, 493, 492, 494, 491, 492, 490, 491, 
	491, 491, 149, 148, 493, 494, 148, 150, 
	490, 491, 490, 490, 491, 491, 491, 149, 
	148, 150, 495, 149, 148, 150, 496, 149, 
	148, 150, 497, 497, 149, 148, 150, 497, 
	498, 497, 149, 148, 150, 498, 499, 498, 
	499, 499, 499, 149, 148, 150, 500, 501, 
	503, 500, 502, 503, 503, 503, 149, 148, 
	150, 504, 505, 503, 504, 502, 503, 503, 
	503, 149, 148, 507, 506, 508, 506, 149, 
	148, 507, 506, 508, 509, 506, 509, 509, 
	509, 149, 148, 507, 508, 148, 511, 510, 
	512, 514, 510, 513, 514, 514, 514, 149, 
	148, 507, 515, 508, 514, 515, 513, 514, 
	514, 514, 149, 148, 150, 513, 514, 513, 
	513, 514, 514, 514, 149, 148, 150, 502, 
	503, 502, 502, 503, 503, 503, 149, 1, 
	517, 516, 109, 1, 152, 151, 516, 153, 
	154, 155, 156, 157, 158, 159, 151, 149, 
	518, 152, 151, 153, 154, 155, 156, 157, 
	158, 159, 151, 149, 0
};

static const short _mmp_parser_trans_targs_wi[] = {
	1, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 103, 104, 27, 
	28, 91, 29, 30, 31, 32, 33, 34, 
	33, 34, 35, 36, 37, 38, 39, 40, 
	41, 42, 43, 44, 45, 90, 45, 45, 
	46, 47, 48, 49, 50, 51, 52, 51, 
	52, 53, 54, 55, 89, 53, 54, 55, 
	56, 57, 85, 86, 57, 57, 58, 59, 
	60, 61, 62, 84, 62, 62, 63, 64, 
	65, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 83, 
	79, 79, 80, 81, 82, 377, 87, 57, 
	85, 88, 86, 87, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 102, 99, 
	100, 101, 100, 105, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 378, 122, 378, 123, 
	379, 124, 168, 196, 282, 296, 312, 362, 
	125, 126, 127, 128, 129, 130, 167, 130, 
	131, 132, 133, 134, 166, 135, 135, 136, 
	137, 163, 138, 139, 140, 162, 140, 141, 
	159, 142, 143, 144, 158, 144, 145, 155, 
	146, 147, 148, 154, 149, 378, 150, 151, 
	152, 378, 150, 153, 151, 152, 156, 147, 
	148, 157, 160, 143, 144, 161, 164, 139, 
	140, 165, 169, 170, 171, 172, 178, 173, 
	174, 175, 378, 176, 177, 175, 378, 176, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	187, 188, 189, 190, 195, 191, 192, 378, 
	193, 194, 197, 198, 199, 200, 201, 202, 
	203, 281, 201, 202, 203, 203, 204, 205, 
	206, 206, 207, 208, 277, 207, 208, 208, 
	209, 210, 210, 211, 212, 273, 211, 212, 
	212, 213, 214, 214, 215, 216, 269, 215, 
	216, 216, 217, 218, 218, 219, 220, 265, 
	219, 220, 220, 221, 222, 223, 223, 224, 
	225, 261, 224, 225, 225, 226, 227, 228, 
	228, 229, 230, 257, 229, 230, 230, 231, 
	232, 232, 233, 234, 253, 233, 234, 234, 
	235, 236, 236, 237, 238, 249, 237, 238, 
	238, 239, 240, 241, 241, 242, 243, 245, 
	242, 243, 243, 378, 244, 246, 247, 248, 
	250, 251, 252, 254, 255, 256, 258, 259, 
	260, 262, 263, 264, 266, 267, 268, 270, 
	271, 272, 274, 275, 276, 278, 279, 280, 
	283, 284, 285, 286, 287, 288, 378, 289, 
	290, 288, 378, 289, 290, 291, 294, 292, 
	293, 294, 295, 292, 293, 297, 298, 299, 
	300, 301, 302, 301, 302, 303, 304, 305, 
	311, 303, 304, 305, 306, 378, 307, 308, 
	309, 378, 307, 310, 308, 309, 313, 314, 
	315, 316, 317, 330, 344, 318, 319, 320, 
	321, 322, 323, 324, 322, 325, 323, 325, 
	326, 327, 378, 328, 329, 326, 327, 378, 
	328, 331, 332, 333, 334, 335, 336, 337, 
	338, 336, 339, 337, 339, 340, 341, 378, 
	342, 343, 340, 341, 378, 342, 345, 346, 
	347, 348, 349, 350, 351, 352, 353, 354, 
	355, 356, 354, 357, 355, 357, 358, 359, 
	378, 360, 361, 358, 359, 378, 360, 363, 
	364, 365, 366, 367, 368, 369, 375, 367, 
	368, 369, 370, 378, 371, 372, 373, 378, 
	371, 374, 372, 373, 376, 378, 378
};

static const unsigned char _mmp_parser_trans_actions_wi[] = {
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 43, 43, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 169, 0, 0, 1, 
	0, 0, 0, 0, 0, 65, 65, 0, 
	0, 17, 21, 21, 0, 19, 0, 0, 
	0, 177, 0, 17, 0, 1, 0, 0, 
	0, 0, 83, 0, 0, 1, 67, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 185, 0, 
	0, 1, 0, 0, 0, 0, 23, 220, 
	23, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 73, 143, 73, 5, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 81, 0, 92, 0, 
	201, 0, 0, 0, 69, 0, 140, 39, 
	0, 0, 0, 0, 0, 25, 5, 0, 
	0, 0, 0, 0, 5, 27, 0, 0, 
	0, 0, 0, 0, 29, 5, 0, 0, 
	0, 0, 0, 31, 5, 0, 0, 0, 
	0, 0, 33, 5, 0, 149, 0, 17, 
	134, 240, 134, 0, 19, 0, 0, 11, 
	101, 5, 0, 11, 98, 5, 0, 11, 
	95, 5, 0, 0, 0, 37, 0, 0, 
	0, 35, 197, 35, 5, 0, 86, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 0, 153, 
	0, 9, 0, 0, 0, 0, 17, 21, 
	137, 0, 19, 0, 45, 0, 0, 104, 
	104, 13, 15, 107, 13, 0, 47, 0, 
	104, 104, 13, 15, 110, 13, 0, 49, 
	0, 104, 104, 13, 15, 113, 13, 0, 
	51, 0, 104, 104, 13, 15, 116, 13, 
	0, 53, 0, 0, 104, 104, 13, 15, 
	119, 13, 0, 55, 0, 0, 104, 104, 
	13, 15, 122, 13, 0, 57, 0, 104, 
	104, 13, 15, 125, 13, 0, 59, 0, 
	104, 104, 13, 15, 128, 13, 0, 61, 
	0, 0, 104, 104, 13, 15, 131, 13, 
	0, 63, 0, 173, 0, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	0, 0, 0, 0, 0, 71, 235, 71, 
	71, 0, 189, 0, 0, 0, 0, 17, 
	21, 21, 0, 19, 0, 0, 0, 0, 
	0, 65, 65, 0, 0, 17, 21, 21, 
	0, 19, 0, 0, 0, 181, 0, 17, 
	23, 225, 23, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 21, 0, 19, 21, 0, 0, 
	17, 23, 205, 23, 0, 19, 0, 157, 
	0, 0, 0, 0, 0, 0, 17, 21, 
	0, 19, 21, 0, 0, 17, 23, 215, 
	23, 0, 19, 0, 165, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	21, 0, 19, 21, 0, 0, 17, 23, 
	230, 23, 0, 19, 0, 193, 0, 0, 
	0, 0, 0, 17, 21, 21, 0, 19, 
	0, 0, 0, 161, 0, 17, 23, 210, 
	23, 0, 19, 0, 0, 89, 79
};

static const unsigned char _mmp_parser_to_state_actions[] = {
	0, 75, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 75, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 75, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 3, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	3, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 7, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 41, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 146, 0
};

static const unsigned char _mmp_parser_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 77, 0
};

static const short _mmp_parser_eof_trans[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	149, 149, 149, 149, 149, 149, 149, 149, 
	0, 0, 0, 519
};

static const int mmp_parser_start = 1;
static const int mmp_parser_first_final = 377;
static const int mmp_parser_error = 0;

static const int mmp_parser_en_group_scanner = 378;
static const int mmp_parser_en_main = 1;

/* #line 111 "NanorexMMPImportExport.rl" */


// static data from class NanorexMMPImportExport

char const NanorexMMPImportExport::_s_bondOrderString[NUM_BOND_TYPES] = {
	'1', '2', '3', 'a', 'g', 'c'
};

char const
NanorexMMPImportExport::_s_bondOrderNameString[NUM_BOND_TYPES][16] =
{
	"single", "double", "triple", "aromatic", "graphitic", "carbomeric"
};

char const NanorexMMPImportExport::_s_hybridizationName[8][8] = {
	"none", "sp", "sp2", "sp3", "X-hyb4", "X-hyb5", "X-hyb6", "X-hyb7"
};

/*static*/
void NanorexMMPImportExport::SetResult(NXCommandResult& commandResult,
                                       int errCode,
                                       string const& errMsg)
{
	commandResult.setResult(errCode);
	vector<QString> message;
	message.push_back(QObject::tr(errMsg.c_str()));
	commandResult.setParamVector(message);
}

// .............................................................................

/* static */
void NanorexMMPImportExport::ClearResult(NXCommandResult& commandResult)
{
	commandResult.setResult((int) NX_CMD_SUCCESS);
	vector<QString> message;
	commandResult.setParamVector(message);
}


/* CONSTRUCTOR */
NanorexMMPImportExport::NanorexMMPImportExport()
{
	reset();
}

/* DESTRUCTOR */
NanorexMMPImportExport::~NanorexMMPImportExport()
{
}


/* FUNCTION: reset */
void NanorexMMPImportExport::reset(void)
{
	inputFilename.clear();
	dataStoreInfo = (NXDataStoreInfo*) NULL;
	
	lineNum = 0;
	insideViewDataGroup = false;
	insideClipboardGroup = false;
	
	atomPtr = NULL;
	bondPtr = NULL;
	foundAtomList.clear();
	targetAtomList.clear();
	molPtr = NULL;
	molSetPtr = NULL;
	molSetPtrStack.clear();
	molStyle = "def";
	
	clipboardGroup = NULL;
	
	// defaultAtomStyle = "def";
	// defaultAtomStyleStack.clear();
	
	// ragel stack
	stackSize = 2;
	stack.clear();
	stack.resize(stackSize, 0);
	
    // initialize the ragel engine
	
/* #line 1232 "NanorexMMPImportExport.cpp" */
	{
	cs = mmp_parser_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}
/* #line 194 "NanorexMMPImportExport.rl" */
}


/* FUNCTION: importFromFile */
NXCommandResult*
NanorexMMPImportExport::
importFromFile(NXMoleculeSet *rootMoleculeSetPtr,
               NXDataStoreInfo *dsInfo,
               const std::string& theFilename,
               int /*frameSetId*/, int /*frameIndex*/)
{
	reset();
	bool success = true;
	
	ClearResult(commandResult);
	
	ifstream mmpfile(theFilename.c_str(), ios::in);
	if(!mmpfile) {
		populateCommandResult(&commandResult,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
		success = false;
	}
	else {
		inputFilename = theFilename;
		dataStoreInfo = dsInfo;
		success = readMMP(mmpfile, rootMoleculeSetPtr);
	}
	
	// Set the meta information about the data store.
	if (success) {
		dataStoreInfo->setIsSingleStructure(true);
	}
	
	return &commandResult;
}


/* FUNCTION: readMMP */
bool NanorexMMPImportExport::readMMP(istream& instream,
                                     NXMoleculeSet *rootMoleculeSetPtr)
{
	p = RagelIstreamPtr(instream);
	pe = RagelIstreamPtr(instream, 0, ios::end);
	eof = pe;
	
	this->rootMoleculeSetPtr = rootMoleculeSetPtr;
	molSetPtr = NULL;
	// molSetPtrStack.push(molSetPtr);
	
    /// @todo handle first 'group' statement and molSetPtrStack initialization
	
    // Ragel parser implementation
	bool success = true;
	
/* #line 1296 "NanorexMMPImportExport.cpp" */
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _mmp_parser_actions + _mmp_parser_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 58:
/* #line 1 "NanorexMMPImportExport.rl" */
	{ts = p;}
	break;
/* #line 1317 "NanorexMMPImportExport.cpp" */
		}
	}

	_keys = _mmp_parser_trans_keys + _mmp_parser_key_offsets[cs];
	_trans = _mmp_parser_index_offsets[cs];

	_klen = _mmp_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _mmp_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _mmp_parser_indicies[_trans];
_eof_trans:
	cs = _mmp_parser_trans_targs_wi[_trans];

	if ( _mmp_parser_trans_actions_wi[_trans] == 0 )
		goto _again;

	_acts = _mmp_parser_actions + _mmp_parser_trans_actions_wi[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
/* #line 24 "NanorexMMPImportExport.rl" */
	{++lineNum;}
	break;
	case 2:
/* #line 41 "NanorexMMPImportExport.rl" */
	{intVal = intVal*10 + ((*p)-'0');}
	break;
	case 4:
/* #line 46 "NanorexMMPImportExport.rl" */
	{intVal2 = intVal2*10 + ((*p)-'0');}
	break;
	case 5:
/* #line 49 "NanorexMMPImportExport.rl" */
	{intVal=-intVal;}
	break;
	case 6:
/* #line 53 "NanorexMMPImportExport.rl" */
	{stringVal.clear(); /*stringVal = stringVal + fc;*/ doubleVal = HUGE_VAL;}
	break;
	case 7:
/* #line 54 "NanorexMMPImportExport.rl" */
	{stringVal = stringVal + (*p);}
	break;
	case 8:
/* #line 55 "NanorexMMPImportExport.rl" */
	{doubleVal = atof(stringVal.c_str());}
	break;
	case 9:
/* #line 72 "NanorexMMPImportExport.rl" */
	{ charStringWithSpaceStart = p; charStringWithSpaceStop = p;}
	break;
	case 10:
/* #line 74 "NanorexMMPImportExport.rl" */
	{ charStringWithSpaceStop = p; }
	break;
	case 11:
/* #line 83 "NanorexMMPImportExport.rl" */
	{ int stringVal_newSize = charStringWithSpaceStop - charStringWithSpaceStart + 1;
			assert(stringVal_newSize >= 0);
			stringVal.resize(stringVal_newSize);
			std::copy(charStringWithSpaceStart, charStringWithSpaceStop+1, stringVal.begin());
		}
	break;
	case 12:
/* #line 96 "NanorexMMPImportExport.rl" */
	{ int stringVal2_newSize = charStringWithSpaceStop - charStringWithSpaceStart + 1;
			cerr << "stringVal2_newSize = " << stringVal2_newSize << endl;
			if(stringVal2_newSize < 0) {
				cerr << "*charStringWithSpaceStart = " << *charStringWithSpaceStart
					<< ",  *charStringWithSpaceStop = " << *charStringWithSpaceStop << endl;
				assert(0);
			}
			stringVal2.resize(stringVal2_newSize);
			std::copy(charStringWithSpaceStart, charStringWithSpaceStop+1, stringVal2.begin());
		}
	break;
	case 13:
/* #line 29 "NanorexMMPImportExport.rl" */
	{ atomId = intVal; /*cerr << "atomId = " << atomId << endl;*/ }
	break;
	case 14:
/* #line 34 "NanorexMMPImportExport.rl" */
	{ atomicNum = intVal; /*cerr << "atomId = " << atomId << endl;*/}
	break;
	case 15:
/* #line 37 "NanorexMMPImportExport.rl" */
	{x = intVal; }
	break;
	case 16:
/* #line 38 "NanorexMMPImportExport.rl" */
	{y = intVal; }
	break;
	case 17:
/* #line 39 "NanorexMMPImportExport.rl" */
	{z = intVal; }
	break;
	case 18:
/* #line 50 "NanorexMMPImportExport.rl" */
	{ atomStyle = stringVal;
		    /*cerr << "atom_style = " << stringVal << endl;*/
		}
	break;
	case 19:
/* #line 67 "NanorexMMPImportExport.rl" */
	{ newAtom(atomId, atomicNum, x, y, z, atomStyle); }
	break;
	case 20:
/* #line 71 "NanorexMMPImportExport.rl" */
	{
		newBond(stringVal, intVal);
	}
	break;
	case 21:
/* #line 77 "NanorexMMPImportExport.rl" */
	{ stringVal = *p; }
	break;
	case 22:
/* #line 87 "NanorexMMPImportExport.rl" */
	{
		newBondDirection(intVal, intVal2);
	}
	break;
	case 23:
/* #line 102 "NanorexMMPImportExport.rl" */
	{
		// stripTrailingWhiteSpaces(stringVal);
		// stripTrailingWhiteSpaces(stringVal2);
		newAtomInfo(stringVal, stringVal2);
	}
	break;
	case 24:
/* #line 9 "NanorexMMPImportExport.rl" */
	{lineStart=p;}
	break;
	case 26:
/* #line 16 "NanorexMMPImportExport.rl" */
	{
			if(stringVal2 == "")
				stringVal2 = "def";
			newMolecule(stringVal, stringVal2);
		}
	break;
	case 27:
/* #line 24 "NanorexMMPImportExport.rl" */
	{lineStart=p;}
	break;
	case 28:
/* #line 35 "NanorexMMPImportExport.rl" */
	{ newChunkInfo(stringVal, stringVal2); }
	break;
	case 29:
/* #line 26 "NanorexMMPImportExport.rl" */
	{ lineStart = p; }
	break;
	case 30:
/* #line 30 "NanorexMMPImportExport.rl" */
	{ newViewDataGroup(); }
	break;
	case 31:
/* #line 37 "NanorexMMPImportExport.rl" */
	{csysViewName = stringVal;}
	break;
	case 32:
/* #line 40 "NanorexMMPImportExport.rl" */
	{csysQw=doubleVal;}
	break;
	case 33:
/* #line 41 "NanorexMMPImportExport.rl" */
	{csysQx=doubleVal;}
	break;
	case 34:
/* #line 42 "NanorexMMPImportExport.rl" */
	{csysQy=doubleVal;}
	break;
	case 35:
/* #line 43 "NanorexMMPImportExport.rl" */
	{csysQz=doubleVal;}
	break;
	case 36:
/* #line 45 "NanorexMMPImportExport.rl" */
	{csysScale=doubleVal;}
	break;
	case 37:
/* #line 47 "NanorexMMPImportExport.rl" */
	{csysPovX=doubleVal;}
	break;
	case 38:
/* #line 48 "NanorexMMPImportExport.rl" */
	{csysPovY=doubleVal;}
	break;
	case 39:
/* #line 49 "NanorexMMPImportExport.rl" */
	{csysPovZ=doubleVal;}
	break;
	case 40:
/* #line 51 "NanorexMMPImportExport.rl" */
	{csysZoomFactor=doubleVal;}
	break;
	case 41:
/* #line 54 "NanorexMMPImportExport.rl" */
	{ newNamedView(csysViewName, csysQw, csysQx, csysQy, csysQz, csysScale,
		                 csysPovX, csysPovY, csysPovZ, csysZoomFactor);
		}
	break;
	case 42:
/* #line 61 "NanorexMMPImportExport.rl" */
	{ stringVal2.clear(); }
	break;
	case 43:
/* #line 67 "NanorexMMPImportExport.rl" */
	{ newMolStructGroup(stringVal, stringVal2); }
	break;
	case 44:
/* #line 74 "NanorexMMPImportExport.rl" */
	{ end1(); }
	break;
	case 45:
/* #line 78 "NanorexMMPImportExport.rl" */
	{ lineStart = p; }
	break;
	case 46:
/* #line 83 "NanorexMMPImportExport.rl" */
	{ newClipboardGroup(); }
	break;
	case 47:
/* #line 87 "NanorexMMPImportExport.rl" */
	{lineStart=p;}
	break;
	case 48:
/* #line 88 "NanorexMMPImportExport.rl" */
	{ stringVal.clear(); }
	break;
	case 49:
/* #line 94 "NanorexMMPImportExport.rl" */
	{ endGroup(stringVal); }
	break;
	case 50:
/* #line 98 "NanorexMMPImportExport.rl" */
	{lineStart=p;}
	break;
	case 51:
/* #line 108 "NanorexMMPImportExport.rl" */
	{ newOpenGroupInfo(stringVal, stringVal2); }
	break;
	case 52:
/* #line 65 "NanorexMMPImportExport.rl" */
	{ kelvinTemp = intVal; }
	break;
	case 53:
/* #line 79 "NanorexMMPImportExport.rl" */
	{ p--; {
		cerr << "Ragel stack prepush: top = " << top << ", stackSize = " << stackSize << endl;
		if(top == stackSize) {
			stackSize += stackSize;
			stack.resize(stackSize, 0);
			cerr << "Resized stack to " << stackSize << endl;
		}
	{stack[top++] = cs; cs = 378; goto _again;}} }
	break;
	case 54:
/* #line 82 "NanorexMMPImportExport.rl" */
	{ p--; {
		cerr << "Ragel stack prepush: top = " << top << ", stackSize = " << stackSize << endl;
		if(top == stackSize) {
			stackSize += stackSize;
			stack.resize(stackSize, 0);
			cerr << "Resized stack to " << stackSize << endl;
		}
	{stack[top++] = cs; cs = 378; goto _again;}} }
	break;
	case 55:
/* #line 87 "NanorexMMPImportExport.rl" */
	{ p--; {
		cerr << "Ragel stack prepush: top = " << top << ", stackSize = " << stackSize << endl;
		if(top == stackSize) {
			stackSize += stackSize;
			stack.resize(stackSize, 0);
			cerr << "Resized stack to " << stackSize << endl;
		}
	{stack[top++] = cs; cs = 378; goto _again;}} }
	break;
	case 59:
/* #line 1 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 60:
/* #line 131 "NanorexMMPImportExport.rl" */
	{act = 12;}
	break;
	case 61:
/* #line 116 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 62:
/* #line 118 "NanorexMMPImportExport.rl" */
	{te = p+1;{ p--; {
		cerr << "Ragel stack prepush: top = " << top << ", stackSize = " << stackSize << endl;
		if(top == stackSize) {
			stackSize += stackSize;
			stack.resize(stackSize, 0);
			cerr << "Resized stack to " << stackSize << endl;
		}
	{stack[top++] = cs; cs = 378; goto _again;}} }}
	break;
	case 63:
/* #line 119 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 64:
/* #line 120 "NanorexMMPImportExport.rl" */
	{te = p+1;{{cs = stack[--top]; goto _again;}}}
	break;
	case 65:
/* #line 121 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 66:
/* #line 122 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 67:
/* #line 123 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 68:
/* #line 124 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 69:
/* #line 125 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 70:
/* #line 126 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 71:
/* #line 129 "NanorexMMPImportExport.rl" */
	{te = p+1;}
	break;
	case 72:
/* #line 131 "NanorexMMPImportExport.rl" */
	{te = p+1;{ cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}}
	break;
	case 73:
/* #line 131 "NanorexMMPImportExport.rl" */
	{te = p;p--;{ cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}}
	break;
	case 74:
/* #line 1 "NanorexMMPImportExport.rl" */
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 12:
	{{p = ((te))-1;} cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}
	break;
	default: break;
	}
	}
	break;
/* #line 1734 "NanorexMMPImportExport.cpp" */
		}
	}

_again:
	_acts = _mmp_parser_actions + _mmp_parser_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
/* #line 40 "NanorexMMPImportExport.rl" */
	{intVal=(*p)-'0';}
	break;
	case 3:
/* #line 45 "NanorexMMPImportExport.rl" */
	{intVal2=(*p)-'0';}
	break;
	case 25:
/* #line 11 "NanorexMMPImportExport.rl" */
	{ stringVal2.clear(); /* 'style' string optional */ }
	break;
	case 56:
/* #line 1 "NanorexMMPImportExport.rl" */
	{ts = 0;}
	break;
	case 57:
/* #line 1 "NanorexMMPImportExport.rl" */
	{act = 0;}
	break;
/* #line 1763 "NanorexMMPImportExport.cpp" */
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _mmp_parser_eof_trans[cs] > 0 ) {
		_trans = _mmp_parser_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}
/* #line 249 "NanorexMMPImportExport.rl" */
	
    // End-of-parsing sanity checks
	if(molSetPtrStack.size() != 0) {
		NXLOG_WARNING("NanorexMMPImportExport",
		              "At least one group has no matching egroup statement");
	}
	return success;
}


/* FUNCTION newAtom */
void NanorexMMPImportExport::newAtom(int id, int atomicNum, int x, int y, int z,
                                     string const& style)
{
	if(molPtr == NULL) {
		CSEVERE("No parent molecule for atom");
		return;
	}
	
	// error if id was previously specified
	map<int,OBAtom*>::const_iterator atomExistsQuery =
		foundAtomList.find(id);
	if(atomExistsQuery != foundAtomList.end()) {
		NXLOG_SEVERE("NanorexMMPImportExport",
		             "Atom-id " + NXUtility::itos(id) + " is repeated");
		return;
	}
	
	
	atomPtr = molPtr->NewAtom();
	atomPtr->SetAtomicNum(atomicNum);
	/// @todo set implicit valence based on role (axis, strand etc)
	if(atomicNum >= 200)
		atomPtr->SetImplicitValence(4);
	NXAtomData *atomDataPtr = new NXAtomData(atomicNum);
	atomDataPtr->setIdx(id);
	atomDataPtr->setRenderStyleCode(style);
	assert(atomDataPtr->GetDataType() == NXAtomDataType);
	atomPtr->SetData(atomDataPtr); // atomic number
	assert(atomPtr->HasData(NXAtomDataType));
	// convert to Angstroms
	double const LENGTH_SCALE = 1.0e-3;
	atomPtr->SetVector(double(x) * LENGTH_SCALE,
	                   double(y) * LENGTH_SCALE,
	                   double(z) * LENGTH_SCALE);
	
	foundAtomList[id] = atomPtr;
	
	bondPtr = NULL;	
	
	CDEBUG("atom " + NXUtility::itos(atomId) + " (" + NXUtility::itos(atomicNum)
	       + ") (" + NXUtility::itos(x) + ',' + NXUtility::itos(y) + ',' +
	       NXUtility::itos(z) + ") " + atomStyle);
}


/* FUNCTION: newAtomInfo*/
void NanorexMMPImportExport::newAtomInfo(string const& key,
                                         string const& value)
{
	if(insideViewDataGroup)
		return;
	
	if(atomPtr != NULL) {
		if(key == "atomtype") { // hybridization info
			if(value == "sp") atomPtr->SetHyb(1);
			else if(value == "sp2") atomPtr->SetHyb(2);
			else if(value == "sp2_g") atomPtr->SetHyb(2);
			else if(value == "sp3") atomPtr->SetHyb(3);
			else if(value == "sp3d") atomPtr->SetHyb(3);
            // else ignore
		}
	}
	
	CDEBUG("info atom '" + key + "' = '" + value + "'");
}


/* FUNCTION: newBond */
void NanorexMMPImportExport::newBond(string const& bondType, int targetAtomId)
{
	if(insideViewDataGroup)
		return;
	
	assert(molPtr != NULL && atomPtr != NULL);
	
	map<int,OBAtom*>::iterator targetAtomExistsQuery =
		foundAtomList.find(targetAtomId);
	
	if(targetAtomExistsQuery == foundAtomList.end()) {
		CSEVERE("**ERROR** attempting to bond to non-existent atomID "
		        + NXUtility::itos(targetAtomId));
	}
	else {
		OBAtom *const targetAtomPtr = targetAtomExistsQuery->second;
		// guard against duplicates
		// also a hack to protect against Ragel's duplicate parsing
		// when encountering a blank line
		if(molPtr->GetBond(atomPtr, targetAtomPtr) == NULL) {
			// bond was not previously encountered, include
			int atomId = ((NXAtomData*)(atomPtr->GetData(NXAtomDataType)))->getIdx();
			CDEBUG("bonding atom #" + NXUtility::itos(atomId) +
			       " to atom #" + NXUtility::itos(targetAtomId));
			bondPtr = molPtr->NewBond();
			bondOrder = GetBondOrderFromType(bondType);
			bondPtr->SetBondOrder(bondOrder);
			atomPtr->AddBond(bondPtr);
			targetAtomPtr->AddBond(bondPtr);
			bondPtr->SetBegin(atomPtr);
			bondPtr->SetEnd(targetAtomPtr);
			CDEBUG("bond" + bondType + " " + NXUtility::itos(targetAtomId));
		}
		else {
			CSEVERE("bond to atom #" + NXUtility::itos(targetAtomId) +
			        " already exists");
		}
	}
	
}


/* FUNCTION: GetBondOrderFromType */
int NanorexMMPImportExport::GetBondOrderFromType(string const& type)
{
	if(type == "1")
		return 1;
	else if(type == "2")
		return 2;
	else if(type == "3")
		return 3;
	else if(type == "a")
		return 4;
	else if(type == "c")
		return 5;
	else if (type == "g")
		return 6;
	else {
		return -1;
	}
}


/* FUNCTION: newBondDirection */
void NanorexMMPImportExport::newBondDirection(int atomId1, int atomId2)
{
	/// @todo Implement post-FNANO08
	// no-op for FNANO08
}


/* FUNCTION: newMolecule */
void
NanorexMMPImportExport::newMolecule(string const& name, string const& style)
{
	if(insideViewDataGroup)
		return;
	
	atomPtr = NULL;
	bondPtr = NULL;
	molPtr = molSetPtr->newMolecule();
	molPtr->SetTitle(name.c_str());
	if(style == "")
		molStyle = "def";
	else
		molStyle = style;
	CDEBUG("mol (" + name + ") " + style);
}


/* FUNCTION: newViewDataGroup */
void NanorexMMPImportExport::newViewDataGroup(void)
{
	insideViewDataGroup = true;
	CDEBUG("[special] group (View Data)");
}


void
NanorexMMPImportExport::
newNamedView(std::string const& name,
             double const& qw, double const& qx, double const& qy,
             double const& qz, double const& scale,
             double const& povX, double const& povY,
             double const& povZ, double const& zoomFactor)
{
	// No need to convert to Angstroms - already NV1's internal units
	double const TO_ANG = 1.0 /*1.0e-10*/;
	if(insideViewDataGroup) {
		NXNamedView view(name,
		                 NXQuaternion<double>(qw, qx*TO_ANG,
		                                      qy*TO_ANG, qz*TO_ANG),
		                 scale*TO_ANG,
		                 NXVector3d(povX*TO_ANG, povY*TO_ANG, povZ*TO_ANG),
		                 zoomFactor);
		if(name == "HomeView")
			dataStoreInfo->setHomeView(view);
		else if(name == "LastView")
			dataStoreInfo->setLastView(view);
		else
			dataStoreInfo->addOtherView(view);
	}
	
	CDEBUG("csys (" + name + ") " +
	       '(' + NXUtility::dtos(qw) + ',' + NXUtility::dtos(qx) + ',' +
	       NXUtility::dtos(qz) + ',' + NXUtility::dtos(qz) + ") " +
	       '(' + NXUtility::dtos(scale) + ") " +
	       '(' + NXUtility::dtos(povX) + ',' + NXUtility::dtos(povY) + ',' +
	       NXUtility::dtos(povZ) + ") " +
	       '(' + NXUtility::dtos(zoomFactor) + ')');
}


/* FUNCTION: newMolStructGroup */
void NanorexMMPImportExport::newMolStructGroup(string const& name,
                                               string const& classification)
{
// 	if(insideClipboardGroup && molSetPtr == NULL) {
// 		// no active top-level group
// 		molSetPtr = new NXMoleculeSet;
// 		molSetPtr->setTitle(name);
// 		// dataStoreInfo->addClipboardStructure(molSetPtr);
// 	}
	
	// if in "View Data" group, ignore
	
	// if(molSetPtr != NULL) {
	/*else*/ if(!insideViewDataGroup) {
		// if in principal molecule-set group or active clipboard group
		
		if(molSetPtr == NULL) {
			// must be inside principal structure group
			assert(!insideClipboardGroup);
			molSetPtr = rootMoleculeSetPtr;
		}
// 		else if(!insideClipboardGroup && molSetPtr == NULL) {
// 			// entering principal structure group
// 			// all changes should go to supplied pointer
// 			molSetPtr = rootMoleculeSetPtr;
// 		}
		else {
			// If not at top-level inside principal structure group or
			// clipboard group, allocate new structure
			NXMoleculeSet *newMolSetPtr = new NXMoleculeSet;
			molSetPtr->addChild(newMolSetPtr);
			molSetPtrStack.push_back(molSetPtr);
			molSetPtr = newMolSetPtr;
		}
		molSetPtr->setTitle(name);
		molSetPtr->setGroupClassificationString(classification);
	}
	
	// ++molStructGroupLevel;
	
	CDEBUG("group (" + name + ") " + classification);
}


/* FUNCTION: newClipboardGroup */
void NanorexMMPImportExport::newClipboardGroup(void)
{
	assert(molSetPtr == NULL);
	assert(molSetPtrStack.size() == 0);
	
	if(!insideClipboardGroup && clipboardGroup == (NXMoleculeSet*) NULL) {
		clipboardGroup = new NXMoleculeSet;
		clipboardGroup->setTitle("Clipboard");
		molSetPtr = clipboardGroup;
		insideClipboardGroup = true;
		dataStoreInfo->setClipboardStructure(clipboardGroup);
		CDEBUG("[special] group (Clipboard)");
	}
	else {
		CSEVERE("Redefinition of 'Clipboard' group");
	}
}


/* FUNCTION: endGroup */
void NanorexMMPImportExport::endGroup(string const& name)
{
	// Must ensure that molSetPtr = NULL between top-level structure groups
	// Top-level structure groups are defined as the principal structure group
	// that occurs between the "View Data" and the "Clipboard" groups in the MMP
	// file, and those from various top-level 'group' statements in the
	// "Clipboard" group
	
	string groupName;
	if(insideViewDataGroup)
		groupName = "View Data";
	else if(insideClipboardGroup)
		groupName = (molSetPtr == NULL) ? "Clipboard" : molSetPtr->getTitle();
	else
		groupName = molSetPtr->getTitle();
	
	
	if(name != groupName) {
		NXLOG_WARNING("NanorexMMPImportExport",
		              "egroup (" + name + ") attempting to close "
		              "group (" + groupName + ')');
	}
	
	
	if(insideViewDataGroup) {
		insideViewDataGroup = false;
		molSetPtr = NULL;
	}
	else {
		// non top-level structure groups in clipboard or in the
		// principal structure group
		if(molSetPtrStack.size() == 0)  {
			molSetPtr = NULL;
			if(insideClipboardGroup)
				insideClipboardGroup = false;
		}
		else {
			molSetPtr = molSetPtrStack.back();
			molSetPtrStack.pop_back();
		}
	}
	
	CDEBUG("egroup (" + groupName + ')');
}


/* FUNCTION: newOpenGroupInfo */
void NanorexMMPImportExport::newOpenGroupInfo(std::string const& key,
                                              std::string const& value)
{
	/// @todo
	CDEBUG("info opengroup " + key + " = " + value);
}


/* FUNCTION: newChunkInfo */
void
NanorexMMPImportExport::newChunkInfo(std::string const& key,
                                     std::string const& value)
{
	CDEBUG("info chunk " + key + " = " + value);
	
	if(insideViewDataGroup)
		return;
	
	/// @todo
}


/* FUNCTION: end1 */
void NanorexMMPImportExport::end1(void)
{
	/// @todo
	CDEBUG("end1");
}


/* FUNCTION: exportToFile */
NXCommandResult*
NanorexMMPImportExport::
exportToFile(NXMoleculeSet *molSetPtr,
             NXDataStoreInfo */*dataStoreInfo*/,
             const std::string& theFilename,
             int /*frameSetId*/, int /*frameIndex*/)
{
	NXCommandResult *result = new NXCommandResult();
	result->setResult(NX_CMD_SUCCESS);
	
	ofstream mmpfile(theFilename.c_str(), ios::out);
	if(!mmpfile) {
		populateCommandResult(result,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
	}
	else {
		PrintMoleculeSet(mmpfile, molSetPtr);
		mmpfile.close();
	}
	return result;
}


/* FUNCTION: GetAtomID */
/* static */
int NanorexMMPImportExport::GetAtomID(OBAtom *atomPtr)
{
	NXAtomData *atomIDData = 
		dynamic_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	int atomID = atomIDData->getIdx();
	return atomID;
}


/* FUNCTION: GetAtomRenderStyleCode */
/* static */
string const&
NanorexMMPImportExport::GetAtomRenderStyleCode(OBAtom *const atomPtr)
{
	NXAtomData *atomDataPtr =
		dynamic_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	string const& atomStyle = atomDataPtr->getRenderStyleCode();
	return atomStyle;
}


/* FUNCTION: PrintMolecule */
/* static */
void NanorexMMPImportExport::PrintMolecule(ostream& o,
OBMol *const molPtr)
{
	set<int> prevAtomIdx;
	set<int> prevBondIdx; /// @todo - replace with simple bond count
	
	o << "mol (" << molPtr->GetTitle() << ')' << endl;
	
	OBAtomIterator atomIter;
	OBAtom *atomPtr = NULL;
    // For each atom ...
	for(atomPtr = molPtr->BeginAtom(atomIter);
	    atomPtr != NULL;
	    atomPtr = molPtr->NextAtom(atomIter))
	{
        // ... write the 'atom' line ...
		int atomID = GetAtomID(atomPtr);
		o << "atom " << atomID << " (" << atomPtr->GetAtomicNum() << ") " << '('
			<< atomPtr->x() << ',' << atomPtr->y() << ',' << atomPtr->z()
			<< ") " << GetAtomRenderStyleCode(atomPtr) << endl;
		
		if(atomPtr->GetHyb() != 0) {
			o << "info atom atomtype = "
				<< _s_hybridizationName[atomPtr->GetHyb()];
		}
		
        // ... write the 'bond' lines for this atom ...
        // ... first sort bonds by type ...
		OBBondIterator bondIter;
		OBBond *bondPtr = NULL;
		vector<int> bondCategories[6];
		for(bondPtr = atomPtr->BeginBond(bondIter);
		    bondPtr != NULL;
		    bondPtr = atomPtr->NextBond(bondIter))
		{
            // write bond statement only if target atom was previously written
			OBAtom *nbrAtomPtr = bondPtr->GetNbrAtom(atomPtr);
			int nbrAtomID = GetAtomID(nbrAtomPtr);
			if(prevAtomIdx.find(nbrAtomID) != prevAtomIdx.end()) {
				int bondOrder = bondPtr->GetBondOrder();
				bondCategories[bondOrder-1].push_back(nbrAtomID);
                // record bond for sanity check at end
				prevBondIdx.insert(bondPtr->GetIdx());
			}
		}
		
        // ... write the bonds, one line per type ...
		for(int i=0; i<6; ++i) {
			int J = bondCategories[i].size();
			if(J > 0) {
				o << "bond" << _s_bondOrderString[i];
				for(int j=0; j<J; ++j)
					o << ' ' << bondCategories[i][j];
				o  << endl;
			}
		}
		
        // record atom as 'previously written'
		prevAtomIdx.insert(atomID);
	}
	
    // debug diagnostics
	ostringstream debugMsg;
	debugMsg << "# atoms check ";
	if(molPtr->NumAtoms() == prevAtomIdx.size())
		debugMsg << "PASS ("  << molPtr->NumAtoms() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumAtoms() << " != " << prevAtomIdx.size()<< endl;
	
	debugMsg << "# bonds check ";
	if(molPtr->NumBonds() == prevBondIdx.size())
		debugMsg << "PASS (" << molPtr->NumBonds() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumBonds() << " != " << prevBondIdx.size()<< endl;
	
	debugMsg.flush();
	NXLOG_DEBUG("NanorexMMPImportExport::PrintMoleculeSet",
	            debugMsg.str().c_str());
}


/* FUNCTION: PrintMoleculeSet */
/* static */
void NanorexMMPImportExport::PrintMoleculeSet(ostream& o,
                                              NXMoleculeSet *const molSetPtr)
{
	// Iterate over all child molecules
	OBMolIterator molIter;
	for(molIter = molSetPtr->moleculesBegin();
	    molIter != molSetPtr->moleculesEnd();
	    ++molIter)
	{
		PrintMolecule(o, *molIter);
	}
	
    // Iterate over all child molecule sets
	NXMoleculeSetIterator molSetIter;
	for(molSetIter = molSetPtr->childrenBegin();
	    molSetIter != molSetPtr->childrenEnd();
	    ++molSetIter)
	{
		PrintMoleculeSet(o, *molSetIter);
	}
}


/* FUNCTION: populateCommandResult */
void
NanorexMMPImportExport::populateCommandResult (NXCommandResult* result,
                                               const string& message)
{
	result->setResult(NX_PLUGIN_REPORTS_ERROR);
	vector<QString> resultVector;
	resultVector.push_back("OpenBabelImportExport");
	resultVector.push_back(message.c_str());
	result->setParamVector(resultVector);
}

Q_EXPORT_PLUGIN2 (NanorexMMPImportExport, NanorexMMPImportExport)

