#line 1 "NanorexMMPImportExport.rl"
// *********************** GENERATED BY RAGEL 6.0 *******************
// ** Do not edit directly. Edit NanorexMMPImportExport.rl instead **
// ******************************************************************

// Copyright 2008 Nanorex, Inc.  See LICENSE file for details.

#include "NanorexMMPImportExport.h"
#include <Nanorex/Interface/NXAtomData.h>
#include <Nanorex/Utility/NXUtility.h>
#include <QFileInfo>

#define VERBOSE

#if defined(VERBOSE)

#if 0
#define CDEBUG(s) DEBUG_MSG(inputFilename, lineNum, s)
inline void DEBUG_MSG(string const& filename, int line, string const& s)
{
	NXLOG_DEBUG(filename, NXUtility::itos(line)+": "+s);
/*    Nanorex::NXLogger* logger = Nanorex::NXLogger::Instance();
    if (logger != 0)
        logger->log(Nanorex::NXLogLevel_Info, filename, msg.str());*/
}
#endif

#define CERR(s) { cerr << inputFilename << ": " << NXUtility::itos(lineNum) \
<< ": " << s << endl; }
// #define CDEBUG(s) NXLOG_DEBUG(inputFilename, NXUtility::itos(lineNum)+": "+s)
#define CDEBUG(s) { cerr << inputFilename << ": " << NXUtility::itos(lineNum) \
<< ": " << s << endl; }
#define CLOG(s) NXLOG_INFO(inputFilename, NXUtility::itos(lineNum)+": "+s)

#else
#define CDEBUG(s)
#define CLOG(s)
#endif

#define CSEVERE(s) NXLOG_SEVERE(inputFilename, NXUtility::itos(lineNum)+": "+s)



#line 102 "NanorexMMPImportExport.rl"


#line 106 "NanorexMMPImportExport.rl"

// static data from Ragel


#line 53 "NanorexMMPImportExport.cpp"
static const char _mmp_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	17, 1, 18, 1, 21, 1, 22, 1, 
	26, 1, 28, 1, 31, 1, 33, 1, 
	34, 1, 38, 1, 42, 1, 44, 1, 
	58, 1, 59, 2, 0, 30, 2, 0, 
	54, 2, 0, 56, 2, 0, 57, 2, 
	5, 12, 2, 5, 13, 2, 5, 14, 
	2, 6, 7, 2, 6, 8, 2, 6, 
	9, 2, 8, 15, 2, 36, 24, 2, 
	38, 0, 2, 42, 43, 3, 0, 16, 
	52, 3, 0, 19, 55, 3, 0, 20, 
	53, 3, 0, 23, 50, 3, 0, 25, 
	51, 3, 0, 27, 39, 3, 0, 29, 
	40, 3, 0, 29, 47, 3, 0, 32, 
	41, 3, 0, 35, 49, 3, 0, 37, 
	48, 3, 6, 8, 15, 3, 17, 0, 
	54, 3, 45, 0, 46, 4, 9, 0, 
	20, 53, 4, 9, 0, 23, 50, 4, 
	9, 0, 25, 51, 4, 9, 0, 29, 
	40, 4, 9, 0, 29, 47, 4, 9, 
	0, 37, 48, 4, 34, 0, 35, 49, 
	5, 6, 9, 0, 20, 53, 5, 6, 
	9, 0, 23, 50, 5, 6, 9, 0, 
	25, 51, 5, 6, 9, 0, 29, 40, 
	5, 6, 9, 0, 29, 47, 5, 6, 
	9, 0, 37, 48, 5, 8, 15, 0, 
	16, 52, 6, 6, 8, 15, 0, 16, 
	52
};

static const short _mmp_parser_key_offsets[] = {
	0, 0, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 17, 23, 25, 27, 29, 
	31, 33, 37, 42, 43, 44, 45, 46, 
	47, 48, 49, 55, 61, 62, 63, 64, 
	65, 70, 75, 80, 81, 82, 83, 87, 
	92, 93, 94, 95, 100, 102, 107, 108, 
	109, 110, 111, 116, 121, 132, 146, 160, 
	165, 177, 182, 183, 184, 185, 190, 195, 
	196, 197, 198, 199, 204, 209, 210, 211, 
	212, 213, 214, 215, 216, 217, 222, 227, 
	232, 233, 234, 238, 240, 242, 244, 258, 
	272, 285, 299, 312, 326, 328, 329, 330, 
	331, 332, 333, 337, 343, 350, 355, 360, 
	362, 369, 371, 375, 381, 383, 385, 387, 
	389, 391, 395, 400, 401, 402, 403, 404, 
	405, 406, 407, 408, 413, 415, 426, 429, 
	432, 435, 440, 447, 454, 460, 467, 475, 
	481, 486, 492, 501, 505, 513, 519, 528, 
	532, 540, 546, 555, 559, 567, 573, 579, 
	592, 594, 609, 624, 638, 653, 661, 665, 
	673, 681, 689, 693, 701, 709, 717, 721, 
	729, 737, 745, 752, 755, 758, 761, 769, 
	774, 781, 789, 797, 799, 807, 810, 813, 
	816, 819, 822, 825, 828, 831, 834, 839, 
	846, 853, 860, 868, 874, 876, 884, 891, 
	894, 897, 900, 903, 906, 913, 920, 922, 
	935, 947, 962, 977, 983, 997, 1012, 1015, 
	1018, 1021, 1024, 1030, 1036, 1048, 1063, 1078, 
	1084, 1097, 1099, 1114, 1129, 1143, 1158, 1172, 
	1187, 1190, 1193, 1196, 1201, 1209, 1212, 1215, 
	1218, 1223, 1235, 1250, 1265, 1279, 1294, 1306, 
	1321, 1336, 1338, 1352, 1367, 1370, 1373, 1376, 
	1379, 1384, 1396, 1411, 1426, 1440, 1455, 1467, 
	1482, 1497, 1499, 1513, 1528, 1531, 1534, 1537, 
	1540, 1543, 1546, 1549, 1552, 1557, 1569, 1584, 
	1599, 1613, 1628, 1640, 1655, 1670, 1672, 1686, 
	1701, 1704, 1707, 1712, 1718, 1730, 1745, 1760, 
	1766, 1779, 1781, 1796, 1811, 1825, 1840, 1854, 
	1869, 1871, 1871, 1883
};

static const char _mmp_parser_trans_keys[] = {
	10, 32, 109, 9, 13, 109, 112, 102, 
	111, 114, 109, 97, 116, 9, 32, 11, 
	13, 9, 32, 11, 13, 48, 57, 48, 
	57, 48, 57, 48, 57, 48, 57, 48, 
	57, 9, 32, 11, 13, 9, 32, 114, 
	11, 13, 101, 113, 117, 105, 114, 101, 
	100, 10, 32, 35, 59, 9, 13, 10, 
	32, 103, 107, 9, 13, 114, 111, 117, 
	112, 9, 32, 40, 11, 13, 9, 32, 
	40, 11, 13, 9, 32, 86, 11, 13, 
	105, 101, 119, 9, 32, 11, 13, 9, 
	32, 68, 11, 13, 97, 116, 97, 9, 
	32, 41, 11, 13, 10, 35, 10, 32, 
	103, 9, 13, 114, 111, 117, 112, 9, 
	32, 40, 11, 13, 9, 32, 40, 11, 
	13, 9, 32, 95, 11, 13, 48, 57, 
	65, 90, 97, 122, 9, 32, 41, 95, 
	11, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, 9, 32, 41, 95, 11, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 9, 13, 10, 32, 35, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 101, 9, 13, 110, 100, 
	49, 10, 32, 35, 9, 13, 10, 32, 
	103, 9, 13, 114, 111, 117, 112, 9, 
	32, 40, 11, 13, 9, 32, 67, 11, 
	13, 108, 105, 112, 98, 111, 97, 114, 
	100, 9, 32, 41, 11, 13, 10, 32, 
	35, 9, 13, 10, 32, 101, 9, 13, 
	110, 100, 9, 32, 11, 13, -1, 10, 
	-1, 10, -1, 10, 10, 32, 35, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	9, 32, 95, 11, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, 9, 32, 95, 11, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	9, 32, 41, 95, 11, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	101, 108, 118, 105, 110, 9, 32, 11, 
	13, 9, 32, 11, 13, 48, 57, 10, 
	32, 35, 9, 13, 48, 57, 10, 32, 
	35, 9, 13, 10, 32, 103, 9, 13, 
	-1, 10, 10, 32, 35, 9, 13, 48, 
	57, -1, 10, 9, 32, 11, 13, 9, 
	32, 11, 13, 48, 57, 48, 57, 48, 
	57, 48, 57, 48, 57, 48, 57, 9, 
	32, 11, 13, 9, 32, 112, 11, 13, 
	114, 101, 102, 101, 114, 114, 101, 100, 
	10, 32, 35, 9, 13, -1, 10, -1, 
	10, 32, 97, 98, 101, 103, 105, 109, 
	9, 13, -1, 10, 116, -1, 10, 111, 
	-1, 10, 109, -1, 10, 32, 9, 13, 
	-1, 10, 32, 9, 13, 48, 57, -1, 
	10, 32, 9, 13, 48, 57, -1, 10, 
	32, 40, 9, 13, -1, 10, 32, 9, 
	13, 48, 57, -1, 10, 32, 41, 9, 
	13, 48, 57, -1, 10, 32, 41, 9, 
	13, -1, 10, 32, 9, 13, -1, 10, 
	32, 40, 9, 13, -1, 10, 32, 43, 
	45, 9, 13, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, -1, 
	10, 32, 43, 45, 9, 13, 48, 57, 
	-1, 10, 48, 57, -1, 10, 32, 44, 
	9, 13, 48, 57, -1, 10, 32, 44, 
	9, 13, -1, 10, 32, 43, 45, 9, 
	13, 48, 57, -1, 10, 48, 57, -1, 
	10, 32, 41, 9, 13, 48, 57, -1, 
	10, 32, 41, 9, 13, -1, 10, 32, 
	35, 9, 13, -1, 10, 32, 35, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, -1, 10, 32, 35, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 35, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	41, 9, 13, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 41, 9, 13, 48, 
	57, -1, 10, 32, 41, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 41, 9, 13, 48, 
	57, -1, 10, 32, 9, 13, 48, 57, 
	-1, 10, 111, -1, 10, 110, -1, 10, 
	100, -1, 10, 95, 97, 99, 103, 49, 
	51, -1, 10, 32, 9, 13, -1, 10, 
	32, 9, 13, 48, 57, -1, 10, 32, 
	35, 9, 13, 48, 57, -1, 10, 32, 
	35, 9, 13, 48, 57, -1, 10, -1, 
	10, 32, 35, 9, 13, 48, 57, -1, 
	10, 100, -1, 10, 105, -1, 10, 114, 
	-1, 10, 101, -1, 10, 99, -1, 10, 
	116, -1, 10, 105, -1, 10, 111, -1, 
	10, 110, -1, 10, 32, 9, 13, -1, 
	10, 32, 9, 13, 48, 57, -1, 10, 
	32, 9, 13, 48, 57, -1, 10, 32, 
	9, 13, 48, 57, -1, 10, 32, 35, 
	9, 13, 48, 57, -1, 10, 32, 35, 
	9, 13, -1, 10, -1, 10, 32, 35, 
	9, 13, 48, 57, -1, 10, 32, 9, 
	13, 48, 57, -1, 10, 103, -1, 10, 
	114, -1, 10, 111, -1, 10, 117, -1, 
	10, 112, -1, 10, 32, 35, 40, 9, 
	13, -1, 10, 32, 35, 40, 9, 13, 
	-1, 10, -1, 10, 32, 41, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 41, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 41, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 9, 13, -1, 
	10, 32, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	41, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 114, -1, 
	10, 111, -1, 10, 117, -1, 10, 112, 
	-1, 10, 32, 40, 9, 13, -1, 10, 
	32, 40, 9, 13, -1, 10, 32, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 41, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 41, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 35, 9, 13, -1, 10, 32, 35, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, -1, 10, -1, 10, 32, 35, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 35, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 35, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 41, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 110, -1, 10, 
	102, -1, 10, 111, -1, 10, 32, 9, 
	13, -1, 10, 32, 97, 99, 111, 9, 
	13, -1, 10, 116, -1, 10, 111, -1, 
	10, 109, -1, 10, 32, 9, 13, -1, 
	10, 32, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 61, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 61, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 61, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 35, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, -1, 10, 32, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 35, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 104, -1, 10, 117, -1, 10, 110, 
	-1, 10, 107, -1, 10, 32, 9, 13, 
	-1, 10, 32, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 61, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 61, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 61, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 35, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 35, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, -1, 10, 32, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 112, -1, 10, 101, -1, 10, 
	110, -1, 10, 103, -1, 10, 114, -1, 
	10, 111, -1, 10, 117, -1, 10, 112, 
	-1, 10, 32, 9, 13, -1, 10, 32, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 61, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 61, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	61, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 35, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 35, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	-1, 10, 32, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 35, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 111, 
	-1, 10, 108, -1, 10, 32, 9, 13, 
	-1, 10, 32, 40, 9, 13, -1, 10, 
	32, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 41, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 41, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 35, 9, 13, -1, 10, 
	32, 35, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, -1, 10, 32, 
	35, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 35, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 41, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, -1, 
	10, 32, 35, 97, 98, 101, 103, 105, 
	109, 9, 13, -1, 10, 32, 97, 98, 
	101, 103, 105, 109, 9, 13, 0
};

static const char _mmp_parser_single_lengths[] = {
	0, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 0, 0, 0, 0, 
	0, 2, 3, 1, 1, 1, 1, 1, 
	1, 1, 4, 4, 1, 1, 1, 1, 
	3, 3, 3, 1, 1, 1, 2, 3, 
	1, 1, 1, 3, 2, 3, 1, 1, 
	1, 1, 3, 3, 3, 4, 4, 3, 
	4, 3, 1, 1, 1, 3, 3, 1, 
	1, 1, 1, 3, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 3, 3, 
	1, 1, 2, 2, 2, 2, 4, 4, 
	3, 4, 3, 4, 2, 1, 1, 1, 
	1, 1, 2, 2, 3, 3, 3, 2, 
	3, 2, 2, 2, 0, 0, 0, 0, 
	0, 2, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 2, 9, 3, 3, 
	3, 3, 3, 3, 4, 3, 4, 4, 
	3, 4, 5, 2, 4, 4, 5, 2, 
	4, 4, 5, 2, 4, 4, 4, 5, 
	2, 5, 5, 4, 5, 4, 2, 4, 
	4, 4, 2, 4, 4, 4, 2, 4, 
	4, 4, 3, 3, 3, 3, 6, 3, 
	3, 4, 4, 2, 4, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 4, 2, 4, 3, 3, 
	3, 3, 3, 3, 5, 5, 2, 5, 
	4, 5, 5, 4, 4, 5, 3, 3, 
	3, 3, 4, 4, 4, 5, 5, 4, 
	5, 2, 5, 5, 4, 5, 4, 5, 
	3, 3, 3, 3, 6, 3, 3, 3, 
	3, 4, 5, 5, 4, 5, 4, 5, 
	5, 2, 4, 5, 3, 3, 3, 3, 
	3, 4, 5, 5, 4, 5, 4, 5, 
	5, 2, 4, 5, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 4, 5, 5, 
	4, 5, 4, 5, 5, 2, 4, 5, 
	3, 3, 3, 4, 4, 5, 5, 4, 
	5, 2, 5, 5, 4, 5, 4, 5, 
	2, 0, 10, 9
};

static const char _mmp_parser_range_lengths[] = {
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 1, 1, 
	0, 0, 0, 1, 0, 1, 0, 0, 
	0, 0, 1, 1, 4, 5, 5, 1, 
	4, 1, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 1, 0, 0, 0, 5, 5, 
	5, 5, 5, 5, 0, 0, 0, 0, 
	0, 0, 1, 2, 2, 1, 1, 0, 
	2, 0, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 0, 
	0, 1, 2, 2, 1, 2, 2, 1, 
	1, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 1, 4, 
	0, 5, 5, 5, 5, 2, 1, 2, 
	2, 2, 1, 2, 2, 2, 1, 2, 
	2, 2, 2, 0, 0, 0, 1, 1, 
	2, 2, 2, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	2, 2, 2, 1, 0, 2, 2, 0, 
	0, 0, 0, 0, 1, 1, 0, 4, 
	4, 5, 5, 1, 5, 5, 0, 0, 
	0, 0, 1, 1, 4, 5, 5, 1, 
	4, 0, 5, 5, 5, 5, 5, 5, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	1, 4, 5, 5, 5, 5, 4, 5, 
	5, 0, 5, 5, 0, 0, 0, 0, 
	1, 4, 5, 5, 5, 5, 4, 5, 
	5, 0, 5, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 4, 5, 5, 
	5, 5, 4, 5, 5, 0, 5, 5, 
	0, 0, 1, 1, 4, 5, 5, 1, 
	4, 0, 5, 5, 5, 5, 5, 5, 
	0, 0, 1, 1
};

static const short _mmp_parser_index_offsets[] = {
	0, 0, 5, 7, 9, 11, 13, 15, 
	17, 19, 21, 25, 30, 32, 34, 36, 
	38, 40, 44, 49, 51, 53, 55, 57, 
	59, 61, 63, 69, 75, 77, 79, 81, 
	83, 88, 93, 98, 100, 102, 104, 108, 
	113, 115, 117, 119, 124, 127, 132, 134, 
	136, 138, 140, 145, 150, 158, 168, 178, 
	183, 192, 197, 199, 201, 203, 208, 213, 
	215, 217, 219, 221, 226, 231, 233, 235, 
	237, 239, 241, 243, 245, 247, 252, 257, 
	262, 264, 266, 270, 273, 276, 279, 289, 
	299, 308, 318, 327, 337, 340, 342, 344, 
	346, 348, 350, 354, 359, 365, 370, 375, 
	378, 384, 387, 391, 396, 398, 400, 402, 
	404, 406, 410, 415, 417, 419, 421, 423, 
	425, 427, 429, 431, 436, 439, 450, 454, 
	458, 462, 467, 473, 479, 485, 491, 498, 
	504, 509, 515, 523, 527, 534, 540, 548, 
	552, 559, 565, 573, 577, 584, 590, 596, 
	606, 609, 620, 631, 641, 652, 659, 663, 
	670, 677, 684, 688, 695, 702, 709, 713, 
	720, 727, 734, 740, 744, 748, 752, 760, 
	765, 771, 778, 785, 788, 795, 799, 803, 
	807, 811, 815, 819, 823, 827, 831, 836, 
	842, 848, 854, 861, 867, 870, 877, 883, 
	887, 891, 895, 899, 903, 910, 917, 920, 
	930, 939, 950, 961, 967, 977, 988, 992, 
	996, 1000, 1004, 1010, 1016, 1025, 1036, 1047, 
	1053, 1063, 1066, 1077, 1088, 1098, 1109, 1119, 
	1130, 1134, 1138, 1142, 1147, 1155, 1159, 1163, 
	1167, 1172, 1181, 1192, 1203, 1213, 1224, 1233, 
	1244, 1255, 1258, 1268, 1279, 1283, 1287, 1291, 
	1295, 1300, 1309, 1320, 1331, 1341, 1352, 1361, 
	1372, 1383, 1386, 1396, 1407, 1411, 1415, 1419, 
	1423, 1427, 1431, 1435, 1439, 1444, 1453, 1464, 
	1475, 1485, 1496, 1505, 1516, 1527, 1530, 1540, 
	1551, 1555, 1559, 1564, 1570, 1579, 1590, 1601, 
	1607, 1617, 1620, 1631, 1642, 1652, 1663, 1673, 
	1684, 1687, 1688, 1700
};

static const short _mmp_parser_indicies[] = {
	2, 0, 3, 0, 1, 4, 1, 5, 
	1, 6, 1, 7, 1, 8, 1, 9, 
	1, 10, 1, 11, 1, 12, 12, 12, 
	1, 12, 12, 12, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 19, 19, 1, 19, 19, 20, 19, 
	1, 21, 1, 22, 1, 23, 1, 24, 
	1, 25, 1, 26, 1, 27, 1, 28, 
	27, 29, 30, 27, 1, 28, 31, 32, 
	33, 31, 1, 34, 1, 35, 1, 36, 
	1, 37, 1, 38, 38, 39, 38, 1, 
	40, 40, 41, 40, 1, 41, 41, 42, 
	41, 1, 43, 1, 44, 1, 45, 1, 
	46, 46, 46, 1, 46, 46, 47, 46, 
	1, 48, 1, 49, 1, 50, 1, 50, 
	50, 51, 50, 1, 52, 53, 1, 55, 
	54, 56, 54, 1, 57, 1, 58, 1, 
	59, 1, 60, 1, 61, 61, 62, 61, 
	1, 63, 63, 64, 63, 1, 64, 64, 
	65, 64, 65, 65, 65, 1, 66, 66, 
	67, 69, 66, 68, 69, 69, 69, 1, 
	70, 70, 71, 73, 70, 72, 73, 73, 
	73, 1, 75, 74, 76, 74, 1, 75, 
	74, 76, 77, 74, 77, 77, 77, 1, 
	79, 78, 80, 78, 1, 81, 1, 82, 
	1, 83, 1, 84, 83, 85, 83, 1, 
	87, 86, 88, 86, 1, 89, 1, 90, 
	1, 91, 1, 92, 1, 92, 92, 93, 
	92, 1, 93, 93, 94, 93, 1, 95, 
	1, 96, 1, 97, 1, 98, 1, 99, 
	1, 100, 1, 101, 1, 102, 1, 102, 
	102, 103, 102, 1, 104, 103, 105, 103, 
	1, 107, 106, 108, 106, 1, 109, 1, 
	110, 1, 111, 111, 111, 1, 1, 104, 
	105, 1, 84, 85, 1, 75, 76, 113, 
	112, 114, 116, 112, 115, 116, 116, 116, 
	1, 75, 117, 76, 119, 117, 118, 119, 
	119, 119, 1, 118, 118, 119, 118, 118, 
	119, 119, 119, 1, 121, 120, 122, 119, 
	120, 118, 119, 119, 119, 1, 72, 72, 
	73, 72, 72, 73, 73, 73, 1, 123, 
	123, 124, 73, 123, 72, 73, 73, 73, 
	1, 1, 52, 53, 125, 1, 126, 1, 
	127, 1, 128, 1, 129, 1, 130, 130, 
	130, 1, 130, 130, 130, 131, 1, 133, 
	132, 134, 132, 135, 1, 137, 136, 138, 
	136, 1, 137, 139, 32, 139, 1, 1, 
	137, 138, 133, 132, 134, 132, 135, 1, 
	1, 28, 29, 140, 140, 140, 1, 140, 
	140, 140, 141, 1, 142, 1, 143, 1, 
	144, 1, 145, 1, 146, 1, 147, 147, 
	147, 1, 147, 147, 148, 147, 1, 149, 
	1, 150, 1, 151, 1, 152, 1, 153, 
	1, 154, 1, 155, 1, 156, 1, 28, 
	156, 29, 156, 1, 157, 159, 158, 157, 
	161, 160, 162, 163, 164, 165, 166, 167, 
	160, 158, 157, 159, 168, 158, 157, 159, 
	169, 158, 157, 159, 170, 158, 157, 159, 
	171, 171, 158, 157, 159, 171, 171, 172, 
	158, 157, 159, 173, 173, 174, 158, 157, 
	159, 175, 176, 175, 158, 157, 159, 176, 
	176, 177, 158, 157, 159, 178, 179, 178, 
	180, 158, 157, 159, 178, 179, 178, 158, 
	157, 159, 181, 181, 158, 157, 159, 182, 
	183, 182, 158, 157, 159, 183, 184, 185, 
	183, 186, 158, 157, 159, 186, 158, 157, 
	159, 187, 188, 187, 189, 158, 157, 159, 
	187, 188, 187, 158, 157, 159, 190, 191, 
	192, 190, 193, 158, 157, 159, 193, 158, 
	157, 159, 194, 195, 194, 196, 158, 157, 
	159, 194, 195, 194, 158, 157, 159, 197, 
	198, 199, 197, 200, 158, 157, 159, 200, 
	158, 157, 159, 201, 202, 201, 203, 158, 
	157, 159, 201, 202, 201, 158, 157, 205, 
	204, 206, 204, 158, 157, 205, 204, 206, 
	207, 204, 207, 207, 207, 158, 157, 205, 
	206, 157, 209, 208, 210, 212, 208, 211, 
	212, 212, 212, 158, 157, 205, 213, 206, 
	215, 213, 214, 215, 215, 215, 158, 157, 
	159, 214, 215, 214, 214, 215, 215, 215, 
	158, 157, 217, 216, 218, 215, 216, 214, 
	215, 215, 215, 158, 157, 159, 201, 202, 
	201, 203, 158, 157, 159, 219, 158, 157, 
	159, 220, 221, 220, 222, 158, 157, 159, 
	220, 221, 220, 222, 158, 157, 159, 194, 
	195, 194, 196, 158, 157, 159, 223, 158, 
	157, 159, 224, 225, 224, 226, 158, 157, 
	159, 224, 225, 224, 226, 158, 157, 159, 
	187, 188, 187, 189, 158, 157, 159, 227, 
	158, 157, 159, 228, 229, 228, 230, 158, 
	157, 159, 228, 229, 228, 230, 158, 157, 
	159, 178, 179, 178, 180, 158, 157, 159, 
	173, 173, 174, 158, 157, 159, 231, 158, 
	157, 159, 232, 158, 157, 159, 233, 158, 
	157, 159, 235, 234, 234, 234, 234, 158, 
	157, 159, 236, 236, 158, 157, 159, 236, 
	236, 237, 158, 157, 239, 238, 240, 238, 
	241, 158, 157, 243, 242, 244, 242, 237, 
	158, 157, 243, 244, 157, 239, 238, 240, 
	238, 241, 158, 157, 159, 245, 158, 157, 
	159, 246, 158, 157, 159, 247, 158, 157, 
	159, 248, 158, 157, 159, 249, 158, 157, 
	159, 250, 158, 157, 159, 251, 158, 157, 
	159, 252, 158, 157, 159, 253, 158, 157, 
	159, 254, 254, 158, 157, 159, 254, 254, 
	255, 158, 157, 159, 256, 256, 257, 158, 
	157, 159, 256, 256, 258, 158, 157, 260, 
	259, 261, 259, 262, 158, 157, 260, 259, 
	261, 259, 158, 157, 260, 261, 157, 260, 
	259, 261, 259, 262, 158, 157, 159, 256, 
	256, 257, 158, 157, 159, 263, 158, 157, 
	159, 264, 158, 157, 159, 265, 158, 157, 
	159, 266, 158, 157, 159, 267, 158, 157, 
	269, 268, 270, 271, 268, 158, 157, 273, 
	272, 274, 275, 272, 158, 157, 273, 274, 
	157, 159, 276, 277, 278, 276, 278, 278, 
	278, 158, 157, 159, 276, 278, 276, 278, 
	278, 278, 158, 157, 159, 279, 280, 282, 
	279, 281, 282, 282, 282, 158, 157, 159, 
	283, 277, 285, 283, 284, 285, 285, 285, 
	158, 157, 273, 277, 274, 277, 158, 157, 
	159, 284, 285, 284, 284, 285, 285, 285, 
	158, 157, 159, 286, 287, 285, 286, 284, 
	285, 285, 285, 158, 157, 159, 288, 158, 
	157, 159, 289, 158, 157, 159, 290, 158, 
	157, 159, 291, 158, 157, 159, 292, 293, 
	292, 158, 157, 159, 294, 295, 294, 158, 
	157, 159, 295, 296, 295, 296, 296, 296, 
	158, 157, 159, 297, 298, 300, 297, 299, 
	300, 300, 300, 158, 157, 159, 301, 302, 
	304, 301, 303, 304, 304, 304, 158, 157, 
	306, 305, 307, 305, 158, 157, 306, 305, 
	307, 308, 305, 308, 308, 308, 158, 157, 
	306, 307, 157, 310, 309, 311, 313, 309, 
	312, 313, 313, 313, 158, 157, 306, 314, 
	307, 316, 314, 315, 316, 316, 316, 158, 
	157, 159, 315, 316, 315, 315, 316, 316, 
	316, 158, 157, 318, 317, 319, 316, 317, 
	315, 316, 316, 316, 158, 157, 159, 303, 
	304, 303, 303, 304, 304, 304, 158, 157, 
	159, 320, 321, 304, 320, 303, 304, 304, 
	304, 158, 157, 159, 322, 158, 157, 159, 
	323, 158, 157, 159, 324, 158, 157, 159, 
	325, 325, 158, 157, 159, 325, 326, 327, 
	328, 325, 158, 157, 159, 329, 158, 157, 
	159, 330, 158, 157, 159, 331, 158, 157, 
	159, 332, 332, 158, 157, 159, 332, 333, 
	332, 333, 333, 333, 158, 157, 159, 334, 
	337, 336, 334, 335, 336, 336, 336, 158, 
	157, 159, 338, 341, 340, 338, 339, 340, 
	340, 340, 158, 157, 159, 339, 340, 339, 
	339, 340, 340, 340, 158, 157, 159, 342, 
	343, 340, 342, 339, 340, 340, 340, 158, 
	157, 159, 341, 344, 341, 344, 344, 344, 
	158, 157, 346, 345, 347, 349, 345, 348, 
	349, 349, 349, 158, 157, 351, 350, 352, 
	354, 350, 353, 354, 354, 354, 158, 157, 
	351, 352, 157, 159, 353, 354, 353, 353, 
	354, 354, 354, 158, 157, 356, 355, 357, 
	354, 355, 353, 354, 354, 354, 158, 157, 
	159, 358, 158, 157, 159, 359, 158, 157, 
	159, 360, 158, 157, 159, 361, 158, 157, 
	159, 362, 362, 158, 157, 159, 362, 363, 
	362, 363, 363, 363, 158, 157, 159, 364, 
	367, 366, 364, 365, 366, 366, 366, 158, 
	157, 159, 368, 371, 370, 368, 369, 370, 
	370, 370, 158, 157, 159, 369, 370, 369, 
	369, 370, 370, 370, 158, 157, 159, 372, 
	373, 370, 372, 369, 370, 370, 370, 158, 
	157, 159, 371, 374, 371, 374, 374, 374, 
	158, 157, 376, 375, 377, 379, 375, 378, 
	379, 379, 379, 158, 157, 381, 380, 382, 
	384, 380, 383, 384, 384, 384, 158, 157, 
	381, 382, 157, 159, 383, 384, 383, 383, 
	384, 384, 384, 158, 157, 386, 385, 387, 
	384, 385, 383, 384, 384, 384, 158, 157, 
	159, 388, 158, 157, 159, 389, 158, 157, 
	159, 390, 158, 157, 159, 391, 158, 157, 
	159, 392, 158, 157, 159, 393, 158, 157, 
	159, 394, 158, 157, 159, 395, 158, 157, 
	159, 396, 396, 158, 157, 159, 396, 397, 
	396, 397, 397, 397, 158, 157, 159, 398, 
	401, 400, 398, 399, 400, 400, 400, 158, 
	157, 159, 402, 405, 404, 402, 403, 404, 
	404, 404, 158, 157, 159, 403, 404, 403, 
	403, 404, 404, 404, 158, 157, 159, 406, 
	407, 404, 406, 403, 404, 404, 404, 158, 
	157, 159, 405, 408, 405, 408, 408, 408, 
	158, 157, 410, 409, 411, 413, 409, 412, 
	413, 413, 413, 158, 157, 415, 414, 416, 
	418, 414, 417, 418, 418, 418, 158, 157, 
	415, 416, 157, 159, 417, 418, 417, 417, 
	418, 418, 418, 158, 157, 420, 419, 421, 
	418, 419, 417, 418, 418, 418, 158, 157, 
	159, 422, 158, 157, 159, 423, 158, 157, 
	159, 424, 424, 158, 157, 159, 424, 425, 
	424, 158, 157, 159, 425, 426, 425, 426, 
	426, 426, 158, 157, 159, 427, 428, 430, 
	427, 429, 430, 430, 430, 158, 157, 159, 
	431, 432, 434, 431, 433, 434, 434, 434, 
	158, 157, 436, 435, 437, 435, 158, 157, 
	436, 435, 437, 438, 435, 438, 438, 438, 
	158, 157, 436, 437, 157, 440, 439, 441, 
	443, 439, 442, 443, 443, 443, 158, 157, 
	436, 444, 437, 446, 444, 445, 446, 446, 
	446, 158, 157, 159, 445, 446, 445, 445, 
	446, 446, 446, 158, 157, 448, 447, 449, 
	446, 447, 445, 446, 446, 446, 158, 157, 
	159, 433, 434, 433, 433, 434, 434, 434, 
	158, 157, 159, 450, 451, 434, 450, 433, 
	434, 434, 434, 158, 1, 453, 452, 111, 
	1, 161, 160, 452, 162, 163, 164, 165, 
	166, 167, 160, 158, 454, 161, 160, 162, 
	163, 164, 165, 166, 167, 160, 158, 0
};

static const short _mmp_parser_trans_targs_wi[] = {
	1, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 105, 106, 27, 
	28, 93, 29, 30, 31, 32, 33, 34, 
	33, 34, 35, 36, 37, 38, 39, 40, 
	41, 42, 43, 44, 45, 92, 45, 45, 
	46, 47, 48, 49, 50, 51, 52, 51, 
	52, 53, 54, 55, 90, 91, 54, 55, 
	90, 91, 56, 57, 85, 86, 57, 57, 
	58, 59, 60, 61, 62, 84, 62, 62, 
	63, 64, 65, 66, 67, 68, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 83, 79, 79, 80, 81, 82, 305, 
	87, 57, 85, 88, 89, 87, 88, 89, 
	87, 57, 85, 54, 55, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	101, 102, 103, 102, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 306, 124, 306, 
	125, 307, 126, 171, 199, 214, 232, 288, 
	127, 128, 129, 130, 131, 132, 170, 132, 
	133, 134, 135, 136, 169, 137, 137, 138, 
	139, 166, 140, 141, 142, 165, 142, 143, 
	162, 144, 145, 146, 161, 146, 147, 158, 
	148, 149, 150, 157, 151, 306, 152, 153, 
	154, 306, 152, 155, 156, 154, 155, 156, 
	154, 306, 152, 159, 149, 150, 160, 163, 
	145, 146, 164, 167, 141, 142, 168, 172, 
	173, 174, 175, 181, 176, 177, 178, 306, 
	179, 180, 178, 306, 179, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 198, 194, 195, 306, 196, 197, 200, 
	201, 202, 203, 204, 205, 306, 206, 207, 
	205, 306, 206, 207, 208, 211, 209, 210, 
	211, 212, 213, 210, 212, 213, 210, 211, 
	215, 216, 217, 218, 219, 220, 219, 220, 
	221, 222, 223, 230, 231, 222, 223, 230, 
	231, 224, 306, 225, 226, 227, 306, 225, 
	228, 229, 227, 228, 229, 227, 306, 225, 
	222, 223, 233, 234, 235, 236, 237, 252, 
	268, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 243, 244, 245, 246, 243, 246, 
	247, 248, 306, 249, 250, 251, 248, 306, 
	249, 250, 251, 248, 306, 249, 253, 254, 
	255, 256, 257, 258, 259, 260, 261, 262, 
	259, 260, 261, 262, 259, 262, 263, 264, 
	306, 265, 266, 267, 264, 306, 265, 266, 
	267, 264, 306, 265, 269, 270, 271, 272, 
	273, 274, 275, 276, 277, 278, 279, 280, 
	281, 282, 279, 280, 281, 282, 279, 282, 
	283, 284, 306, 285, 286, 287, 284, 306, 
	285, 286, 287, 284, 306, 285, 289, 290, 
	291, 292, 293, 294, 295, 302, 303, 294, 
	295, 302, 303, 296, 306, 297, 298, 299, 
	306, 297, 300, 301, 299, 300, 301, 299, 
	306, 297, 294, 295, 304, 306, 306
};

static const unsigned char _mmp_parser_trans_actions_wi[] = {
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 39, 39, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 121, 0, 0, 1, 
	0, 0, 0, 0, 0, 41, 41, 0, 
	0, 0, 83, 83, 13, 80, 0, 0, 
	0, 15, 0, 125, 0, 0, 0, 1, 
	0, 0, 0, 0, 59, 0, 0, 1, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	133, 0, 0, 1, 0, 0, 0, 0, 
	86, 210, 86, 13, 80, 0, 0, 15, 
	19, 172, 19, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 49, 95, 49, 5, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 0, 68, 
	0, 153, 0, 0, 45, 0, 92, 35, 
	0, 0, 0, 0, 0, 21, 5, 0, 
	0, 0, 0, 0, 5, 23, 0, 0, 
	0, 0, 0, 0, 25, 5, 0, 0, 
	0, 0, 0, 27, 5, 0, 0, 0, 
	0, 0, 29, 5, 0, 101, 0, 0, 
	145, 234, 145, 13, 80, 0, 0, 15, 
	89, 228, 89, 0, 11, 77, 5, 0, 
	11, 74, 5, 0, 11, 71, 5, 0, 
	0, 0, 33, 0, 0, 0, 31, 149, 
	31, 5, 0, 62, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 0, 0, 105, 0, 9, 0, 
	0, 0, 0, 0, 47, 187, 47, 47, 
	0, 137, 0, 0, 0, 0, 0, 83, 
	83, 13, 80, 0, 0, 15, 17, 17, 
	0, 0, 0, 0, 41, 41, 0, 0, 
	0, 83, 83, 13, 80, 0, 0, 0, 
	15, 0, 129, 0, 0, 86, 216, 86, 
	13, 80, 0, 0, 15, 19, 177, 19, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 83, 13, 
	80, 83, 0, 0, 15, 0, 17, 17, 
	0, 86, 192, 86, 13, 80, 0, 109, 
	0, 0, 15, 19, 157, 19, 0, 0, 
	0, 0, 0, 0, 83, 13, 80, 83, 
	0, 0, 15, 0, 17, 17, 0, 86, 
	204, 86, 13, 80, 0, 117, 0, 0, 
	15, 19, 167, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 83, 13, 
	80, 83, 0, 0, 15, 0, 17, 17, 
	0, 86, 222, 86, 13, 80, 0, 141, 
	0, 0, 15, 19, 182, 19, 0, 0, 
	0, 0, 0, 83, 83, 13, 80, 0, 
	0, 0, 15, 0, 113, 0, 0, 86, 
	198, 86, 13, 80, 0, 0, 15, 19, 
	162, 19, 17, 17, 0, 65, 55
};

static const unsigned char _mmp_parser_to_state_actions[] = {
	0, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 51, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	3, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 3, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 98, 0
};

static const unsigned char _mmp_parser_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 53, 0
};

static const short _mmp_parser_eof_trans[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	158, 158, 158, 158, 158, 158, 158, 158, 
	0, 0, 0, 455
};

static const int mmp_parser_start = 1;
static const int mmp_parser_first_final = 305;
static const int mmp_parser_error = 0;

static const int mmp_parser_en_group_scanner = 306;
static const int mmp_parser_en_main = 1;

#line 110 "NanorexMMPImportExport.rl"


// static data from class NanorexMMPImportExport

char const NanorexMMPImportExport::_s_bondOrderString[NUM_BOND_TYPES] = {
	'1', '2', '3', 'a', 'g', 'c'
};

char const
NanorexMMPImportExport::_s_bondOrderNameString[NUM_BOND_TYPES][16] =
{
	"single", "double", "triple", "aromatic", "graphitic", "carbomeric"
};

char const NanorexMMPImportExport::_s_hybridizationName[8][8] = {
	"none", "sp", "sp2", "sp3", "X-hyb4", "X-hyb5", "X-hyb6", "X-hyb7"
};

/*static*/
void NanorexMMPImportExport::SetResult(NXCommandResult& commandResult,
                                       int errCode,
                                       string const& errMsg)
{
	commandResult.setResult(errCode);
	vector<QString> message;
	message.push_back(QObject::tr(errMsg.c_str()));
	commandResult.setParamVector(message);
}

// .............................................................................

/* static */
void NanorexMMPImportExport::ClearResult(NXCommandResult& commandResult)
{
	commandResult.setResult((int) NX_CMD_SUCCESS);
	vector<QString> message;
	commandResult.setParamVector(message);
}


/* CONSTRUCTOR */
NanorexMMPImportExport::NanorexMMPImportExport()
{
reset();
}

/* DESTRUCTOR */
NanorexMMPImportExport::~NanorexMMPImportExport()
{
}


/* FUNCTION: reset */
void NanorexMMPImportExport::reset(void)
{
	inputFilename.clear();
	dataStoreInfo = (NXDataStoreInfo*) NULL;
	
	lineNum = 0;
	insideViewDataGroup = false;
	insideClipboardGroup = false;
	
	atomPtr = NULL;
	bondPtr = NULL;
	foundAtomList.clear();
	targetAtomList.clear();
	molPtr = NULL;
	molSetPtr = NULL;
	molSetPtrStack.clear();
	molStyle = "def";
	
	clipboardGroup = NULL;
	
	// defaultAtomStyle = "def";
	// defaultAtomStyleStack.clear();
	
	// ragel stack
	stackSize = 2;
	stack.clear();
	stack.resize(stackSize, 0);
	
    // initialize the ragel engine
	
#line 1050 "NanorexMMPImportExport.cpp"
	{
	cs = mmp_parser_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}
#line 193 "NanorexMMPImportExport.rl"
}


/* FUNCTION: importFromFile */
NXCommandResult*
NanorexMMPImportExport::
importFromFile(NXMoleculeSet *rootMoleculeSetPtr,
               NXDataStoreInfo *dsInfo,
               const std::string& theFilename,
               int /*frameSetId*/, int /*frameIndex*/)
{
	reset();
	bool success = true;
	
	ClearResult(commandResult);
	
	ifstream mmpfile(theFilename.c_str(), ios::in);
	if(!mmpfile) {
		populateCommandResult(&commandResult,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
		success = false;
	}
	else {
		inputFilename = theFilename;
		dataStoreInfo = dsInfo;
		success = readMMP(mmpfile, rootMoleculeSetPtr);
	}
	
	// Set the meta information about the data store.
	if (success) {
		dataStoreInfo->setIsSingleStructure(true);
	}
	
	return &commandResult;
}


/* FUNCTION: readMMP */
bool NanorexMMPImportExport::readMMP(istream& instream,
                                     NXMoleculeSet *rootMoleculeSetPtr)
{
	p = RagelIstreamPtr(instream);
	pe = RagelIstreamPtr(instream, 0, ios::end);
	eof = pe;
	
	this->rootMoleculeSetPtr = rootMoleculeSetPtr;
	molSetPtr = NULL;
	// molSetPtrStack.push(molSetPtr);
	
    /// @todo handle first 'group' statement and molSetPtrStack initialization
	
    // Ragel parser implementation
	bool success = true;
	
#line 1114 "NanorexMMPImportExport.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _mmp_parser_actions + _mmp_parser_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 44:
#line 1 "NanorexMMPImportExport.rl"
	{ts = p;}
	break;
#line 1135 "NanorexMMPImportExport.cpp"
		}
	}

	_keys = _mmp_parser_trans_keys + _mmp_parser_key_offsets[cs];
	_trans = _mmp_parser_index_offsets[cs];

	_klen = _mmp_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _mmp_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _mmp_parser_indicies[_trans];
_eof_trans:
	cs = _mmp_parser_trans_targs_wi[_trans];

	if ( _mmp_parser_trans_actions_wi[_trans] == 0 )
		goto _again;

	_acts = _mmp_parser_actions + _mmp_parser_trans_actions_wi[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 24 "NanorexMMPImportExport.rl"
	{++lineNum;}
	break;
	case 2:
#line 41 "NanorexMMPImportExport.rl"
	{intVal = intVal*10 + ((*p)-'0');}
	break;
	case 4:
#line 46 "NanorexMMPImportExport.rl"
	{intVal2 = intVal2*10 + ((*p)-'0');}
	break;
	case 5:
#line 49 "NanorexMMPImportExport.rl"
	{intVal=-intVal;}
	break;
	case 6:
#line 73 "NanorexMMPImportExport.rl"
	{ charStringWithSpaceStart = p-1; }
	break;
	case 7:
#line 74 "NanorexMMPImportExport.rl"
	{ charStringWithSpaceStop = p; }
	break;
	case 8:
#line 83 "NanorexMMPImportExport.rl"
	{ stringVal.resize(charStringWithSpaceStop - charStringWithSpaceStart + 1);
			std::copy(charStringWithSpaceStart, charStringWithSpaceStop+1, stringVal.begin());
		}
	break;
	case 9:
#line 94 "NanorexMMPImportExport.rl"
	{ stringVal2.resize(charStringWithSpaceStop - charStringWithSpaceStart + 1);
			std::copy(charStringWithSpaceStart, charStringWithSpaceStop+1, stringVal2.begin());
		}
	break;
	case 10:
#line 29 "NanorexMMPImportExport.rl"
	{ atomId = intVal; /*cerr << "atomId = " << atomId << endl;*/ }
	break;
	case 11:
#line 34 "NanorexMMPImportExport.rl"
	{ atomicNum = intVal; /*cerr << "atomId = " << atomId << endl;*/}
	break;
	case 12:
#line 37 "NanorexMMPImportExport.rl"
	{x = intVal; }
	break;
	case 13:
#line 38 "NanorexMMPImportExport.rl"
	{y = intVal; }
	break;
	case 14:
#line 39 "NanorexMMPImportExport.rl"
	{z = intVal; }
	break;
	case 15:
#line 50 "NanorexMMPImportExport.rl"
	{ atomStyle = stringVal;
		    /*cerr << "atom_style = " << stringVal << endl;*/
		}
	break;
	case 16:
#line 67 "NanorexMMPImportExport.rl"
	{ newAtom(atomId, atomicNum, x, y, z, atomStyle); }
	break;
	case 17:
#line 71 "NanorexMMPImportExport.rl"
	{
		newBond(stringVal, intVal);
	}
	break;
	case 18:
#line 77 "NanorexMMPImportExport.rl"
	{ stringVal = *p; }
	break;
	case 19:
#line 87 "NanorexMMPImportExport.rl"
	{
		newBondDirection(intVal, intVal2);
	}
	break;
	case 20:
#line 102 "NanorexMMPImportExport.rl"
	{
		// stripTrailingWhiteSpaces(stringVal);
		// stripTrailingWhiteSpaces(stringVal2);
		newAtomInfo(stringVal, stringVal2);
	}
	break;
	case 21:
#line 9 "NanorexMMPImportExport.rl"
	{lineStart=p;}
	break;
	case 23:
#line 16 "NanorexMMPImportExport.rl"
	{
			if(stringVal2 == "")
				stringVal2 = "def";
			newMolecule(stringVal, stringVal2);
		}
	break;
	case 24:
#line 24 "NanorexMMPImportExport.rl"
	{lineStart=p;}
	break;
	case 25:
#line 35 "NanorexMMPImportExport.rl"
	{ newChunkInfo(stringVal, stringVal2); }
	break;
	case 26:
#line 26 "NanorexMMPImportExport.rl"
	{ lineStart = p; }
	break;
	case 27:
#line 29 "NanorexMMPImportExport.rl"
	{ newViewDataGroup(); }
	break;
	case 28:
#line 34 "NanorexMMPImportExport.rl"
	{ stringVal2.clear(); }
	break;
	case 29:
#line 40 "NanorexMMPImportExport.rl"
	{ newMolStructGroup(stringVal, stringVal2); }
	break;
	case 30:
#line 47 "NanorexMMPImportExport.rl"
	{ end1(); }
	break;
	case 31:
#line 51 "NanorexMMPImportExport.rl"
	{ lineStart = p; }
	break;
	case 32:
#line 56 "NanorexMMPImportExport.rl"
	{ newClipboardGroup(); }
	break;
	case 33:
#line 60 "NanorexMMPImportExport.rl"
	{lineStart=p;}
	break;
	case 34:
#line 61 "NanorexMMPImportExport.rl"
	{ stringVal.clear(); }
	break;
	case 35:
#line 67 "NanorexMMPImportExport.rl"
	{ endGroup(stringVal); }
	break;
	case 36:
#line 71 "NanorexMMPImportExport.rl"
	{lineStart=p;}
	break;
	case 37:
#line 81 "NanorexMMPImportExport.rl"
	{ newOpenGroupInfo(stringVal, stringVal2); }
	break;
	case 38:
#line 65 "NanorexMMPImportExport.rl"
	{ kelvinTemp = intVal; }
	break;
	case 39:
#line 79 "NanorexMMPImportExport.rl"
	{ p--; {
		if(top == stackSize) {
			stackSize += stackSize;
			stack.resize(stackSize, 0);
		// cerr << "Resized stack" << endl;
		}
	{stack[top++] = cs; cs = 306; goto _again;}} }
	break;
	case 40:
#line 82 "NanorexMMPImportExport.rl"
	{ p--; {
		if(top == stackSize) {
			stackSize += stackSize;
			stack.resize(stackSize, 0);
		// cerr << "Resized stack" << endl;
		}
	{stack[top++] = cs; cs = 306; goto _again;}} }
	break;
	case 41:
#line 87 "NanorexMMPImportExport.rl"
	{ p--; {
		if(top == stackSize) {
			stackSize += stackSize;
			stack.resize(stackSize, 0);
		// cerr << "Resized stack" << endl;
		}
	{stack[top++] = cs; cs = 306; goto _again;}} }
	break;
	case 45:
#line 1 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 46:
#line 102 "NanorexMMPImportExport.rl"
	{act = 11;}
	break;
	case 47:
#line 89 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 48:
#line 90 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 49:
#line 91 "NanorexMMPImportExport.rl"
	{te = p+1;{{cs = stack[--top]; goto _again;}}}
	break;
	case 50:
#line 92 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 51:
#line 93 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 52:
#line 94 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 53:
#line 95 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 54:
#line 96 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 55:
#line 97 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 56:
#line 100 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 57:
#line 102 "NanorexMMPImportExport.rl"
	{te = p+1;{ cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}}
	break;
	case 58:
#line 102 "NanorexMMPImportExport.rl"
	{te = p;p--;{ cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}}
	break;
	case 59:
#line 1 "NanorexMMPImportExport.rl"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 11:
	{{p = ((te))-1;} cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}
	break;
	default: break;
	}
	}
	break;
#line 1471 "NanorexMMPImportExport.cpp"
		}
	}

_again:
	_acts = _mmp_parser_actions + _mmp_parser_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 40 "NanorexMMPImportExport.rl"
	{intVal=(*p)-'0';}
	break;
	case 3:
#line 45 "NanorexMMPImportExport.rl"
	{intVal2=(*p)-'0';}
	break;
	case 22:
#line 11 "NanorexMMPImportExport.rl"
	{ stringVal2.clear(); /* 'style' string optional */ }
	break;
	case 42:
#line 1 "NanorexMMPImportExport.rl"
	{ts = 0;}
	break;
	case 43:
#line 1 "NanorexMMPImportExport.rl"
	{act = 0;}
	break;
#line 1500 "NanorexMMPImportExport.cpp"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _mmp_parser_eof_trans[cs] > 0 ) {
		_trans = _mmp_parser_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}
#line 248 "NanorexMMPImportExport.rl"
	
    // End-of-parsing sanity checks
	if(molSetPtrStack.size() != 0) {
		NXLOG_WARNING("NanorexMMPImportExport",
		              "At least one group has no matching egroup statement");
	}
	return success;
}


/* FUNCTION newAtom */
void NanorexMMPImportExport::newAtom(int id, int atomicNum, int x, int y, int z,
                                     string const& style)
{
	if(molPtr == NULL) {
		CSEVERE("No parent molecule for atom");
		return;
	}
	
	// error if id was previously specified
	map<int,OBAtom*>::const_iterator atomExistsQuery =
		foundAtomList.find(id);
	if(atomExistsQuery != foundAtomList.end()) {
		NXLOG_SEVERE("NanorexMMPImportExport",
		             "Atom-id " + NXUtility::itos(id) + " is repeated");
		return;
	}
	
	
	atomPtr = molPtr->NewAtom();
	atomPtr->SetAtomicNum(atomicNum);
	NXAtomData *atomDataPtr = new NXAtomData(atomicNum);
	atomDataPtr->setIdx(id);
	atomDataPtr->setRenderStyleCode(style);
	assert(atomDataPtr->GetDataType() == NXAtomDataType);
	atomPtr->SetData(atomDataPtr); // atomic number
	assert(atomPtr->HasData(NXAtomDataType));
	
	foundAtomList[id] = atomPtr;
	
	double const LENGTH_SCALE = 1.0e-13;
	atomPtr->SetVector(double(x) * LENGTH_SCALE,
	                   double(y) * LENGTH_SCALE,
	                   double(z) * LENGTH_SCALE);
	bondPtr = NULL;	
	
	CDEBUG("atom " + NXUtility::itos(atomId) + " (" + NXUtility::itos(atomicNum)
	       + ") (" + NXUtility::itos(x) + ',' + NXUtility::itos(y) + ',' +
	       NXUtility::itos(z) + ") " + atomStyle);
}


/* FUNCTION: newAtomInfo*/
void NanorexMMPImportExport::newAtomInfo(string const& key,
                                         string const& value)
{
	if(insideViewDataGroup)
		return;
	
	if(atomPtr != NULL) {
		if(key == "atomtype") { // hybridization info
			if(value == "sp") atomPtr->SetHyb(1);
			else if(value == "sp2") atomPtr->SetHyb(2);
			else if(value == "sp2_g") atomPtr->SetHyb(2);
			else if(value == "sp3") atomPtr->SetHyb(3);
			else if(value == "sp3d") atomPtr->SetHyb(3);
            // else ignore
		}
	}
	
	CDEBUG("info atom '" + key + "' = '" + value + "'");
}


/* FUNCTION: newBond */
void NanorexMMPImportExport::newBond(string const& bondType, int targetAtomId)
{
	if(insideViewDataGroup)
		return;
	
	assert(molPtr != NULL && atomPtr != NULL);
	
	map<int,OBAtom*>::iterator targetAtomExistsQuery =
		foundAtomList.find(targetAtomId);
	
	if(targetAtomExistsQuery == foundAtomList.end()) {
		CSEVERE("**ERROR** attempting to bond to non-existent atomID "
		        + NXUtility::itos(targetAtomId));
	}
	else {
		OBAtom *const targetAtomPtr = targetAtomExistsQuery->second;
		// guard against duplicates
		// also a hack to protect against Ragel's duplicate parsing
		// when encountering a blank line
		if(molPtr->GetBond(atomPtr, targetAtomPtr) == NULL) {
			// bond was not previously encountered, include
			int atomId = ((NXAtomData*)(atomPtr->GetData(NXAtomDataType)))->getIdx();
			CDEBUG("bonding atom #" + NXUtility::itos(atomId) +
			       " to atom #" + NXUtility::itos(targetAtomId));
			bondPtr = molPtr->NewBond();
			bondOrder = GetBondOrderFromType(bondType);
			bondPtr->SetBondOrder(bondOrder);
			atomPtr->AddBond(bondPtr);
			targetAtomPtr->AddBond(bondPtr);
			bondPtr->SetBegin(atomPtr);
			bondPtr->SetEnd(targetAtomPtr);
			CDEBUG("bond" + bondType + " " + NXUtility::itos(targetAtomId));
		}
		else {
			CSEVERE("bond to atom #" + NXUtility::itos(targetAtomId) +
			        " already exists");
		}
	}
	
}


/* FUNCTION: GetBondOrderFromType */
int NanorexMMPImportExport::GetBondOrderFromType(string const& type)
{
	if(type == "1")
		return 1;
	else if(type == "2")
		return 2;
	else if(type == "3")
		return 3;
	else if(type == "a")
		return 4;
	else if(type == "c")
		return 5;
	else if (type == "g")
		return 6;
	else {
		return -1;
	}
}


/* FUNCTION: newBondDirection */
void NanorexMMPImportExport::newBondDirection(int atomId1, int atomId2)
{
	assert(false);
}


/* FUNCTION: newMolecule */
void
NanorexMMPImportExport::newMolecule(string const& name, string const& style)
{
	if(insideViewDataGroup)
		return;
	
	atomPtr = NULL;
	bondPtr = NULL;
	molPtr = molSetPtr->newMolecule();
	molPtr->SetTitle(name.c_str());
	if(style == "")
		molStyle = "def";
	else
		molStyle = style;
	CDEBUG("mol (" + name + ") " + style);
}


/* FUNCTION: newViewDataGroup */
void NanorexMMPImportExport::newViewDataGroup(void)
{
insideViewDataGroup = true;
	CDEBUG("[special] group (View Data)");
}


/* FUNCTION: newMolStructGroup */
void NanorexMMPImportExport::newMolStructGroup(string const& name)
{
// 	if(insideClipboardGroup && molSetPtr == NULL) {
// 		// no active top-level group
// 		molSetPtr = new NXMoleculeSet;
// 		molSetPtr->setTitle(name);
// 		// dataStoreInfo->addClipboardStructure(molSetPtr);
// 	}
	
	// if in "View Data" group, ignore
	
	// if(molSetPtr != NULL) {
	/*else*/ if(!insideViewDataGroup) {
		// if in principal molecule-set group or active clipboard group
		
		if(molSetPtr == NULL) {
			// must be inside principal structure group
			assert(!insideClipboardGroup);
			molSetPtr = rootMoleculeSetPtr;
		}
// 		else if(!insideClipboardGroup && molSetPtr == NULL) {
// 			// entering principal structure group
// 			// all changes should go to supplied pointer
// 			molSetPtr = rootMoleculeSetPtr;
// 		}
		else {
			// If not at top-level inside principal structure group or
			// clipboard group, allocate new structure
			NXMoleculeSet *newMolSetPtr = new NXMoleculeSet;
			molSetPtr->addChild(newMolSetPtr);
			molSetPtrStack.push_back(molSetPtr);
			molSetPtr = newMolSetPtr;
		}
		molSetPtr->setTitle(name);
	}
	
	// ++molStructGroupLevel;
	
	CDEBUG("group (" + name + ")");
}


/* FUNCTION: newClipboardGroup */
void NanorexMMPImportExport::newClipboardGroup(void)
{
	assert(molSetPtr == NULL);
	assert(molSetPtrStack.size() == 0);
	
	if(!insideClipboardGroup && clipboardGroup == (NXMoleculeSet*) NULL) {
		clipboardGroup = new NXMoleculeSet;
		clipboardGroup->setTitle("Clipboard");
		molSetPtr = clipboardGroup;
		insideClipboardGroup = true;
		dataStoreInfo->setClipboardStructure(clipboardGroup);
		CDEBUG("[special] group (Clipboard)");
	}
	else {
		CSEVERE("Redefinition of 'Clipboard' group");
	}
}


/* FUNCTION: endGroup */
void NanorexMMPImportExport::endGroup(string const& name)
{
	// Must ensure that molSetPtr = NULL between top-level structure groups
	// Top-level structure groups are defined as the principal structure group
	// that occurs between the "View Data" and the "Clipboard" groups in the MMP
	// file, and those from various top-level 'group' statements in the
	// "Clipboard" group
	
	string groupName;
	if(insideViewDataGroup)
		groupName = "View Data";
	else if(insideClipboardGroup)
		groupName = (molSetPtr == NULL) ? "Clipboard" : molSetPtr->getTitle();
	else
		groupName = molSetPtr->getTitle();
	
	
	if(name != groupName) {
		NXLOG_WARNING("NanorexMMPImportExport",
		              "egroup (" + name + ") attempting to close "
		              "group (" + groupName + ')');
	}
	
	
	if(insideViewDataGroup) {
		insideViewDataGroup = false;
		molSetPtr = NULL;
	}
	else {
		// non top-level structure groups in clipboard or in the
		// principal structure group
		if(molSetPtrStack.size() == 0)  {
			molSetPtr = NULL;
			if(insideClipboardGroup)
				insideClipboardGroup = false;
		}
		else {
			molSetPtr = molSetPtrStack.back();
			molSetPtrStack.pop_back();
		}
	}
	
	CDEBUG("egroup (" + groupName + ')');
}


/* FUNCTION: newOpenGroupInfo */
void NanorexMMPImportExport::newOpenGroupInfo(std::string const& key,
                                              std::string const& value)
{
	/// @todo
	CDEBUG("info opengroup " + key + " = " + value);
}


/* FUNCTION: newChunkInfo */
void
NanorexMMPImportExport::newChunkInfo(std::string const& key,
                                     std::string const& value)
{
	CDEBUG("info chunk " + key + " = " + value);
	
	if(insideViewDataGroup)
		return;
	
	/// @todo
}


/* FUNCTION: end1 */
void NanorexMMPImportExport::end1(void)
{
	/// @todo
	CDEBUG("end1");
}


/* FUNCTION: exportToFile */
NXCommandResult*
NanorexMMPImportExport::
exportToFile(NXMoleculeSet *molSetPtr,
             NXDataStoreInfo */*dataStoreInfo*/,
             const std::string& theFilename,
             int /*frameSetId*/, int /*frameIndex*/)
{
	NXCommandResult *result = new NXCommandResult();
	result->setResult(NX_CMD_SUCCESS);
	
	ofstream mmpfile(theFilename.c_str(), ios::out);
	if(!mmpfile) {
		populateCommandResult(result,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
	}
	else {
		PrintMoleculeSet(mmpfile, molSetPtr);
		mmpfile.close();
	}
	return result;
}


/* FUNCTION: GetAtomID */
/* static */
int NanorexMMPImportExport::GetAtomID(OBAtom *atomPtr)
{
	NXAtomData *atomIDData = 
		dynamic_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	int atomID = atomIDData->getIdx();
	return atomID;
}


/* FUNCTION: GetAtomRenderStyleCode */
/* static */
string const&
NanorexMMPImportExport::GetAtomRenderStyleCode(OBAtom *const atomPtr)
{
	NXAtomData *atomDataPtr =
		dynamic_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	string const& atomStyle = atomDataPtr->getRenderStyleCode();
	return atomStyle;
}


/* FUNCTION: PrintMolecule */
/* static */
void NanorexMMPImportExport::PrintMolecule(ostream& o,
OBMol *const molPtr)
{
	set<int> prevAtomIdx;
	set<int> prevBondIdx; /// @todo - replace with simple bond count
	
	o << "mol (" << molPtr->GetTitle() << ')' << endl;
	
	OBAtomIterator atomIter;
	OBAtom *atomPtr = NULL;
    // For each atom ...
	for(atomPtr = molPtr->BeginAtom(atomIter);
	    atomPtr != NULL;
	    atomPtr = molPtr->NextAtom(atomIter))
	{
        // ... write the 'atom' line ...
		int atomID = GetAtomID(atomPtr);
		o << "atom " << atomID << " (" << atomPtr->GetAtomicNum() << ") " << '('
			<< atomPtr->x() << ',' << atomPtr->y() << ',' << atomPtr->z()
			<< ") " << GetAtomRenderStyleCode(atomPtr) << endl;
		
		if(atomPtr->GetHyb() != 0) {
			o << "info atom atomtype = "
				<< _s_hybridizationName[atomPtr->GetHyb()];
		}
		
        // ... write the 'bond' lines for this atom ...
        // ... first sort bonds by type ...
		OBBondIterator bondIter;
		OBBond *bondPtr = NULL;
		vector<int> bondCategories[6];
		for(bondPtr = atomPtr->BeginBond(bondIter);
		    bondPtr != NULL;
		    bondPtr = atomPtr->NextBond(bondIter))
		{
            // write bond statement only if target atom was previously written
			OBAtom *nbrAtomPtr = bondPtr->GetNbrAtom(atomPtr);
			int nbrAtomID = GetAtomID(nbrAtomPtr);
			if(prevAtomIdx.find(nbrAtomID) != prevAtomIdx.end()) {
				int bondOrder = bondPtr->GetBondOrder();
				bondCategories[bondOrder-1].push_back(nbrAtomID);
                // record bond for sanity check at end
				prevBondIdx.insert(bondPtr->GetIdx());
			}
		}
		
        // ... write the bonds, one line per type ...
		for(int i=0; i<6; ++i) {
			int J = bondCategories[i].size();
			if(J > 0) {
				o << "bond" << _s_bondOrderString[i];
				for(int j=0; j<J; ++j)
					o << ' ' << bondCategories[i][j];
				o  << endl;
			}
		}
		
        // record atom as 'previously written'
		prevAtomIdx.insert(atomID);
	}
	
    // debug diagnostics
	ostringstream debugMsg;
	debugMsg << "# atoms check ";
	if(molPtr->NumAtoms() == prevAtomIdx.size())
		debugMsg << "PASS ("  << molPtr->NumAtoms() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumAtoms() << " != " << prevAtomIdx.size()<< endl;
	
	debugMsg << "# bonds check ";
	if(molPtr->NumBonds() == prevBondIdx.size())
		debugMsg << "PASS (" << molPtr->NumBonds() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumBonds() << " != " << prevBondIdx.size()<< endl;
	
	debugMsg.flush();
	NXLOG_DEBUG("NanorexMMPImportExport::PrintMoleculeSet",
	            debugMsg.str().c_str());
}


/* FUNCTION: PrintMoleculeSet */
/* static */
void NanorexMMPImportExport::PrintMoleculeSet(ostream& o,
                                              NXMoleculeSet *const molSetPtr)
{
	// Iterate over all child molecules
	OBMolIterator molIter;
	for(molIter = molSetPtr->moleculesBegin();
	    molIter != molSetPtr->moleculesEnd();
	    ++molIter)
	{
		PrintMolecule(o, *molIter);
	}
	
    // Iterate over all child molecule sets
	NXMoleculeSetIterator molSetIter;
	for(molSetIter = molSetPtr->childrenBegin();
	    molSetIter != molSetPtr->childrenEnd();
	    ++molSetIter)
	{
		PrintMoleculeSet(o, *molSetIter);
	}
}


/* FUNCTION: populateCommandResult */
void
NanorexMMPImportExport::populateCommandResult (NXCommandResult* result,
                                               const string& message)
{
	result->setResult(NX_PLUGIN_REPORTS_ERROR);
	vector<QString> resultVector;
	resultVector.push_back("OpenBabelImportExport");
	resultVector.push_back(message.c_str());
	result->setParamVector(resultVector);
}

Q_EXPORT_PLUGIN2 (NanorexMMPImportExport, NanorexMMPImportExport)

