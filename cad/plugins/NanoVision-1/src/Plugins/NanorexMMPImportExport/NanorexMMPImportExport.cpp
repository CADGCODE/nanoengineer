#line 1 "NanorexMMPImportExport.rl"
// *********************** GENERATED BY RAGEL 6.0 *******************
// ** Do not edit directly. Edit NanorexMMPImportExport.rl instead **
// ******************************************************************

// Copyright 2008 Nanorex, Inc.  See LICENSE file for details.

#include "NanorexMMPImportExport.h"
#include <QFileInfo>

#define VERBOSE

#if defined(VERBOSE)
#define CDEBUG(x) DEBUG_MSG(filename, line, x)
inline void DEBUG_MSG(string const& filename, int line, string const& s)
{
	ostringstream msg;
	msg << line << ": " << s;
	NXLOG_INFO(filename, msg.str());
/*    Nanorex::NXLogger* logger = Nanorex::NXLogger::Instance();
    if (logger != 0)
        logger->log(Nanorex::NXLogLevel_Info, filename, msg.str());*/
}
#else
#define CDEBUG(x)
#endif




#line 241 "NanorexMMPImportExport.rl"


#line 245 "NanorexMMPImportExport.rl"

#line 37 "NanorexMMPImportExport.cpp"
static const char _mmp_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	4, 1, 5, 1, 6, 1, 7, 1, 
	8, 1, 9, 1, 10, 1, 11, 1, 
	13, 1, 14, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 2, 1, 7, 2, 3, 
	4, 2, 3, 5, 2, 7, 1, 2, 
	7, 9, 2, 9, 10, 2, 11, 8, 
	2, 11, 12, 2, 14, 7, 2, 14, 
	9, 2, 14, 15, 2, 14, 16, 2, 
	14, 17, 2, 14, 18, 3, 14, 7, 
	15, 3, 14, 9, 15, 3, 14, 9, 
	16, 3, 14, 9, 18
};

static const short _mmp_parser_key_offsets[] = {
	0, 0, 4, 5, 6, 7, 8, 9, 
	10, 11, 12, 15, 20, 22, 24, 26, 
	28, 30, 33, 37, 38, 39, 40, 41, 
	42, 43, 44, 50, 60, 62, 71, 73, 
	81, 86, 91, 93, 94, 95, 96, 97, 
	100, 104, 115, 127, 132, 144, 157, 170, 
	172, 178, 184, 185, 186, 187, 200, 214, 
	228, 239, 253, 267, 280, 282, 287, 299, 
	310, 323, 336, 349, 361, 374, 387, 400, 
	413, 425, 430, 442, 456, 458, 463, 467, 
	468, 469, 470, 471, 472, 475, 479, 483, 
	484, 485, 486, 489, 493, 494, 495, 496, 
	500, 505, 510, 512, 513, 514, 515, 516, 
	519, 523, 533, 546, 559, 574, 588, 602, 
	616, 630, 643, 657, 672, 687, 689, 696, 
	702, 708, 710, 724, 739, 753, 767, 780, 
	793, 805, 819, 828, 832, 834, 841, 844, 
	849, 851, 853, 855, 857, 859, 862, 866, 
	867, 868, 869, 870, 871, 872, 873, 874, 
	879, 886, 887, 888, 889, 890, 891, 897, 
	899, 904, 914, 926, 937, 938, 939, 940, 
	941, 944, 948, 958, 970, 975, 987, 989, 
	994, 1007, 1018, 1029, 1030, 1031, 1032, 1035, 
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 
	1047, 1050, 1060, 1072, 1084, 1095, 1105, 1118, 
	1131, 1133, 1138, 1149, 1163, 1164, 1165, 1168, 
	1172, 1182, 1194, 1199, 1211, 1224, 1226, 1232, 
	1233, 1234, 1235, 1238, 1242, 1247, 1253, 1257, 
	1260, 1264, 1271, 1273, 1279, 1283, 1290, 1292, 
	1298, 1302, 1309, 1311, 1317, 1321, 1326, 1338, 
	1353, 1355, 1363, 1364, 1365, 1366, 1372, 1375, 
	1380, 1387, 1394, 1401, 1411, 1412, 1413, 1414, 
	1417, 1421, 1422, 1423, 1424, 1427, 1437, 1448, 
	1460, 1471, 1474, 1484, 1497, 1510, 1523, 1539, 
	1550, 1563, 1577, 1591, 1608, 1620, 1632, 1644, 
	1655, 1668, 1680, 1692, 1704, 1722, 1733, 1745, 
	1758, 1772, 1786, 1803, 1815, 1827, 1839, 1850, 
	1863, 1875, 1887, 1899, 1910, 1922, 1924, 1929, 
	1941, 1953, 1965, 1977, 1989, 2001, 2013, 2025, 
	2037, 2051, 2065, 2079, 2080, 2081, 2082, 2083, 
	2084, 2085, 2086, 2087, 2088, 2101, 2117, 2128, 
	2142, 2156, 2170, 2183, 2197, 2214, 2228, 2242, 
	2256, 2276, 2289, 2302, 2318, 2331, 2345, 2359, 
	2373, 2386, 2400, 2416, 2430, 2444, 2458, 2471, 
	2485, 2500, 2512, 2525, 2539, 2553, 2567, 2580, 
	2593, 2607, 2621, 2635, 2649, 2663, 2677, 2691, 
	2705, 2719, 2733, 2735, 2741, 2743, 2749, 2751, 
	2757, 2770, 2784, 2795, 2809, 2823, 2837, 2850, 
	2864, 2879, 2890, 2891, 2905, 2911, 2923, 2930, 
	2936, 2941, 2953, 2958, 2971, 2984, 2989, 3003, 
	3016, 3022, 3037, 3045, 3055, 3071, 3088, 3105, 
	3121, 3138, 3154, 3170, 3185, 3199, 3213
};

static const char _mmp_parser_trans_keys[] = {
	32, 109, 9, 13, 109, 112, 102, 111, 
	114, 109, 97, 116, 32, 9, 13, 32, 
	9, 13, 48, 57, 48, 57, 48, 57, 
	48, 57, 48, 57, 48, 57, 32, 9, 
	13, 32, 114, 9, 13, 101, 113, 117, 
	105, 114, 101, 100, 10, 32, 35, 59, 
	9, 13, 32, 35, 43, 45, 59, 103, 
	9, 13, 48, 57, -1, 10, 32, 35, 
	43, 45, 103, 9, 13, 48, 57, 48, 
	57, 10, 32, 35, 46, 9, 13, 48, 
	57, 10, 32, 35, 9, 13, 32, 35, 
	103, 9, 13, -1, 10, 114, 111, 117, 
	112, 32, 9, 13, 32, 40, 9, 13, 
	32, 86, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 41, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 9, 13, 10, 32, 35, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 95, 101, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	95, 101, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, 10, 32, 35, 101, 
	9, 13, 10, 32, 35, 101, 9, 13, 
	110, 100, 10, 10, 32, 35, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 45, 95, 101, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 101, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 45, 95, 110, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 100, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, 10, 32, 35, 9, 13, 10, 
	32, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	45, 95, 105, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 41, 45, 95, 101, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 41, 45, 95, 119, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 41, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 41, 45, 68, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	45, 95, 97, 9, 13, 48, 57, 65, 
	90, 98, 122, 32, 41, 45, 95, 116, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 41, 45, 95, 97, 9, 13, 48, 
	57, 65, 90, 98, 122, 32, 41, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 9, 13, 10, 32, 
	35, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 35, 95, 101, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, -1, 32, 101, 9, 13, 32, 
	101, 9, 13, 103, 114, 111, 117, 112, 
	32, 9, 13, 32, 40, 9, 13, 32, 
	86, 9, 13, 105, 101, 119, 32, 9, 
	13, 32, 68, 9, 13, 97, 116, 97, 
	32, 41, 9, 13, 10, 32, 35, 9, 
	13, 32, 35, 103, 9, 13, -1, 10, 
	114, 111, 117, 112, 32, 9, 13, 32, 
	40, 9, 13, 32, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	95, 101, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 95, 101, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 45, 95, 103, 110, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 114, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	95, 111, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 95, 117, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 45, 95, 112, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 40, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 40, 45, 95, 101, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 40, 45, 95, 101, 9, 
	13, 48, 57, 65, 90, 97, 122, -1, 
	10, -1, 10, 32, 35, 101, 9, 13, 
	10, 32, 35, 101, 9, 13, 10, 32, 
	35, 101, 9, 13, 103, 110, -1, 10, 
	32, 35, 45, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 35, 
	45, 95, 101, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	101, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 101, 9, 
	13, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 45, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, -1, 32, 45, 95, 
	101, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 101, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 103, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 69, 101, 
	9, 13, 48, 57, 43, 45, 48, 57, 
	48, 57, 10, 32, 35, 9, 13, 48, 
	57, 32, 9, 13, 32, 9, 13, 48, 
	57, 48, 57, 48, 57, 48, 57, 48, 
	57, 48, 57, 32, 9, 13, 32, 112, 
	9, 13, 114, 101, 102, 101, 114, 114, 
	101, 100, 10, 32, 35, 9, 13, 32, 
	101, 103, 105, 109, 9, 13, 103, 114, 
	111, 117, 112, 10, 32, 35, 40, 9, 
	13, -1, 10, 10, 32, 35, 9, 13, 
	32, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 41, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 114, 111, 117, 112, 32, 9, 13, 
	32, 40, 9, 13, 32, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 9, 13, 10, 
	32, 35, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 10, 32, 35, 
	9, 13, 10, 32, 35, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 110, 102, 111, 
	32, 9, 13, 32, 111, 9, 13, 112, 
	101, 110, 103, 114, 111, 117, 112, 32, 
	9, 13, 32, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 45, 61, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 45, 61, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 10, 32, 35, 
	9, 13, 32, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 61, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 111, 108, 32, 9, 13, 
	32, 40, 9, 13, 32, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 41, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 9, 13, 10, 
	32, 35, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 95, 97, 
	9, 13, 48, 57, 65, 90, 98, 122, 
	-1, 10, 10, 32, 35, 97, 9, 13, 
	116, 111, 109, 32, 9, 13, 32, 40, 
	9, 13, 32, 9, 13, 48, 57, 32, 
	41, 9, 13, 48, 57, 32, 41, 9, 
	13, 32, 9, 13, 32, 40, 9, 13, 
	32, 43, 45, 9, 13, 48, 57, 48, 
	57, 32, 44, 9, 13, 48, 57, 32, 
	44, 9, 13, 32, 43, 45, 9, 13, 
	48, 57, 48, 57, 32, 44, 9, 13, 
	48, 57, 32, 44, 9, 13, 32, 43, 
	45, 9, 13, 48, 57, 48, 57, 32, 
	41, 9, 13, 48, 57, 32, 41, 9, 
	13, 10, 32, 35, 9, 13, 10, 32, 
	35, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 95, 97, 98, 
	105, 9, 13, 48, 57, 65, 90, 99, 
	122, -1, 10, 10, 32, 35, 97, 98, 
	105, 9, 13, 111, 110, 100, 95, 97, 
	99, 103, 49, 51, 32, 9, 13, 32, 
	9, 13, 48, 57, 10, 32, 35, 9, 
	13, 48, 57, 10, 32, 35, 9, 13, 
	48, 57, 10, 32, 35, 9, 13, 48, 
	57, 10, 32, 35, 97, 98, 105, 9, 
	13, 48, 57, 110, 102, 111, 32, 9, 
	13, 32, 97, 9, 13, 116, 111, 109, 
	32, 9, 13, 32, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 45, 61, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	9, 13, 32, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	97, 98, 105, 9, 13, 48, 57, 65, 
	90, 99, 122, 32, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 61, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 61, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 45, 61, 95, 97, 98, 105, 
	9, 13, 48, 57, 65, 90, 99, 122, 
	32, 45, 95, 116, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 111, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 45, 95, 109, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	40, 45, 61, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 111, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 45, 95, 110, 9, 13, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 100, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 45, 48, 95, 98, 103, 9, 13, 
	49, 51, 52, 57, 65, 90, 97, 99, 
	100, 122, 32, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 45, 61, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 61, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	61, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 61, 95, 
	97, 98, 105, 9, 13, 48, 57, 65, 
	90, 99, 122, 32, 45, 95, 110, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	45, 95, 102, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 45, 95, 111, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 32, 45, 61, 95, 97, 9, 
	13, 48, 57, 65, 90, 98, 122, 32, 
	45, 95, 116, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 45, 95, 111, 9, 
	13, 48, 57, 65, 90, 97, 122, 32, 
	45, 95, 109, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	61, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, 10, 32, 35, 9, 
	13, 32, 45, 95, 100, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 45, 95, 
	105, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 114, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 45, 95, 
	101, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 99, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 45, 95, 
	116, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 105, 9, 13, 48, 
	57, 65, 90, 97, 122, 32, 45, 95, 
	111, 9, 13, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 110, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 116, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	111, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 110, 9, 
	13, 48, 57, 65, 90, 97, 122, 100, 
	105, 114, 101, 99, 116, 105, 111, 110, 
	10, 32, 35, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 97, 98, 105, 9, 13, 48, 
	57, 65, 90, 99, 122, 32, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 45, 95, 116, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 111, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	95, 109, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 40, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	40, 45, 95, 97, 98, 105, 9, 13, 
	48, 57, 65, 90, 99, 122, 10, 32, 
	35, 45, 95, 111, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	95, 110, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 95, 100, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 45, 48, 95, 98, 103, 
	9, 13, 49, 51, 52, 57, 65, 90, 
	97, 99, 100, 122, 10, 32, 35, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 97, 98, 105, 9, 13, 
	48, 57, 65, 90, 99, 122, 10, 32, 
	35, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	110, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 102, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 45, 95, 111, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 95, 97, 
	9, 13, 48, 57, 65, 90, 98, 122, 
	10, 32, 35, 45, 95, 97, 98, 105, 
	9, 13, 48, 57, 65, 90, 99, 122, 
	10, 32, 35, 45, 95, 116, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	35, 45, 95, 111, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	95, 109, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 40, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	40, 45, 95, 97, 9, 13, 48, 57, 
	65, 90, 98, 122, 32, 35, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 35, 45, 95, 116, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 116, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	111, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 109, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 45, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 97, 9, 
	13, 48, 57, 65, 90, 98, 122, 10, 
	32, 35, 45, 95, 100, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 105, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	114, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 101, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 45, 95, 99, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 116, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	105, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 111, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 45, 95, 110, 9, 13, 48, 
	57, 65, 90, 97, 122, 48, 57, 32, 
	41, 9, 13, 48, 57, 48, 57, 32, 
	44, 9, 13, 48, 57, 48, 57, 32, 
	44, 9, 13, 48, 57, 10, 32, 35, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 95, 97, 
	9, 13, 48, 57, 65, 90, 98, 122, 
	32, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	116, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 111, 9, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 45, 95, 109, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 40, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 40, 45, 95, 97, 9, 
	13, 48, 57, 65, 90, 98, 122, 32, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 10, 32, 35, 45, 95, 
	101, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 101, 9, 13, 10, 
	32, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 32, 101, 103, 105, 109, 
	9, 13, 10, 32, 35, 40, 9, 13, 
	10, 32, 35, 9, 13, 10, 32, 35, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 9, 13, 10, 32, 
	35, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 9, 13, 10, 32, 35, 
	45, 61, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 95, 97, 
	9, 13, 48, 57, 65, 90, 98, 122, 
	10, 32, 35, 97, 9, 13, 10, 32, 
	35, 95, 97, 98, 105, 9, 13, 48, 
	57, 65, 90, 99, 122, 10, 32, 35, 
	97, 98, 105, 9, 13, 10, 32, 35, 
	97, 98, 105, 9, 13, 48, 57, 10, 
	32, 35, 45, 95, 97, 98, 105, 9, 
	13, 48, 57, 65, 90, 99, 122, 10, 
	32, 35, 45, 61, 95, 97, 98, 105, 
	9, 13, 48, 57, 65, 90, 99, 122, 
	10, 32, 35, 45, 61, 95, 97, 98, 
	105, 9, 13, 48, 57, 65, 90, 99, 
	122, 10, 32, 35, 45, 95, 97, 98, 
	105, 9, 13, 48, 57, 65, 90, 99, 
	122, 10, 32, 35, 40, 45, 95, 97, 
	98, 105, 9, 13, 48, 57, 65, 90, 
	99, 122, 10, 32, 35, 45, 95, 97, 
	98, 105, 9, 13, 48, 57, 65, 90, 
	99, 122, 10, 32, 35, 45, 95, 97, 
	98, 105, 9, 13, 48, 57, 65, 90, 
	99, 122, 10, 32, 35, 40, 45, 95, 
	97, 9, 13, 48, 57, 65, 90, 98, 
	122, 10, 32, 35, 45, 95, 97, 9, 
	13, 48, 57, 65, 90, 98, 122, 10, 
	32, 35, 45, 95, 97, 9, 13, 48, 
	57, 65, 90, 98, 122, 10, 32, 35, 
	40, 45, 95, 97, 9, 13, 48, 57, 
	65, 90, 98, 122, 0
};

static const char _mmp_parser_single_lengths[] = {
	0, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 4, 6, 2, 5, 0, 4, 
	3, 3, 2, 1, 1, 1, 1, 1, 
	2, 3, 4, 3, 4, 5, 5, 2, 
	4, 4, 1, 1, 1, 5, 6, 6, 
	3, 6, 6, 5, 2, 3, 4, 3, 
	5, 5, 5, 4, 5, 5, 5, 5, 
	4, 3, 4, 6, 2, 3, 2, 1, 
	1, 1, 1, 1, 1, 2, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 2, 
	3, 3, 2, 1, 1, 1, 1, 1, 
	2, 2, 5, 5, 7, 6, 6, 6, 
	6, 5, 6, 7, 7, 2, 5, 4, 
	4, 2, 6, 7, 6, 6, 5, 5, 
	4, 6, 5, 2, 0, 3, 1, 1, 
	0, 0, 0, 0, 0, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	5, 1, 1, 1, 1, 1, 4, 2, 
	3, 2, 4, 3, 1, 1, 1, 1, 
	1, 2, 2, 4, 3, 4, 2, 3, 
	5, 3, 3, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 4, 4, 3, 2, 5, 5, 
	2, 3, 3, 6, 1, 1, 1, 2, 
	2, 4, 3, 4, 5, 2, 4, 1, 
	1, 1, 1, 2, 1, 2, 2, 1, 
	2, 3, 0, 2, 2, 3, 0, 2, 
	2, 3, 0, 2, 2, 3, 4, 7, 
	2, 6, 1, 1, 1, 4, 1, 1, 
	3, 3, 3, 6, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 3, 4, 
	3, 1, 2, 5, 5, 5, 8, 3, 
	5, 6, 6, 9, 4, 4, 4, 3, 
	5, 4, 4, 4, 6, 3, 4, 5, 
	6, 6, 9, 4, 4, 4, 3, 5, 
	4, 4, 4, 3, 4, 2, 3, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	6, 6, 6, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 8, 3, 6, 
	6, 6, 5, 6, 9, 6, 6, 6, 
	8, 5, 5, 8, 5, 6, 6, 6, 
	5, 6, 8, 6, 6, 6, 5, 6, 
	7, 4, 5, 6, 6, 6, 5, 5, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 0, 2, 0, 2, 0, 2, 
	5, 6, 3, 6, 6, 6, 5, 6, 
	7, 3, 1, 6, 4, 4, 5, 4, 
	3, 4, 3, 5, 5, 3, 6, 5, 
	4, 7, 6, 6, 8, 9, 9, 8, 
	9, 8, 8, 7, 6, 6, 7
};

static const char _mmp_parser_range_lengths[] = {
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 2, 0, 2, 1, 2, 
	1, 1, 0, 0, 0, 0, 0, 1, 
	1, 4, 4, 1, 4, 4, 4, 0, 
	1, 1, 0, 0, 0, 4, 4, 4, 
	4, 4, 4, 4, 0, 1, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 4, 4, 0, 1, 1, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 1, 1, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 1, 
	1, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 1, 1, 
	1, 0, 4, 4, 4, 4, 4, 4, 
	4, 4, 2, 1, 1, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	1, 4, 4, 4, 0, 0, 0, 0, 
	1, 1, 4, 4, 1, 4, 0, 1, 
	4, 4, 4, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 4, 4, 4, 4, 4, 4, 4, 
	0, 1, 4, 4, 0, 0, 1, 1, 
	4, 4, 1, 4, 4, 0, 1, 0, 
	0, 0, 1, 1, 2, 2, 1, 1, 
	1, 2, 1, 2, 1, 2, 1, 2, 
	1, 2, 1, 2, 1, 1, 4, 4, 
	0, 1, 0, 0, 0, 1, 1, 2, 
	2, 2, 2, 2, 0, 0, 0, 1, 
	1, 0, 0, 0, 1, 4, 4, 4, 
	4, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 0, 1, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	6, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 1, 2, 1, 2, 1, 2, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 0, 4, 1, 4, 1, 1, 
	1, 4, 1, 4, 4, 1, 4, 4, 
	1, 4, 1, 2, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4
};

static const short _mmp_parser_index_offsets[] = {
	0, 0, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 27, 29, 31, 33, 
	35, 37, 40, 44, 46, 48, 50, 52, 
	54, 56, 58, 64, 73, 76, 84, 86, 
	93, 98, 103, 106, 108, 110, 112, 114, 
	117, 121, 129, 138, 143, 152, 162, 172, 
	175, 181, 187, 189, 191, 193, 203, 214, 
	225, 233, 244, 255, 265, 268, 273, 282, 
	290, 300, 310, 320, 329, 339, 349, 359, 
	369, 378, 383, 392, 403, 406, 411, 415, 
	417, 419, 421, 423, 425, 428, 432, 436, 
	438, 440, 442, 445, 449, 451, 453, 455, 
	459, 464, 469, 472, 474, 476, 478, 480, 
	483, 487, 494, 504, 514, 526, 537, 548, 
	559, 570, 580, 591, 603, 615, 618, 625, 
	631, 637, 640, 651, 663, 674, 685, 695, 
	705, 714, 725, 733, 737, 739, 745, 748, 
	752, 754, 756, 758, 760, 762, 765, 769, 
	771, 773, 775, 777, 779, 781, 783, 785, 
	790, 797, 799, 801, 803, 805, 807, 813, 
	816, 821, 828, 837, 845, 847, 849, 851, 
	853, 856, 860, 867, 876, 881, 890, 893, 
	898, 908, 916, 924, 926, 928, 930, 933, 
	937, 939, 941, 943, 945, 947, 949, 951, 
	953, 956, 963, 972, 981, 989, 996, 1006, 
	1016, 1019, 1024, 1032, 1043, 1045, 1047, 1050, 
	1054, 1061, 1070, 1075, 1084, 1094, 1097, 1103, 
	1105, 1107, 1109, 1112, 1116, 1120, 1125, 1129, 
	1132, 1136, 1142, 1144, 1149, 1153, 1159, 1161, 
	1166, 1170, 1176, 1178, 1183, 1187, 1192, 1201, 
	1213, 1216, 1224, 1226, 1228, 1230, 1236, 1239, 
	1243, 1249, 1255, 1261, 1270, 1272, 1274, 1276, 
	1279, 1283, 1285, 1287, 1289, 1292, 1299, 1307, 
	1316, 1324, 1327, 1334, 1344, 1354, 1364, 1377, 
	1385, 1395, 1406, 1417, 1431, 1440, 1449, 1458, 
	1466, 1476, 1485, 1494, 1503, 1516, 1524, 1533, 
	1543, 1554, 1565, 1579, 1588, 1597, 1606, 1614, 
	1624, 1633, 1642, 1651, 1659, 1668, 1671, 1676, 
	1685, 1694, 1703, 1712, 1721, 1730, 1739, 1748, 
	1757, 1768, 1779, 1790, 1792, 1794, 1796, 1798, 
	1800, 1802, 1804, 1806, 1808, 1818, 1831, 1839, 
	1850, 1861, 1872, 1882, 1893, 1907, 1918, 1929, 
	1940, 1955, 1965, 1975, 1988, 1998, 2009, 2020, 
	2031, 2041, 2052, 2065, 2076, 2087, 2098, 2108, 
	2119, 2131, 2140, 2150, 2161, 2172, 2183, 2193, 
	2203, 2214, 2225, 2236, 2247, 2258, 2269, 2280, 
	2291, 2302, 2313, 2315, 2320, 2322, 2327, 2329, 
	2334, 2344, 2355, 2363, 2374, 2385, 2396, 2406, 
	2417, 2429, 2437, 2439, 2450, 2456, 2465, 2472, 
	2478, 2483, 2492, 2497, 2507, 2517, 2522, 2533, 
	2543, 2549, 2561, 2569, 2578, 2591, 2605, 2619, 
	2632, 2646, 2659, 2672, 2684, 2695, 2706
};

static const short _mmp_parser_indicies[] = {
	0, 2, 0, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 11, 1, 11, 
	11, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 18, 1, 
	18, 19, 18, 1, 20, 1, 21, 1, 
	22, 1, 23, 1, 24, 1, 25, 1, 
	26, 1, 27, 26, 28, 29, 26, 1, 
	27, 28, 30, 30, 29, 32, 27, 31, 
	1, 1, 33, 28, 33, 28, 30, 30, 
	32, 33, 31, 1, 31, 1, 35, 34, 
	36, 37, 34, 31, 1, 39, 38, 40, 
	38, 1, 39, 40, 32, 39, 1, 1, 
	39, 40, 41, 1, 42, 1, 43, 1, 
	44, 1, 45, 45, 1, 45, 46, 45, 
	1, 46, 48, 47, 46, 47, 47, 47, 
	1, 47, 49, 50, 47, 47, 47, 47, 
	47, 1, 52, 51, 53, 51, 1, 52, 
	51, 53, 54, 51, 54, 54, 54, 1, 
	56, 55, 53, 54, 57, 55, 54, 54, 
	54, 1, 52, 58, 53, 54, 59, 58, 
	54, 54, 54, 1, 1, 60, 53, 62, 
	61, 53, 63, 61, 1, 60, 64, 53, 
	65, 64, 1, 66, 1, 67, 1, 68, 
	67, 69, 54, 53, 70, 54, 54, 54, 
	54, 54, 1, 72, 71, 53, 70, 54, 
	57, 71, 54, 54, 54, 1, 69, 73, 
	53, 70, 54, 59, 73, 54, 54, 54, 
	1, 70, 70, 54, 70, 54, 54, 54, 
	1, 69, 54, 53, 70, 54, 74, 54, 
	54, 54, 54, 1, 69, 54, 53, 70, 
	54, 75, 54, 54, 54, 54, 1, 76, 
	75, 77, 78, 75, 75, 75, 75, 75, 
	67, 67, 79, 77, 79, 80, 77, 80, 
	67, 81, 78, 78, 75, 78, 75, 75, 
	75, 67, 50, 50, 47, 50, 47, 47, 
	47, 1, 47, 49, 50, 47, 82, 47, 
	47, 47, 47, 1, 47, 49, 50, 47, 
	83, 47, 47, 47, 47, 1, 47, 49, 
	50, 47, 84, 47, 47, 47, 47, 1, 
	85, 49, 50, 47, 85, 47, 47, 47, 
	1, 85, 49, 50, 86, 47, 85, 47, 
	47, 47, 1, 47, 49, 50, 47, 87, 
	47, 47, 47, 47, 1, 47, 49, 50, 
	47, 88, 47, 47, 47, 47, 1, 47, 
	49, 50, 47, 89, 47, 47, 47, 47, 
	1, 89, 90, 50, 47, 89, 47, 47, 
	47, 1, 92, 91, 93, 91, 1, 92, 
	91, 93, 54, 91, 54, 54, 54, 1, 
	1, 96, 95, 93, 97, 98, 95, 97, 
	97, 97, 94, 1, 99, 94, 1, 100, 
	101, 100, 94, 100, 101, 100, 1, 102, 
	1, 103, 1, 104, 1, 105, 1, 106, 
	1, 107, 107, 1, 107, 108, 107, 1, 
	108, 109, 108, 1, 110, 1, 111, 1, 
	112, 1, 113, 113, 1, 113, 114, 113, 
	1, 115, 1, 116, 1, 117, 1, 117, 
	118, 117, 1, 119, 118, 120, 118, 1, 
	119, 120, 121, 119, 1, 1, 119, 120, 
	122, 1, 123, 1, 124, 1, 125, 1, 
	126, 126, 1, 126, 127, 126, 1, 127, 
	47, 127, 47, 47, 47, 1, 129, 128, 
	53, 54, 130, 128, 54, 54, 54, 1, 
	96, 95, 53, 54, 98, 95, 54, 54, 
	54, 1, 69, 54, 53, 70, 54, 131, 
	74, 54, 54, 54, 54, 1, 69, 54, 
	53, 70, 54, 132, 54, 54, 54, 54, 
	1, 69, 54, 53, 70, 54, 133, 54, 
	54, 54, 54, 1, 69, 54, 53, 70, 
	54, 134, 54, 54, 54, 54, 1, 69, 
	54, 53, 70, 54, 135, 54, 54, 54, 
	54, 1, 137, 136, 53, 70, 54, 136, 
	54, 54, 54, 1, 137, 136, 53, 108, 
	70, 54, 136, 54, 54, 54, 1, 139, 
	138, 53, 108, 70, 54, 57, 138, 54, 
	54, 54, 1, 137, 140, 53, 108, 70, 
	54, 59, 140, 54, 54, 54, 1, 1, 
	141, 93, 1, 143, 142, 93, 144, 142, 
	94, 146, 145, 53, 147, 145, 1, 143, 
	142, 53, 144, 142, 1, 102, 66, 1, 
	1, 148, 97, 93, 149, 97, 97, 97, 
	97, 97, 94, 1, 151, 150, 93, 149, 
	97, 98, 150, 97, 97, 97, 94, 153, 
	152, 53, 70, 54, 130, 152, 54, 54, 
	54, 1, 151, 150, 53, 70, 54, 98, 
	150, 54, 54, 54, 1, 1, 154, 149, 
	149, 97, 149, 97, 97, 97, 94, 1, 
	155, 149, 97, 156, 155, 97, 97, 97, 
	94, 155, 70, 54, 156, 155, 54, 54, 
	54, 1, 69, 54, 53, 70, 54, 131, 
	54, 54, 54, 54, 1, 158, 157, 159, 
	161, 161, 157, 160, 1, 162, 162, 163, 
	1, 163, 1, 158, 157, 159, 157, 163, 
	1, 164, 164, 1, 164, 164, 165, 1, 
	166, 1, 167, 1, 168, 1, 169, 1, 
	170, 1, 171, 171, 1, 171, 172, 171, 
	1, 173, 1, 174, 1, 175, 1, 176, 
	1, 177, 1, 178, 1, 179, 1, 180, 
	1, 33, 180, 28, 180, 1, 181, 182, 
	183, 184, 185, 181, 1, 186, 1, 187, 
	1, 188, 1, 189, 1, 190, 1, 192, 
	190, 193, 194, 190, 191, 191, 195, 193, 
	195, 196, 193, 196, 191, 194, 197, 194, 
	197, 197, 197, 191, 197, 196, 198, 197, 
	197, 197, 197, 197, 191, 198, 198, 197, 
	198, 197, 197, 197, 191, 199, 1, 200, 
	1, 201, 1, 202, 1, 203, 203, 1, 
	203, 204, 203, 1, 204, 205, 204, 205, 
	205, 205, 1, 205, 206, 207, 205, 205, 
	205, 205, 205, 1, 209, 208, 210, 208, 
	1, 209, 208, 210, 211, 208, 211, 211, 
	211, 191, 191, 212, 210, 212, 214, 210, 
	214, 213, 215, 211, 210, 216, 211, 211, 
	211, 211, 211, 191, 216, 216, 211, 216, 
	211, 211, 211, 191, 207, 207, 205, 207, 
	205, 205, 205, 1, 217, 1, 218, 1, 
	219, 1, 220, 220, 1, 220, 221, 220, 
	1, 222, 1, 223, 1, 224, 1, 225, 
	1, 226, 1, 227, 1, 228, 1, 229, 
	1, 230, 230, 1, 230, 231, 230, 231, 
	231, 231, 1, 232, 233, 234, 232, 232, 
	232, 232, 232, 1, 232, 233, 234, 232, 
	232, 232, 232, 232, 191, 233, 233, 232, 
	233, 232, 232, 232, 191, 234, 235, 234, 
	235, 235, 235, 191, 237, 236, 238, 239, 
	235, 236, 235, 235, 235, 191, 237, 236, 
	238, 239, 240, 236, 240, 240, 240, 191, 
	191, 241, 238, 241, 243, 238, 243, 242, 
	239, 239, 235, 239, 235, 235, 235, 191, 
	245, 244, 238, 233, 234, 232, 244, 232, 
	232, 232, 191, 246, 1, 247, 1, 248, 
	248, 1, 248, 249, 248, 1, 249, 250, 
	249, 250, 250, 250, 1, 250, 251, 252, 
	250, 250, 250, 250, 250, 1, 254, 253, 
	255, 253, 1, 254, 253, 255, 256, 253, 
	256, 256, 256, 1, 254, 258, 255, 256, 
	259, 258, 256, 256, 256, 257, 191, 260, 
	255, 260, 261, 255, 262, 261, 257, 263, 
	257, 264, 257, 265, 257, 266, 266, 257, 
	266, 267, 266, 257, 267, 267, 268, 257, 
	269, 270, 269, 268, 257, 269, 270, 269, 
	257, 271, 271, 257, 271, 272, 271, 257, 
	272, 273, 274, 272, 275, 257, 275, 257, 
	276, 277, 276, 275, 257, 276, 277, 276, 
	257, 277, 278, 279, 277, 280, 257, 280, 
	257, 281, 282, 281, 280, 257, 281, 282, 
	281, 257, 282, 283, 284, 282, 285, 257, 
	285, 257, 286, 287, 286, 285, 257, 286, 
	287, 286, 257, 289, 288, 290, 288, 257, 
	289, 288, 290, 291, 288, 291, 291, 291, 
	257, 289, 292, 290, 291, 293, 294, 295, 
	292, 291, 291, 291, 257, 257, 296, 290, 
	296, 297, 290, 262, 298, 299, 297, 257, 
	300, 257, 301, 257, 302, 257, 304, 303, 
	303, 303, 303, 257, 305, 305, 257, 305, 
	305, 306, 257, 308, 307, 309, 307, 306, 
	257, 308, 307, 309, 307, 306, 257, 310, 
	308, 290, 308, 306, 257, 310, 311, 290, 
	262, 298, 299, 311, 306, 257, 312, 257, 
	313, 257, 314, 257, 315, 315, 257, 315, 
	316, 315, 257, 317, 257, 318, 257, 319, 
	257, 320, 320, 257, 320, 321, 320, 321, 
	321, 321, 257, 322, 323, 321, 322, 321, 
	321, 321, 257, 322, 323, 324, 321, 322, 
	321, 321, 321, 257, 323, 323, 321, 323, 
	321, 321, 321, 257, 325, 325, 257, 325, 
	326, 325, 326, 326, 326, 257, 328, 327, 
	309, 329, 326, 327, 326, 326, 326, 257, 
	328, 327, 309, 329, 330, 327, 330, 330, 
	330, 257, 331, 328, 290, 329, 330, 328, 
	330, 330, 330, 257, 331, 332, 290, 329, 
	330, 333, 334, 335, 332, 330, 330, 330, 
	257, 329, 329, 326, 329, 326, 326, 326, 
	257, 337, 336, 309, 323, 321, 336, 321, 
	321, 321, 257, 337, 336, 309, 323, 324, 
	321, 336, 321, 321, 321, 257, 338, 337, 
	290, 323, 324, 321, 337, 321, 321, 321, 
	257, 338, 339, 290, 323, 324, 321, 340, 
	341, 342, 339, 321, 321, 321, 257, 322, 
	323, 321, 343, 322, 321, 321, 321, 257, 
	322, 323, 321, 344, 322, 321, 321, 321, 
	257, 322, 323, 321, 345, 322, 321, 321, 
	321, 257, 346, 323, 321, 346, 321, 321, 
	321, 257, 346, 267, 323, 324, 321, 346, 
	321, 321, 321, 257, 322, 323, 321, 347, 
	322, 321, 321, 321, 257, 322, 323, 321, 
	348, 322, 321, 321, 321, 257, 322, 323, 
	321, 349, 322, 321, 321, 321, 257, 322, 
	323, 321, 351, 321, 350, 322, 350, 321, 
	321, 350, 321, 257, 352, 323, 321, 352, 
	321, 321, 321, 257, 352, 323, 324, 321, 
	352, 353, 321, 321, 257, 355, 354, 309, 
	323, 321, 354, 353, 321, 321, 257, 355, 
	354, 309, 323, 324, 321, 354, 353, 321, 
	321, 257, 356, 355, 290, 323, 324, 321, 
	355, 353, 321, 321, 257, 356, 357, 290, 
	323, 324, 321, 340, 341, 342, 357, 353, 
	321, 321, 257, 322, 323, 321, 358, 322, 
	321, 321, 321, 257, 322, 323, 321, 359, 
	322, 321, 321, 321, 257, 322, 323, 321, 
	360, 322, 321, 321, 321, 257, 361, 323, 
	321, 361, 321, 321, 321, 257, 361, 323, 
	324, 321, 362, 361, 321, 321, 321, 257, 
	322, 323, 321, 363, 322, 321, 321, 321, 
	257, 322, 323, 321, 364, 322, 321, 321, 
	321, 257, 322, 323, 321, 365, 322, 321, 
	321, 321, 257, 366, 323, 321, 366, 321, 
	321, 321, 257, 366, 323, 324, 321, 366, 
	321, 321, 321, 257, 257, 367, 309, 296, 
	367, 290, 367, 257, 322, 323, 321, 368, 
	322, 321, 321, 321, 257, 322, 323, 321, 
	369, 322, 321, 321, 321, 257, 322, 323, 
	321, 370, 322, 321, 321, 321, 257, 322, 
	323, 321, 371, 322, 321, 321, 321, 257, 
	322, 323, 321, 372, 322, 321, 321, 321, 
	257, 322, 323, 321, 373, 322, 321, 321, 
	321, 257, 322, 323, 321, 374, 322, 321, 
	321, 321, 257, 322, 323, 321, 375, 322, 
	321, 321, 321, 257, 322, 323, 321, 350, 
	322, 321, 321, 321, 257, 337, 336, 309, 
	323, 321, 343, 336, 321, 321, 321, 257, 
	337, 336, 309, 323, 321, 347, 336, 321, 
	321, 321, 257, 337, 336, 309, 323, 321, 
	358, 336, 321, 321, 321, 257, 376, 257, 
	377, 257, 378, 257, 379, 257, 380, 257, 
	381, 257, 382, 257, 383, 257, 303, 257, 
	384, 291, 290, 385, 291, 291, 291, 291, 
	291, 257, 384, 386, 290, 385, 291, 293, 
	294, 295, 386, 291, 291, 291, 257, 385, 
	385, 291, 385, 291, 291, 291, 257, 384, 
	291, 290, 385, 291, 387, 291, 291, 291, 
	291, 257, 384, 291, 290, 385, 291, 388, 
	291, 291, 291, 291, 257, 384, 291, 290, 
	385, 291, 389, 291, 291, 291, 291, 257, 
	391, 390, 290, 385, 291, 390, 291, 291, 
	291, 257, 391, 390, 290, 267, 385, 291, 
	390, 291, 291, 291, 257, 391, 392, 290, 
	267, 385, 291, 293, 294, 295, 392, 291, 
	291, 291, 257, 384, 291, 290, 385, 291, 
	393, 291, 291, 291, 291, 257, 384, 291, 
	290, 385, 291, 394, 291, 291, 291, 291, 
	257, 384, 291, 290, 385, 291, 395, 291, 
	291, 291, 291, 257, 384, 291, 290, 385, 
	291, 397, 291, 396, 291, 396, 291, 291, 
	396, 291, 257, 399, 398, 290, 385, 291, 
	398, 291, 291, 291, 257, 399, 398, 290, 
	385, 291, 398, 400, 291, 291, 257, 399, 
	401, 290, 385, 291, 293, 294, 295, 401, 
	400, 291, 291, 257, 399, 398, 290, 385, 
	291, 398, 400, 291, 291, 257, 384, 291, 
	290, 385, 291, 402, 291, 291, 291, 291, 
	257, 384, 291, 290, 385, 291, 403, 291, 
	291, 291, 291, 257, 384, 291, 290, 385, 
	291, 404, 291, 291, 291, 291, 257, 406, 
	405, 290, 385, 291, 405, 291, 291, 291, 
	257, 406, 405, 290, 385, 291, 407, 405, 
	291, 291, 291, 257, 406, 408, 290, 385, 
	291, 409, 294, 295, 408, 291, 291, 291, 
	257, 384, 291, 290, 385, 291, 410, 291, 
	291, 291, 291, 257, 384, 291, 290, 385, 
	291, 411, 291, 291, 291, 291, 257, 384, 
	291, 290, 385, 291, 412, 291, 291, 291, 
	291, 257, 414, 413, 290, 385, 291, 413, 
	291, 291, 291, 257, 414, 413, 290, 267, 
	385, 415, 413, 415, 415, 415, 257, 414, 
	416, 290, 267, 385, 415, 417, 416, 415, 
	415, 415, 257, 322, 290, 323, 321, 322, 
	321, 321, 321, 257, 322, 290, 323, 321, 
	343, 322, 321, 321, 321, 257, 384, 291, 
	290, 385, 291, 418, 291, 291, 291, 291, 
	257, 384, 291, 290, 385, 291, 419, 291, 
	291, 291, 291, 257, 384, 291, 290, 385, 
	291, 420, 291, 291, 291, 291, 257, 422, 
	421, 290, 385, 291, 421, 291, 291, 291, 
	257, 422, 421, 290, 385, 415, 421, 415, 
	415, 415, 257, 422, 423, 290, 385, 415, 
	417, 423, 415, 415, 415, 257, 384, 291, 
	290, 385, 291, 424, 291, 291, 291, 291, 
	257, 384, 291, 290, 385, 291, 425, 291, 
	291, 291, 291, 257, 384, 291, 290, 385, 
	291, 426, 291, 291, 291, 291, 257, 384, 
	291, 290, 385, 291, 427, 291, 291, 291, 
	291, 257, 384, 291, 290, 385, 291, 428, 
	291, 291, 291, 291, 257, 384, 291, 290, 
	385, 291, 429, 291, 291, 291, 291, 257, 
	384, 291, 290, 385, 291, 430, 291, 291, 
	291, 291, 257, 384, 291, 290, 385, 291, 
	431, 291, 291, 291, 291, 257, 384, 291, 
	290, 385, 291, 396, 291, 291, 291, 291, 
	257, 432, 257, 433, 434, 433, 432, 257, 
	435, 257, 436, 437, 436, 435, 257, 438, 
	257, 439, 440, 439, 438, 257, 441, 256, 
	255, 442, 256, 256, 256, 256, 256, 191, 
	441, 443, 255, 442, 256, 259, 443, 256, 
	256, 256, 257, 442, 442, 256, 442, 256, 
	256, 256, 191, 441, 256, 255, 442, 256, 
	444, 256, 256, 256, 256, 257, 441, 256, 
	255, 442, 256, 445, 256, 256, 256, 256, 
	257, 441, 256, 255, 442, 256, 446, 256, 
	256, 256, 256, 257, 448, 447, 255, 442, 
	256, 447, 256, 256, 256, 257, 448, 447, 
	255, 267, 442, 256, 447, 256, 256, 256, 
	257, 448, 449, 255, 267, 442, 256, 259, 
	449, 256, 256, 256, 257, 252, 252, 250, 
	252, 250, 250, 250, 1, 68, 67, 451, 
	450, 77, 78, 75, 450, 450, 75, 75, 
	75, 67, 453, 452, 77, 454, 452, 67, 
	81, 78, 78, 75, 78, 75, 75, 75, 
	67, 181, 182, 183, 184, 185, 181, 1, 
	192, 190, 193, 194, 190, 455, 195, 196, 
	193, 196, 455, 209, 208, 210, 211, 208, 
	211, 211, 211, 456, 212, 214, 210, 214, 
	456, 215, 211, 210, 216, 211, 211, 211, 
	211, 211, 456, 237, 236, 238, 239, 240, 
	236, 240, 240, 240, 457, 241, 243, 238, 
	243, 457, 245, 244, 238, 233, 234, 232, 
	244, 232, 232, 232, 457, 254, 258, 255, 
	256, 259, 258, 256, 256, 256, 458, 260, 
	261, 255, 262, 261, 458, 289, 292, 290, 
	291, 293, 294, 295, 292, 291, 291, 291, 
	458, 296, 297, 290, 262, 298, 299, 297, 
	458, 310, 311, 290, 262, 298, 299, 311, 
	306, 458, 331, 332, 290, 329, 330, 333, 
	334, 335, 332, 330, 330, 330, 458, 338, 
	339, 290, 323, 324, 321, 340, 341, 342, 
	339, 321, 321, 321, 458, 356, 357, 290, 
	323, 324, 321, 340, 341, 342, 357, 353, 
	321, 321, 458, 384, 386, 290, 385, 291, 
	293, 294, 295, 386, 291, 291, 291, 458, 
	391, 392, 290, 267, 385, 291, 293, 294, 
	295, 392, 291, 291, 291, 458, 399, 401, 
	290, 385, 291, 293, 294, 295, 401, 400, 
	291, 291, 458, 406, 408, 290, 385, 291, 
	409, 294, 295, 408, 291, 291, 291, 458, 
	414, 416, 290, 267, 385, 415, 417, 416, 
	415, 415, 415, 458, 422, 423, 290, 385, 
	415, 417, 423, 415, 415, 415, 458, 441, 
	443, 255, 442, 256, 259, 443, 256, 256, 
	256, 458, 448, 449, 255, 267, 442, 256, 
	259, 449, 256, 256, 256, 458, 0
};

static const short _mmp_parser_trans_targs_wi[] = {
	1, 0, 2, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 134, 30, 31, 
	35, 29, 32, 33, 34, 130, 32, 33, 
	34, 36, 37, 38, 39, 40, 41, 42, 
	64, 43, 63, 44, 45, 47, 53, 46, 
	45, 57, 46, 57, 48, 49, 48, 50, 
	49, 50, 51, 52, 386, 54, 56, 55, 
	54, 55, 58, 59, 387, 60, 62, 388, 
	61, 389, 65, 66, 67, 68, 69, 70, 
	71, 72, 73, 74, 75, 117, 76, 106, 
	107, 122, 108, 77, 78, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 108, 109, 110, 111, 112, 113, 
	114, 115, 116, 115, 116, 118, 119, 120, 
	121, 119, 120, 121, 123, 126, 124, 125, 
	124, 125, 127, 128, 129, 32, 33, 34, 
	130, 131, 132, 133, 135, 136, 137, 138, 
	139, 140, 141, 142, 143, 144, 145, 146, 
	147, 148, 149, 150, 151, 152, 153, 164, 
	179, 204, 154, 155, 156, 157, 158, 390, 
	391, 159, 161, 392, 160, 162, 163, 165, 
	166, 167, 168, 169, 170, 171, 172, 178, 
	173, 393, 174, 176, 394, 390, 175, 395, 
	177, 180, 181, 182, 183, 184, 185, 186, 
	187, 188, 189, 190, 191, 192, 193, 194, 
	195, 196, 197, 198, 199, 396, 200, 202, 
	203, 397, 390, 201, 203, 398, 205, 206, 
	207, 208, 209, 210, 385, 211, 399, 213, 
	376, 390, 212, 379, 400, 214, 215, 216, 
	217, 218, 219, 220, 221, 222, 223, 224, 
	225, 226, 374, 227, 228, 229, 230, 372, 
	231, 232, 233, 234, 370, 235, 236, 237, 
	238, 401, 240, 324, 239, 327, 333, 341, 
	402, 241, 242, 252, 243, 244, 245, 246, 
	315, 247, 248, 249, 250, 301, 403, 251, 
	253, 254, 255, 256, 257, 258, 259, 260, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 271, 272, 404, 270, 312, 313, 314, 
	273, 274, 405, 275, 276, 281, 291, 277, 
	278, 279, 280, 282, 283, 284, 285, 303, 
	286, 287, 288, 289, 406, 290, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 302, 
	304, 305, 306, 307, 308, 309, 310, 311, 
	316, 317, 318, 319, 320, 321, 322, 323, 
	407, 326, 325, 328, 329, 330, 331, 408, 
	332, 334, 335, 336, 337, 361, 338, 409, 
	340, 339, 342, 343, 344, 345, 410, 355, 
	346, 347, 348, 349, 350, 351, 411, 353, 
	352, 354, 356, 357, 358, 359, 412, 360, 
	362, 363, 364, 365, 366, 367, 368, 369, 
	371, 236, 237, 373, 232, 233, 375, 228, 
	229, 413, 378, 377, 380, 381, 382, 383, 
	414, 384, 59, 387, 61, 388, 52, 390, 
	390, 390, 390
};

static const char _mmp_parser_trans_actions_wi[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 49, 49, 49, 46, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	13, 0, 13, 0, 0, 0, 17, 19, 
	19, 58, 0, 17, 0, 19, 19, 19, 
	0, 0, 0, 0, 0, 17, 17, 58, 
	58, 17, 17, 17, 17, 0, 17, 0, 
	0, 17, 13, 13, 13, 13, 13, 13, 
	13, 13, 0, 0, 0, 0, 0, 19, 
	19, 17, 58, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 17, 17, 17, 17, 17, 
	17, 17, 58, 58, 17, 0, 19, 19, 
	19, 0, 0, 0, 17, 17, 58, 58, 
	17, 17, 17, 17, 17, 9, 9, 9, 
	7, 7, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 41, 
	79, 0, 0, 79, 0, 13, 13, 0, 
	0, 0, 0, 0, 0, 13, 0, 13, 
	0, 82, 0, 17, 82, 39, 0, 97, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	13, 13, 0, 17, 17, 89, 0, 17, 
	55, 73, 35, 0, 13, 85, 0, 0, 
	0, 0, 13, 0, 13, 0, 76, 0, 
	17, 37, 0, 17, 76, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 3, 0, 0, 
	0, 25, 0, 13, 0, 13, 13, 13, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 25, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 13, 13, 0, 0, 17, 17, 
	17, 17, 55, 70, 17, 55, 55, 55, 
	13, 13, 67, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 43, 13, 13, 67, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 0, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	67, 13, 13, 13, 13, 13, 13, 67, 
	13, 13, 13, 13, 13, 13, 13, 67, 
	52, 13, 13, 13, 13, 13, 67, 13, 
	13, 13, 13, 13, 13, 13, 67, 13, 
	13, 13, 13, 13, 13, 13, 67, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	3, 5, 5, 3, 5, 5, 3, 5, 
	5, 93, 17, 17, 17, 17, 17, 17, 
	93, 17, 58, 58, 19, 19, 19, 31, 
	33, 27, 29
};

static const char _mmp_parser_to_state_actions[] = {
	0, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 0, 0, 15, 61, 61, 0, 
	21, 21, 21, 0, 21, 0, 21, 21, 
	0, 21, 0, 21, 0, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 61, 61, 21, 0, 0, 0, 
	0, 0, 0, 21, 21, 0, 0, 21, 
	21, 21, 0, 0, 21, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 11, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 0, 0, 0, 15, 0, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	11, 0, 0, 15, 15, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 11, 11, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 11, 0, 0, 
	0, 0, 15, 0, 11, 11, 11, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 11, 
	11, 0, 0, 0, 0, 0, 0, 11, 
	11, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 21, 0, 64, 0, 
	0, 15, 0, 0, 11, 0, 0, 15, 
	0, 11, 0, 1, 11, 0, 1, 0, 
	0, 1, 0, 11, 11, 0, 0
};

static const char _mmp_parser_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
};

static const short _mmp_parser_eof_trans[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 192, 192, 
	192, 192, 192, 192, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 192, 192, 214, 
	192, 192, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 192, 192, 192, 192, 192, 
	192, 243, 192, 192, 0, 0, 0, 0, 
	0, 0, 0, 0, 258, 192, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	192, 258, 192, 258, 258, 258, 258, 258, 
	258, 0, 0, 0, 0, 0, 0, 456, 
	456, 457, 457, 457, 458, 458, 458, 459, 
	459, 459, 459, 459, 459, 459, 459, 459, 
	459, 459, 459, 459, 459, 459, 459
};

static const int mmp_parser_start = 1;
static const int mmp_parser_first_final = 386;
static const int mmp_parser_error = 0;

static const int mmp_parser_en_group_stmt_scanner = 390;
static const int mmp_parser_en_main = 1;

#line 246 "NanorexMMPImportExport.rl"


// static data

char const NanorexMMPImportExport::_s_bondOrderString[NUM_BOND_TYPES] = {
	'1', '2', '3', 'a', 'g', 'c'
};

char const
NanorexMMPImportExport::_s_bondOrderNameString[NUM_BOND_TYPES][16] =
{
	"single", "double", "triple", "aromatic", "graphitic", "carbomeric"
};

char const NanorexMMPImportExport::_s_hybridizationName[8][8] = {
	"none", "sp", "sp2", "sp3", "X-hyb4", "X-hyb5", "X-hyb6", "X-hyb7"
};


/* CONSTRUCTOR */
NanorexMMPImportExport::NanorexMMPImportExport()
{
	reset();
}

/* DESTRUCTOR */
NanorexMMPImportExport::~NanorexMMPImportExport()
{
}


/* FUNCTION: reset */
void NanorexMMPImportExport::reset(void)
{
	line = 0;
	atomPtr = NULL;
	bondPtr = NULL;
	foundAtomList.clear();
	targetAtomList.clear();
	molPtr = NULL;
	molSetPtr = NULL;
	while(!molSetPtrStack.empty()) molSetPtrStack.pop();
	
    // initialize the ragel engine
	
#line 1364 "NanorexMMPImportExport.cpp"
	{
	cs = mmp_parser_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}
#line 291 "NanorexMMPImportExport.rl"
}


/* FUNCTION: importFromFile */
NXCommandResult*
NanorexMMPImportExport::
importFromFile(NXMoleculeSet *rootMoleculeSetPtr,
               NXDataStoreInfo *dataStoreInfo,
               const std::string& theFilename,
               int /*frameSetId*/, int /*frameIndex*/)
{
	bool success = true;
	NXCommandResult *result = new NXCommandResult();
	result->setResult(NX_CMD_SUCCESS);
	
	ifstream mmpfile(theFilename.c_str(), ios::in);
	if(!mmpfile) {
		populateCommandResult(result,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
		success = false;
	}
	else {
		filename = theFilename;
		success = readMMP(mmpfile, rootMoleculeSetPtr);
	}
	
	// Set the meta information about the data store.
	if (success) {
		dataStoreInfo->setIsSingleStructure(true);
	}
	
	return result;
}


/* FUNCTION: readMMP */
bool NanorexMMPImportExport::readMMP(istream& instream,
                                     NXMoleculeSet *rootMoleculeSetPtr)
{
	reset();
	
	p = RagelIstreamPtr(instream);
	pe = RagelIstreamPtr(instream, 0, ios::end);
	eof = pe;
	
	molSetPtr = rootMoleculeSetPtr;
	molSetPtrStack.push(molSetPtr);
	
    /// @todo handle first 'group' statement and molSetPtrStack initialization
	
    // Ragel parser implementation
	bool success = true;
	
#line 1427 "NanorexMMPImportExport.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _mmp_parser_actions + _mmp_parser_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 13:
#line 1 "NanorexMMPImportExport.rl"
	{ts = p;}
	break;
#line 1448 "NanorexMMPImportExport.cpp"
		}
	}

	_keys = _mmp_parser_trans_keys + _mmp_parser_key_offsets[cs];
	_trans = _mmp_parser_index_offsets[cs];

	_klen = _mmp_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _mmp_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _mmp_parser_indicies[_trans];
_eof_trans:
	cs = _mmp_parser_trans_targs_wi[_trans];

	if ( _mmp_parser_trans_actions_wi[_trans] == 0 )
		goto _again;

	_acts = _mmp_parser_actions + _mmp_parser_trans_actions_wi[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 1:
#line 49 "NanorexMMPImportExport.rl"
	{intval = intval*10 + ((*p)-'0');}
	break;
	case 2:
#line 53 "NanorexMMPImportExport.rl"
	{intval=-intval;}
	break;
	case 3:
#line 57 "NanorexMMPImportExport.rl"
	{stringval.clear(); stringval = stringval + (*p); doubleval = HUGE_VAL;}
	break;
	case 4:
#line 58 "NanorexMMPImportExport.rl"
	{stringval = stringval + (*p);}
	break;
	case 5:
#line 59 "NanorexMMPImportExport.rl"
	{doubleval = atof(stringval.c_str());}
	break;
	case 7:
#line 77 "NanorexMMPImportExport.rl"
	{stringval = stringval + (*p); }
	break;
	case 9:
#line 85 "NanorexMMPImportExport.rl"
	{stringval2 = stringval2 + (*p); }
	break;
	case 10:
#line 235 "NanorexMMPImportExport.rl"
	{ {stack[top++] = cs; cs = 390; goto _again;} }
	break;
	case 14:
#line 1 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 15:
#line 221 "NanorexMMPImportExport.rl"
	{act = 1;}
	break;
	case 16:
#line 222 "NanorexMMPImportExport.rl"
	{act = 2;}
	break;
	case 17:
#line 223 "NanorexMMPImportExport.rl"
	{act = 3;}
	break;
	case 18:
#line 224 "NanorexMMPImportExport.rl"
	{act = 4;}
	break;
	case 19:
#line 221 "NanorexMMPImportExport.rl"
	{te = p;p--;{ cerr << "info opengroup" << endl;}}
	break;
	case 20:
#line 222 "NanorexMMPImportExport.rl"
	{te = p;p--;{ cerr << "mol stmt" << endl; }}
	break;
	case 21:
#line 223 "NanorexMMPImportExport.rl"
	{te = p;p--;{ {cs = stack[--top]; goto _again;} }}
	break;
	case 22:
#line 224 "NanorexMMPImportExport.rl"
	{te = p;p--;{ {stack[top++] = cs; cs = 390; goto _again;} }}
	break;
	case 23:
#line 221 "NanorexMMPImportExport.rl"
	{{p = ((te))-1;}{ cerr << "info opengroup" << endl;}}
	break;
	case 24:
#line 222 "NanorexMMPImportExport.rl"
	{{p = ((te))-1;}{ cerr << "mol stmt" << endl; }}
	break;
	case 25:
#line 224 "NanorexMMPImportExport.rl"
	{{p = ((te))-1;}{ {stack[top++] = cs; cs = 390; goto _again;} }}
	break;
	case 26:
#line 1 "NanorexMMPImportExport.rl"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 1:
	{{p = ((te))-1;} cerr << "info opengroup" << endl;}
	break;
	case 2:
	{{p = ((te))-1;} cerr << "mol stmt" << endl; }
	break;
	case 3:
	{{p = ((te))-1;} {cs = stack[--top]; goto _again;} }
	break;
	case 4:
	{{p = ((te))-1;} {stack[top++] = cs; cs = 390; goto _again;} }
	break;
	default: break;
	}
	}
	break;
#line 1616 "NanorexMMPImportExport.cpp"
		}
	}

_again:
	_acts = _mmp_parser_actions + _mmp_parser_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 48 "NanorexMMPImportExport.rl"
	{intval=0;}
	break;
	case 6:
#line 76 "NanorexMMPImportExport.rl"
	{stringval.clear(); stringval = stringval + (*p);}
	break;
	case 8:
#line 84 "NanorexMMPImportExport.rl"
	{stringval2.clear();  stringval2 = stringval2 + (*p);}
	break;
	case 11:
#line 1 "NanorexMMPImportExport.rl"
	{ts = 0;}
	break;
	case 12:
#line 1 "NanorexMMPImportExport.rl"
	{act = 0;}
	break;
#line 1645 "NanorexMMPImportExport.cpp"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _mmp_parser_eof_trans[cs] > 0 ) {
		_trans = _mmp_parser_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}
#line 345 "NanorexMMPImportExport.rl"
	
    // End-of-parsing sanity checks
	if(molSetPtrStack.size() != 1) {
		NXLOG_WARNING("NanorexMMPImportExport",
		              "At least one group has no matching egroup statement");
	}
	return success;
}


/* FUNCTION: createNewMoleculeSet */
void NanorexMMPImportExport::createNewMoleculeSet(void)
{
	if(molSetPtr != NULL) {
		NXMoleculeSet *newMolSetPtr = new NXMoleculeSet;
		newMolSetPtr->setTitle(stringval);
		molSetPtr->addChild(newMolSetPtr);
		molSetPtrStack.push(newMolSetPtr);
		molSetPtr = newMolSetPtr;
	}
}


/* FUNCTION: closeMoleculeSet */
void NanorexMMPImportExport::closeMoleculeSet(void)
{
	molSetPtrStack.pop();
	molSetPtr = (molSetPtrStack.size() == 0) ? NULL : molSetPtrStack.top();
}


/* FUNCTION: createNewMolecule */
inline void NanorexMMPImportExport::createNewMolecule(void)
{ 
	atomPtr = NULL;
	bondPtr = NULL;
	molPtr = NULL;
	molPtr = molSetPtr->newMolecule();
}


/* FUNCTION: applyAtomType */
void NanorexMMPImportExport::applyAtomType(string const& keyStr,
                                           string const& valueStr)
{
	if(molPtr != NULL && atomPtr != NULL) {
		if(keyStr == "atomtype") { // hybridization info
			if(valueStr == "sp") atomPtr->SetHyb(1);
			else if(valueStr == "sp2") atomPtr->SetHyb(2);
			else if(valueStr == "sp2_g") atomPtr->SetHyb(2);
			else if(valueStr == "sp3") atomPtr->SetHyb(3);
			else if(valueStr == "sp3d") atomPtr->SetHyb(3);
            // else ignore
		}
	}
}




/* FUNCTION: exportToFile */
NXCommandResult*
NanorexMMPImportExport::
exportToFile(NXMoleculeSet *molSetPtr,
             NXDataStoreInfo */*dataStoreInfo*/,
             const std::string& theFilename,
             int /*frameSetId*/, int /*frameIndex*/)
{
	NXCommandResult *result = new NXCommandResult();
	result->setResult(NX_CMD_SUCCESS);
	
	ofstream mmpfile(theFilename.c_str(), ios::out);
	if(!mmpfile) {
		populateCommandResult(result,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
	}
	else {
		PrintMoleculeSet(mmpfile, molSetPtr);
		mmpfile.close();
	}
	return result;
}


/* FUNCTION: GetAtomID */
/* static */
int NanorexMMPImportExport::GetAtomID(OBAtom *atomPtr)
{
	NXAtomData *atomIDData = 
		static_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	int atomID = atomIDData->GetIdx();
	return atomID;
}


/* FUNCTION: GetAtomRenderStyleCode */
/* static */
string const&
NanorexMMPImportExport::GetAtomRenderStyleCode(OBAtom *const atomPtr)
{
	NXAtomData *atomDataPtr =
		static_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	string const& atomStyle = atomDataPtr->GetRenderStyleCode();
	return atomStyle;
}


/* FUNCTION: PrintMolecule */
/* static */
void NanorexMMPImportExport::PrintMolecule(ostream& o,
                                           OBMol *const molPtr)
{
	set<int> prevAtomIdx;
	set<int> prevBondIdx; /// @todo - replace with simple bond count
	
	o << "mol (" << molPtr->GetTitle() << ')' << endl;
	
	OBAtomIterator atomIter;
	OBAtom *atomPtr = NULL;
    // For each atom ...
	for(atomPtr = molPtr->BeginAtom(atomIter);
	    atomPtr != NULL;
	    atomPtr = molPtr->NextAtom(atomIter))
	{
        // ... write the 'atom' line ...
		int atomID = GetAtomID(atomPtr);
		o << "atom " << atomID << " (" << atomPtr->GetAtomicNum() << ") " << '('
			<< atomPtr->x() << ',' << atomPtr->y() << ',' << atomPtr->z()
			<< ") " << GetAtomRenderStyleCode(atomPtr) << endl;
		
		if(atomPtr->GetHyb() != 0) {
			o << "info atom atomtype = "
				<< _s_hybridizationName[atomPtr->GetHyb()];
		}
		
        // ... write the 'bond' lines for this atom ...
        // ... first sort bonds by type ...
		OBBondIterator bondIter;
		OBBond *bondPtr = NULL;
		vector<int> bondCategories[6];
		for(bondPtr = atomPtr->BeginBond(bondIter);
		    bondPtr != NULL;
		    bondPtr = atomPtr->NextBond(bondIter))
		{
            // write bond statement only if target atom was previously written
			OBAtom *nbrAtomPtr = bondPtr->GetNbrAtom(atomPtr);
			int nbrAtomID = GetAtomID(nbrAtomPtr);
			if(prevAtomIdx.find(nbrAtomID) != prevAtomIdx.end()) {
				int bondOrder = bondPtr->GetBondOrder();
				bondCategories[bondOrder-1].push_back(nbrAtomID);
                // record bond for sanity check at end
				prevBondIdx.insert(bondPtr->GetIdx());
			}
		}
		
        // ... write the bonds, one line per type ...
		for(int i=0; i<6; ++i) {
			int J = bondCategories[i].size();
			if(J > 0) {
				o << "bond" << _s_bondOrderString[i];
				for(int j=0; j<J; ++j)
					o << ' ' << bondCategories[i][j];
				o  << endl;
			}
		}
		
        // record atom as 'previously written'
		prevAtomIdx.insert(atomID);
	}
	
    // debug diagnostics
	ostringstream debugMsg;
	debugMsg << "# atoms check ";
	if(molPtr->NumAtoms() == prevAtomIdx.size())
		debugMsg << "PASS ("  << molPtr->NumAtoms() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumAtoms() << " != " << prevAtomIdx.size()<< endl;
	
	debugMsg << "# bonds check ";
	if(molPtr->NumBonds() == prevBondIdx.size())
		debugMsg << "PASS (" << molPtr->NumBonds() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumBonds() << " != " << prevBondIdx.size()<< endl;
	
	debugMsg.flush();
	NXLOG_DEBUG("NanorexMMPImportExport::PrintMoleculeSet",
	            debugMsg.str().c_str());
}


/* FUNCTION: PrintMoleculeSet */
/* static */
void NanorexMMPImportExport::PrintMoleculeSet(ostream& o,
                                              NXMoleculeSet *const molSetPtr)
{
	// Iterate over all child molecules
	OBMolIterator molIter;
	for(molIter = molSetPtr->moleculesBegin();
	    molIter != molSetPtr->moleculesEnd();
	    ++molIter)
	{
		PrintMolecule(o, *molIter);
	}
	
    // Iterate over all child molecule sets
	NXMoleculeSetIterator molSetIter;
	for(molSetIter = molSetPtr->childrenBegin();
	    molSetIter != molSetPtr->childrenEnd();
	    ++molSetIter)
	{
		PrintMoleculeSet(o, *molSetIter);
	}
}


/* FUNCTION: populateCommandResult */
void
NanorexMMPImportExport::populateCommandResult (NXCommandResult* result,
                                               const string& message)
{
	result->setResult(NX_PLUGIN_REPORTS_ERROR);
	vector<QString> resultVector;
	resultVector.push_back("OpenBabelImportExport");
	resultVector.push_back(message.c_str());
	result->setParamVector(resultVector);
}

Q_EXPORT_PLUGIN2 (NanorexMMPImportExport, NanorexMMPImportExport)

