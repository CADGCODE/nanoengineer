#line 1 "NanorexMMPImportExport.rl"
// *********************** GENERATED BY RAGEL 6.0 *******************
// ** Do not edit directly. Edit NanorexMMPImportExport.rl instead **
// ******************************************************************

// Copyright 2008 Nanorex, Inc.  See LICENSE file for details.

#include "NanorexMMPImportExport.h"
#include <QFileInfo>

#define VERBOSE

#if defined(VERBOSE)
#define CDEBUG(x) DEBUG_MSG(filename, line, x)
inline void DEBUG_MSG(string const& filename, int line, string const& s)
{
	ostringstream msg;
	msg << line << ": " << s;
	NXLOG_INFO(filename, msg.str());
/*    Nanorex::NXLogger* logger = Nanorex::NXLogger::Instance();
    if (logger != 0)
        logger->log(Nanorex::NXLogLevel_Info, filename, msg.str());*/
}
#else
#define CDEBUG(x)
#endif




#line 134 "NanorexMMPImportExport.rl"


#line 138 "NanorexMMPImportExport.rl"

#line 37 "NanorexMMPImportExport.cpp"
static const char _mmp_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 7, 1, 
	8, 1, 9, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 20, 1, 21, 1, 
	23, 1, 31, 1, 33, 1, 35, 1, 
	37, 1, 38, 1, 40, 1, 51, 1, 
	52, 1, 53, 2, 0, 26, 2, 0, 
	27, 2, 0, 28, 2, 0, 29, 2, 
	0, 32, 2, 0, 37, 2, 0, 46, 
	2, 0, 50, 2, 5, 15, 2, 5, 
	16, 2, 5, 17, 2, 6, 7, 2, 
	6, 8, 2, 8, 0, 2, 9, 10, 
	2, 9, 11, 2, 9, 12, 2, 11, 
	18, 2, 37, 0, 2, 38, 39, 3, 
	0, 19, 45, 3, 0, 22, 47, 3, 
	0, 24, 44, 3, 0, 25, 32, 3, 
	0, 30, 43, 3, 0, 34, 49, 3, 
	0, 36, 48, 3, 6, 8, 0, 3, 
	9, 11, 18, 3, 12, 0, 32, 3, 
	20, 0, 46, 3, 41, 0, 42, 4, 
	9, 12, 0, 32, 4, 12, 0, 24, 
	44, 4, 12, 0, 30, 43, 4, 12, 
	0, 34, 49, 4, 35, 0, 36, 48, 
	5, 9, 12, 0, 24, 44, 5, 9, 
	12, 0, 30, 43, 5, 9, 12, 0, 
	34, 49, 5, 11, 18, 0, 19, 45, 
	6, 9, 11, 18, 0, 19, 45
};

static const short _mmp_parser_key_offsets[] = {
	0, 0, 4, 5, 6, 7, 8, 9, 
	10, 11, 12, 15, 20, 22, 24, 26, 
	28, 30, 33, 37, 38, 39, 40, 41, 
	42, 43, 44, 50, 61, 71, 73, 83, 
	92, 94, 102, 107, 113, 115, 116, 117, 
	118, 119, 124, 129, 141, 154, 167, 172, 
	184, 188, 192, 193, 194, 195, 196, 197, 
	199, 204, 206, 208, 210, 212, 214, 219, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	240, 245, 250, 252, 254, 256, 258, 260, 
	262, 264, 270, 273, 274, 279, 281, 283, 
	285, 287, 289, 291, 293, 295, 300, 305, 
	307, 310, 311, 314, 315, 317, 330, 343, 
	355, 368, 380, 393, 407, 421, 435, 448, 
	462, 476, 490, 504, 517, 530, 535, 547, 
	553, 555, 558, 559, 560, 561, 562, 563, 
	569, 570, 571, 572, 573, 574, 579, 584, 
	595, 597, 602, 603, 604, 605, 609, 614, 
	615, 616, 617, 622, 627, 633, 639, 641, 
	644, 647, 649, 651, 653, 655, 657, 659, 
	665, 667, 669, 671, 673, 678, 683, 694, 
	707, 720, 725, 734, 736, 738, 741, 742, 
	755, 765, 777, 790, 802, 815, 818, 819, 
	824, 826, 828, 830, 834, 839, 841, 843, 
	845, 850, 855, 857, 859, 861, 870, 874, 
	876, 883, 886, 891, 893, 895, 897, 899, 
	901, 904, 908, 909, 910, 911, 912, 913, 
	914, 915, 916, 921, 927, 932, 933, 934, 
	938, 943, 954, 967, 980, 985, 997, 999, 
	1012, 1025, 1037, 1050, 1062, 1075, 1077, 1078, 
	1079, 1080, 1084, 1090, 1096, 1101, 1107, 1114, 
	1119, 1123, 1128, 1136, 1138, 1145, 1150, 1158, 
	1160, 1167, 1172, 1180, 1182, 1189, 1194, 1199, 
	1211, 1213, 1226, 1239, 1251, 1264, 1271, 1273, 
	1280, 1287, 1294, 1296, 1303, 1310, 1317, 1319, 
	1326, 1333, 1340, 1346, 1347, 1348, 1349, 1355, 
	1359, 1365, 1372, 1379, 1381, 1388, 1389, 1390, 
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1401, 
	1407, 1413, 1419, 1426, 1431, 1433, 1440, 1446, 
	1447, 1448, 1449, 1450, 1451, 1457, 1463, 1465, 
	1477, 1488, 1501, 1514, 1519, 1531, 1544, 1545, 
	1546, 1547, 1548, 1552, 1557, 1570, 1583, 1596, 
	1601, 1613, 1615, 1628, 1641, 1653, 1666, 1678, 
	1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 
	1699, 1704, 1705, 1706, 1707, 1711, 1716, 1717, 
	1718, 1719, 1720, 1721, 1722, 1726, 1731, 1732, 
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1743, 
	1754, 1767, 1780, 1792, 1805, 1816, 1829, 1842, 
	1844, 1856, 1869, 1870, 1872, 1875, 1878, 1880, 
	1885, 1896
};

static const char _mmp_parser_trans_keys[] = {
	32, 109, 9, 13, 109, 112, 102, 111, 
	114, 109, 97, 116, 32, 9, 13, 32, 
	9, 13, 48, 57, 48, 57, 48, 57, 
	48, 57, 48, 57, 48, 57, 32, 9, 
	13, 32, 114, 9, 13, 101, 113, 117, 
	105, 114, 101, 100, 10, 32, 35, 59, 
	9, 13, 10, 32, 35, 43, 45, 59, 
	103, 9, 13, 48, 57, 10, 32, 35, 
	43, 45, 59, 9, 13, 48, 57, -1, 
	10, 10, 32, 35, 43, 45, 103, 9, 
	13, 48, 57, 10, 32, 35, 43, 45, 
	9, 13, 48, 57, 48, 57, 10, 32, 
	35, 46, 9, 13, 48, 57, 10, 32, 
	35, 9, 13, 10, 32, 35, 103, 9, 
	13, -1, 10, 114, 111, 117, 112, 9, 
	32, 40, 11, 13, 9, 32, 40, 11, 
	13, 9, 32, 86, 95, 11, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 41, 
	45, 95, 11, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 41, 45, 95, 11, 
	13, 48, 57, 65, 90, 97, 122, 10, 
	32, 35, 9, 13, 10, 32, 35, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	32, 101, 9, 13, 32, 101, 9, 13, 
	110, 100, 10, 110, 100, 10, 49, 10, 
	32, 35, 9, 13, 10, 35, 10, 114, 
	10, 111, 10, 117, 10, 112, 10, 32, 
	40, 9, 13, 10, 32, 67, 9, 13, 
	10, 108, 10, 105, 10, 112, 10, 98, 
	10, 111, 10, 97, 10, 114, 10, 100, 
	10, 32, 41, 9, 13, 10, 32, 35, 
	9, 13, 10, 35, -1, 10, 10, 103, 
	10, 114, 10, 111, 10, 117, 10, 112, 
	10, 32, 35, 40, 9, 13, -1, 10, 
	35, 10, 10, 32, 67, 9, 13, 10, 
	108, 10, 105, 10, 112, 10, 98, 10, 
	111, 10, 97, 10, 114, 10, 100, 10, 
	32, 41, 9, 13, 10, 32, 35, 9, 
	13, 10, 35, -1, 10, 35, 10, -1, 
	10, 35, 10, -1, 10, 10, 32, 35, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 45, 95, 11, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 45, 95, 11, 13, 48, 57, 
	65, 90, 97, 122, 9, 32, 41, 45, 
	95, 11, 13, 48, 57, 65, 90, 97, 
	122, 9, 32, 41, 45, 95, 105, 11, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 41, 45, 95, 101, 11, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 41, 
	45, 95, 119, 11, 13, 48, 57, 65, 
	90, 97, 122, 9, 32, 41, 45, 95, 
	11, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 41, 45, 68, 95, 11, 13, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	41, 45, 95, 97, 11, 13, 48, 57, 
	65, 90, 98, 122, 9, 32, 41, 45, 
	95, 116, 11, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 41, 45, 95, 97, 
	11, 13, 48, 57, 65, 90, 98, 122, 
	9, 32, 41, 45, 95, 11, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 41, 
	45, 95, 11, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 9, 13, 10, 
	32, 35, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 101, 9, 
	13, -1, 10, -1, 10, 101, 103, 114, 
	111, 117, 112, 10, 32, 35, 40, 9, 
	13, 103, 114, 111, 117, 112, 9, 32, 
	40, 11, 13, 9, 32, 40, 11, 13, 
	9, 32, 95, 11, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 9, 32, 86, 
	11, 13, 105, 101, 119, 9, 32, 11, 
	13, 9, 32, 68, 11, 13, 97, 116, 
	97, 9, 32, 41, 11, 13, 10, 32, 
	35, 9, 13, -1, 10, 32, 101, 9, 
	13, -1, 10, 32, 101, 9, 13, 103, 
	110, -1, 10, 110, -1, 10, 100, -1, 
	10, 10, 103, 10, 114, 10, 111, 10, 
	117, 10, 112, 10, 32, 35, 40, 9, 
	13, 10, 114, 10, 111, 10, 117, 10, 
	112, 10, 32, 40, 9, 13, 10, 32, 
	40, 9, 13, 10, 32, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	41, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 41, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 9, 13, 10, 35, 95, 
	48, 57, 65, 90, 97, 122, 10, 110, 
	10, 100, -1, 10, 35, 10, 10, 32, 
	35, 45, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, 10, 35, 45, 95, 48, 
	57, 65, 90, 97, 122, 10, 32, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 10, 32, 35, 45, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, 10, 32, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 41, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, -1, 
	10, 35, 10, 10, 32, 86, 9, 13, 
	10, 105, 10, 101, 10, 119, 10, 32, 
	9, 13, 10, 32, 68, 9, 13, 10, 
	97, 10, 116, 10, 97, 10, 32, 41, 
	9, 13, 10, 32, 35, 9, 13, 10, 
	35, 103, 110, -1, 10, 10, 32, 35, 
	69, 101, 9, 13, 48, 57, 43, 45, 
	48, 57, 48, 57, 10, 32, 35, 9, 
	13, 48, 57, 32, 9, 13, 32, 9, 
	13, 48, 57, 48, 57, 48, 57, 48, 
	57, 48, 57, 48, 57, 32, 9, 13, 
	32, 112, 9, 13, 114, 101, 102, 101, 
	114, 114, 101, 100, 10, 32, 35, 9, 
	13, 10, 32, 35, 109, 9, 13, 10, 
	32, 109, 9, 13, 111, 108, 9, 32, 
	11, 13, 9, 32, 40, 11, 13, 9, 
	32, 95, 11, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 41, 45, 95, 11, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 41, 45, 95, 11, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 9, 
	13, 10, 32, 35, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, -1, 10, 10, 
	32, 35, 45, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 9, 32, 45, 95, 11, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 95, 11, 13, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	41, 45, 95, 11, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 116, 111, 109, 
	9, 32, 11, 13, 9, 32, 11, 13, 
	48, 57, 9, 32, 11, 13, 48, 57, 
	9, 32, 40, 11, 13, 9, 32, 11, 
	13, 48, 57, 9, 32, 41, 11, 13, 
	48, 57, 9, 32, 41, 11, 13, 9, 
	32, 11, 13, 9, 32, 40, 11, 13, 
	9, 32, 43, 45, 11, 13, 48, 57, 
	48, 57, 9, 32, 44, 11, 13, 48, 
	57, 9, 32, 44, 11, 13, 9, 32, 
	43, 45, 11, 13, 48, 57, 48, 57, 
	9, 32, 44, 11, 13, 48, 57, 9, 
	32, 44, 11, 13, 9, 32, 43, 45, 
	11, 13, 48, 57, 48, 57, 9, 32, 
	41, 11, 13, 48, 57, 9, 32, 41, 
	11, 13, 10, 32, 35, 9, 13, 10, 
	32, 35, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 10, 32, 35, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 45, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 45, 95, 11, 13, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 45, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 41, 11, 13, 48, 57, 48, 
	57, 9, 32, 41, 11, 13, 48, 57, 
	9, 32, 41, 11, 13, 48, 57, 9, 
	32, 44, 11, 13, 48, 57, 48, 57, 
	9, 32, 44, 11, 13, 48, 57, 9, 
	32, 44, 11, 13, 48, 57, 9, 32, 
	44, 11, 13, 48, 57, 48, 57, 9, 
	32, 44, 11, 13, 48, 57, 9, 32, 
	44, 11, 13, 48, 57, 9, 32, 41, 
	11, 13, 48, 57, 9, 32, 11, 13, 
	48, 57, 111, 110, 100, 95, 97, 99, 
	103, 49, 51, 9, 32, 11, 13, 9, 
	32, 11, 13, 48, 57, 10, 32, 35, 
	9, 13, 48, 57, 10, 32, 35, 9, 
	13, 48, 57, -1, 10, 10, 32, 35, 
	9, 13, 48, 57, 100, 105, 114, 101, 
	99, 116, 105, 111, 110, 9, 32, 11, 
	13, 9, 32, 11, 13, 48, 57, 9, 
	32, 11, 13, 48, 57, 9, 32, 11, 
	13, 48, 57, 10, 32, 35, 9, 13, 
	48, 57, 10, 32, 35, 9, 13, -1, 
	10, 10, 32, 35, 9, 13, 48, 57, 
	9, 32, 11, 13, 48, 57, 103, 114, 
	111, 117, 112, 10, 32, 35, 40, 9, 
	13, 10, 32, 35, 40, 9, 13, -1, 
	10, 9, 32, 41, 95, 11, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 95, 
	11, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 41, 45, 95, 11, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 41, 
	45, 95, 11, 13, 48, 57, 65, 90, 
	97, 122, 10, 32, 35, 9, 13, 9, 
	32, 45, 95, 11, 13, 48, 57, 65, 
	90, 97, 122, 9, 32, 41, 45, 95, 
	11, 13, 48, 57, 65, 90, 97, 122, 
	114, 111, 117, 112, 9, 32, 11, 13, 
	9, 32, 40, 11, 13, 9, 32, 67, 
	86, 95, 11, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 41, 45, 95, 11, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 41, 45, 95, 11, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 9, 
	13, 10, 32, 35, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, -1, 10, 10, 
	32, 35, 45, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, 10, 32, 35, 45, 
	95, 9, 13, 48, 57, 65, 90, 97, 
	122, 9, 32, 45, 95, 11, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 95, 11, 13, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	41, 45, 95, 11, 13, 48, 57, 65, 
	90, 97, 122, 108, 105, 112, 98, 111, 
	97, 114, 100, 9, 32, 41, 11, 13, 
	105, 101, 119, 9, 32, 11, 13, 9, 
	32, 68, 11, 13, 97, 116, 97, 110, 
	102, 111, 9, 32, 11, 13, 9, 32, 
	111, 11, 13, 112, 101, 110, 103, 114, 
	111, 117, 112, 9, 32, 11, 13, 9, 
	32, 95, 11, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 61, 95, 11, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 45, 61, 95, 11, 13, 48, 57, 
	65, 90, 97, 122, 9, 32, 45, 95, 
	11, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 45, 61, 95, 11, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 95, 
	11, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 32, 35, 
	45, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, 9, 32, 45, 95, 
	11, 13, 48, 57, 65, 90, 97, 122, 
	10, 32, 35, 45, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, 10, 10, 103, 
	-1, 10, 101, -1, 10, 101, 10, 103, 
	10, 32, 101, 9, 13, 10, 32, 35, 
	97, 98, 101, 103, 105, 109, 9, 13, 
	10, 32, 109, 9, 13, 0
};

static const char _mmp_parser_single_lengths[] = {
	0, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 4, 7, 6, 2, 6, 5, 
	0, 4, 3, 4, 2, 1, 1, 1, 
	1, 3, 3, 4, 5, 5, 3, 4, 
	2, 2, 1, 1, 1, 1, 1, 2, 
	3, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 4, 3, 1, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 2, 
	3, 1, 3, 1, 2, 5, 5, 4, 
	5, 4, 5, 6, 6, 6, 5, 6, 
	6, 6, 6, 5, 5, 3, 4, 4, 
	2, 3, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 1, 3, 3, 3, 
	2, 3, 1, 1, 1, 2, 3, 1, 
	1, 1, 3, 3, 4, 4, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 3, 3, 3, 5, 
	5, 3, 3, 2, 2, 3, 1, 5, 
	4, 4, 5, 4, 5, 3, 1, 3, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	3, 3, 2, 2, 2, 5, 2, 0, 
	3, 1, 1, 0, 0, 0, 0, 0, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 4, 3, 1, 1, 2, 
	3, 3, 5, 5, 3, 4, 2, 5, 
	5, 4, 5, 4, 5, 2, 1, 1, 
	1, 2, 2, 2, 3, 2, 3, 3, 
	2, 3, 4, 0, 3, 3, 4, 0, 
	3, 3, 4, 0, 3, 3, 3, 4, 
	2, 5, 5, 4, 5, 3, 0, 3, 
	3, 3, 0, 3, 3, 3, 0, 3, 
	3, 3, 2, 1, 1, 1, 4, 2, 
	2, 3, 3, 2, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	2, 2, 3, 3, 2, 3, 2, 1, 
	1, 1, 1, 1, 4, 4, 2, 4, 
	3, 5, 5, 3, 4, 5, 1, 1, 
	1, 1, 2, 3, 5, 5, 5, 3, 
	4, 2, 5, 5, 4, 5, 4, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 1, 1, 1, 2, 3, 1, 1, 
	1, 1, 1, 1, 2, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 3, 
	5, 5, 4, 5, 3, 5, 5, 2, 
	4, 5, 1, 2, 3, 3, 2, 3, 
	9, 3
};

static const char _mmp_parser_range_lengths[] = {
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 2, 2, 0, 2, 2, 
	1, 2, 1, 1, 0, 0, 0, 0, 
	0, 1, 1, 4, 4, 4, 1, 4, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 4, 1, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 1, 4, 
	0, 1, 0, 0, 0, 1, 1, 0, 
	0, 0, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 1, 1, 4, 4, 
	4, 1, 3, 0, 0, 0, 0, 4, 
	3, 4, 4, 4, 4, 0, 0, 1, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	1, 1, 0, 0, 0, 2, 1, 1, 
	2, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 1, 
	1, 4, 4, 4, 1, 4, 0, 4, 
	4, 4, 4, 4, 4, 0, 0, 0, 
	0, 1, 2, 2, 1, 2, 2, 1, 
	1, 1, 2, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 1, 4, 
	0, 4, 4, 4, 4, 2, 1, 2, 
	2, 2, 1, 2, 2, 2, 1, 2, 
	2, 2, 2, 0, 0, 0, 1, 1, 
	2, 2, 2, 0, 2, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 2, 
	2, 2, 2, 1, 0, 2, 2, 0, 
	0, 0, 0, 0, 1, 1, 0, 4, 
	4, 4, 4, 1, 4, 4, 0, 0, 
	0, 0, 1, 1, 4, 4, 4, 1, 
	4, 0, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 4, 
	4, 4, 4, 4, 4, 4, 4, 0, 
	4, 4, 0, 0, 0, 0, 0, 1, 
	1, 1
};

static const short _mmp_parser_index_offsets[] = {
	0, 0, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 23, 27, 29, 31, 33, 
	35, 37, 40, 44, 46, 48, 50, 52, 
	54, 56, 58, 64, 74, 83, 86, 95, 
	103, 105, 112, 117, 123, 126, 128, 130, 
	132, 134, 139, 144, 153, 163, 173, 178, 
	187, 191, 195, 197, 199, 201, 203, 205, 
	208, 213, 216, 219, 222, 225, 228, 233, 
	238, 241, 244, 247, 250, 253, 256, 259, 
	262, 267, 272, 275, 278, 281, 284, 287, 
	290, 293, 299, 303, 305, 310, 313, 316, 
	319, 322, 325, 328, 331, 334, 339, 344, 
	347, 351, 353, 357, 359, 362, 372, 382, 
	391, 401, 410, 420, 431, 442, 453, 463, 
	474, 485, 496, 507, 517, 527, 532, 541, 
	547, 550, 554, 556, 558, 560, 562, 564, 
	570, 572, 574, 576, 578, 580, 585, 590, 
	598, 601, 606, 608, 610, 612, 616, 621, 
	623, 625, 627, 632, 637, 643, 649, 652, 
	656, 660, 663, 666, 669, 672, 675, 678, 
	684, 687, 690, 693, 696, 701, 706, 714, 
	724, 734, 739, 746, 749, 752, 756, 758, 
	768, 776, 785, 795, 804, 814, 818, 820, 
	825, 828, 831, 834, 838, 843, 846, 849, 
	852, 857, 862, 865, 868, 871, 879, 883, 
	885, 891, 894, 898, 900, 902, 904, 906, 
	908, 911, 915, 917, 919, 921, 923, 925, 
	927, 929, 931, 936, 942, 947, 949, 951, 
	955, 960, 968, 978, 988, 993, 1002, 1005, 
	1015, 1025, 1034, 1044, 1053, 1063, 1066, 1068, 
	1070, 1072, 1076, 1081, 1086, 1091, 1096, 1102, 
	1107, 1111, 1116, 1123, 1125, 1131, 1136, 1143, 
	1145, 1151, 1156, 1163, 1165, 1171, 1176, 1181, 
	1190, 1193, 1203, 1213, 1222, 1232, 1238, 1240, 
	1246, 1252, 1258, 1260, 1266, 1272, 1278, 1280, 
	1286, 1292, 1298, 1303, 1305, 1307, 1309, 1315, 
	1319, 1324, 1330, 1336, 1339, 1345, 1347, 1349, 
	1351, 1353, 1355, 1357, 1359, 1361, 1363, 1367, 
	1372, 1377, 1382, 1388, 1393, 1396, 1402, 1407, 
	1409, 1411, 1413, 1415, 1417, 1423, 1429, 1432, 
	1441, 1449, 1459, 1469, 1474, 1483, 1493, 1495, 
	1497, 1499, 1501, 1505, 1510, 1520, 1530, 1540, 
	1545, 1554, 1557, 1567, 1577, 1586, 1596, 1605, 
	1615, 1617, 1619, 1621, 1623, 1625, 1627, 1629, 
	1631, 1636, 1638, 1640, 1642, 1646, 1651, 1653, 
	1655, 1657, 1659, 1661, 1663, 1667, 1672, 1674, 
	1676, 1678, 1680, 1682, 1684, 1686, 1688, 1692, 
	1700, 1710, 1720, 1729, 1739, 1747, 1757, 1767, 
	1770, 1779, 1789, 1791, 1794, 1798, 1802, 1805, 
	1810, 1821
};

static const short _mmp_parser_indicies[] = {
	0, 2, 0, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 11, 1, 11, 
	11, 12, 1, 13, 1, 14, 1, 15, 
	1, 16, 1, 17, 1, 18, 18, 1, 
	18, 19, 18, 1, 20, 1, 21, 1, 
	22, 1, 23, 1, 24, 1, 25, 1, 
	26, 1, 27, 26, 28, 29, 26, 1, 
	27, 30, 28, 31, 31, 29, 33, 30, 
	32, 1, 27, 30, 28, 31, 31, 29, 
	30, 32, 1, 1, 34, 28, 34, 35, 
	28, 31, 31, 33, 35, 32, 1, 34, 
	35, 28, 31, 31, 35, 32, 1, 32, 
	1, 37, 36, 38, 39, 36, 32, 1, 
	41, 40, 42, 40, 1, 41, 40, 42, 
	33, 40, 1, 1, 41, 42, 43, 1, 
	44, 1, 45, 1, 46, 1, 47, 47, 
	48, 47, 1, 49, 49, 50, 49, 1, 
	50, 50, 52, 51, 50, 51, 51, 51, 
	1, 53, 53, 54, 55, 56, 53, 56, 
	56, 56, 1, 57, 57, 58, 59, 60, 
	57, 60, 60, 60, 1, 62, 61, 63, 
	61, 1, 62, 61, 63, 64, 61, 64, 
	64, 64, 1, 65, 66, 65, 1, 67, 
	68, 67, 1, 69, 1, 70, 1, 71, 
	70, 72, 1, 73, 1, 71, 74, 70, 
	76, 75, 77, 75, 70, 76, 77, 70, 
	71, 78, 70, 71, 79, 70, 71, 80, 
	70, 71, 81, 70, 71, 81, 82, 81, 
	70, 71, 82, 83, 82, 70, 71, 84, 
	70, 71, 85, 70, 71, 86, 70, 71, 
	87, 70, 71, 88, 70, 71, 89, 70, 
	71, 90, 70, 71, 91, 70, 71, 91, 
	92, 91, 70, 94, 93, 95, 93, 70, 
	94, 95, 70, 70, 97, 96, 71, 98, 
	70, 71, 99, 70, 71, 100, 70, 71, 
	101, 70, 71, 102, 70, 103, 102, 104, 
	105, 102, 70, 70, 103, 106, 104, 103, 
	70, 71, 105, 107, 105, 70, 71, 108, 
	70, 71, 109, 70, 71, 110, 70, 71, 
	111, 70, 71, 112, 70, 71, 113, 70, 
	71, 114, 70, 71, 115, 70, 71, 115, 
	116, 115, 70, 103, 117, 104, 117, 70, 
	103, 104, 70, 70, 94, 118, 95, 94, 
	70, 70, 76, 119, 77, 76, 70, 1, 
	62, 63, 121, 120, 122, 123, 124, 120, 
	124, 124, 124, 1, 62, 125, 63, 126, 
	127, 125, 127, 127, 127, 1, 126, 126, 
	126, 127, 126, 127, 127, 127, 1, 129, 
	128, 130, 126, 127, 128, 127, 127, 127, 
	1, 59, 59, 59, 60, 59, 60, 60, 
	60, 1, 131, 131, 132, 59, 60, 131, 
	60, 60, 60, 1, 53, 53, 54, 55, 
	56, 133, 53, 56, 56, 56, 1, 131, 
	131, 132, 59, 60, 134, 131, 60, 60, 
	60, 1, 131, 131, 132, 59, 60, 135, 
	131, 60, 60, 60, 1, 136, 136, 132, 
	59, 60, 136, 60, 60, 60, 1, 137, 
	137, 58, 59, 138, 60, 137, 60, 60, 
	60, 1, 131, 131, 132, 59, 60, 139, 
	131, 60, 60, 60, 1, 131, 131, 132, 
	59, 60, 140, 131, 60, 60, 60, 1, 
	131, 131, 132, 59, 60, 141, 131, 60, 
	60, 60, 1, 142, 142, 143, 59, 60, 
	142, 60, 60, 60, 1, 144, 144, 145, 
	59, 60, 144, 60, 60, 60, 1, 147, 
	146, 148, 146, 1, 147, 146, 148, 64, 
	146, 64, 64, 64, 1, 1, 151, 150, 
	152, 150, 149, 1, 153, 149, 1, 153, 
	154, 149, 155, 1, 156, 1, 157, 1, 
	158, 1, 159, 1, 160, 159, 161, 162, 
	159, 1, 163, 1, 164, 1, 165, 1, 
	166, 1, 167, 1, 168, 168, 169, 168, 
	1, 170, 170, 171, 170, 1, 171, 171, 
	51, 171, 51, 51, 51, 1, 1, 160, 
	161, 162, 162, 172, 162, 1, 173, 1, 
	174, 1, 175, 1, 176, 176, 176, 1, 
	176, 176, 177, 176, 1, 178, 1, 179, 
	1, 180, 1, 180, 180, 181, 180, 1, 
	160, 181, 161, 181, 1, 1, 183, 182, 
	184, 182, 149, 1, 183, 182, 185, 182, 
	149, 155, 69, 1, 1, 153, 186, 149, 
	1, 153, 187, 149, 70, 188, 187, 71, 
	189, 70, 71, 190, 70, 71, 191, 70, 
	71, 192, 70, 71, 193, 70, 194, 193, 
	195, 196, 193, 70, 71, 197, 70, 71, 
	198, 70, 71, 199, 70, 71, 200, 70, 
	71, 201, 202, 201, 70, 71, 203, 204, 
	203, 70, 71, 204, 205, 204, 205, 205, 
	205, 70, 71, 206, 207, 208, 209, 206, 
	209, 209, 209, 70, 71, 210, 211, 212, 
	213, 210, 213, 213, 213, 70, 215, 214, 
	216, 214, 70, 215, 216, 217, 217, 217, 
	217, 70, 71, 218, 70, 71, 73, 70, 
	70, 215, 219, 216, 215, 70, 221, 220, 
	222, 223, 224, 220, 224, 224, 224, 70, 
	215, 216, 225, 226, 226, 226, 226, 70, 
	71, 225, 225, 226, 225, 226, 226, 226, 
	70, 228, 227, 229, 225, 226, 227, 226, 
	226, 226, 70, 71, 212, 212, 213, 212, 
	213, 213, 213, 70, 71, 230, 231, 212, 
	213, 230, 213, 213, 213, 70, 70, 194, 
	232, 195, 194, 70, 71, 196, 233, 196, 
	70, 71, 234, 70, 71, 235, 70, 71, 
	236, 70, 71, 237, 237, 70, 71, 237, 
	238, 237, 70, 71, 239, 70, 71, 240, 
	70, 71, 241, 70, 71, 241, 242, 241, 
	70, 194, 243, 195, 243, 70, 194, 195, 
	70, 155, 72, 1, 1, 147, 148, 245, 
	244, 246, 248, 248, 244, 247, 1, 249, 
	249, 250, 1, 250, 1, 245, 244, 246, 
	244, 250, 1, 251, 251, 1, 251, 251, 
	252, 1, 253, 1, 254, 1, 255, 1, 
	256, 1, 257, 1, 258, 258, 1, 258, 
	259, 258, 1, 260, 1, 261, 1, 262, 
	1, 263, 1, 264, 1, 265, 1, 266, 
	1, 267, 1, 34, 267, 28, 267, 1, 
	269, 268, 270, 271, 268, 1, 274, 273, 
	271, 273, 272, 276, 275, 277, 275, 278, 
	278, 278, 275, 278, 278, 279, 278, 275, 
	279, 279, 280, 279, 280, 280, 280, 275, 
	281, 281, 282, 283, 284, 281, 284, 284, 
	284, 275, 285, 285, 286, 287, 288, 285, 
	288, 288, 288, 275, 290, 289, 291, 289, 
	275, 290, 289, 291, 292, 289, 292, 292, 
	292, 275, 275, 290, 291, 294, 293, 295, 
	296, 297, 293, 297, 297, 297, 275, 290, 
	298, 291, 299, 300, 298, 300, 300, 300, 
	275, 299, 299, 299, 300, 299, 300, 300, 
	300, 275, 302, 301, 303, 299, 300, 301, 
	300, 300, 300, 275, 287, 287, 287, 288, 
	287, 288, 288, 288, 275, 304, 304, 305, 
	287, 288, 304, 288, 288, 288, 275, 1, 
	306, 270, 307, 1, 308, 1, 309, 1, 
	310, 310, 310, 1, 310, 310, 310, 311, 
	1, 312, 312, 312, 313, 1, 314, 314, 
	315, 314, 1, 315, 315, 315, 316, 1, 
	317, 317, 318, 317, 319, 1, 317, 317, 
	318, 317, 1, 320, 320, 320, 1, 321, 
	321, 322, 321, 1, 322, 322, 323, 324, 
	322, 325, 1, 325, 1, 326, 326, 327, 
	326, 328, 1, 326, 326, 327, 326, 1, 
	329, 329, 330, 331, 329, 332, 1, 332, 
	1, 333, 333, 334, 333, 335, 1, 333, 
	333, 334, 333, 1, 336, 336, 337, 338, 
	336, 339, 1, 339, 1, 340, 340, 341, 
	340, 342, 1, 340, 340, 341, 340, 1, 
	344, 343, 345, 343, 1, 344, 343, 345, 
	346, 343, 346, 346, 346, 1, 1, 344, 
	345, 348, 347, 349, 350, 351, 347, 351, 
	351, 351, 1, 344, 352, 345, 353, 354, 
	352, 354, 354, 354, 1, 353, 353, 353, 
	354, 353, 354, 354, 354, 1, 356, 355, 
	357, 353, 354, 355, 354, 354, 354, 1, 
	340, 340, 341, 340, 342, 1, 358, 1, 
	359, 359, 360, 359, 361, 1, 359, 359, 
	360, 359, 361, 1, 333, 333, 334, 333, 
	335, 1, 362, 1, 363, 363, 364, 363, 
	365, 1, 363, 363, 364, 363, 365, 1, 
	326, 326, 327, 326, 328, 1, 366, 1, 
	367, 367, 368, 367, 369, 1, 367, 367, 
	368, 367, 369, 1, 317, 317, 318, 317, 
	319, 1, 312, 312, 312, 313, 1, 370, 
	1, 371, 1, 372, 1, 374, 373, 373, 
	373, 373, 1, 375, 375, 375, 1, 375, 
	375, 375, 376, 1, 378, 377, 379, 377, 
	380, 1, 382, 381, 383, 381, 376, 1, 
	1, 382, 383, 378, 377, 379, 377, 380, 
	1, 384, 1, 385, 1, 386, 1, 387, 
	1, 388, 1, 389, 1, 390, 1, 391, 
	1, 392, 1, 393, 393, 393, 1, 393, 
	393, 393, 394, 1, 395, 395, 395, 396, 
	1, 395, 395, 395, 397, 1, 399, 398, 
	400, 398, 401, 1, 399, 398, 400, 398, 
	1, 1, 399, 400, 399, 398, 400, 398, 
	401, 1, 395, 395, 395, 396, 1, 402, 
	1, 403, 1, 404, 1, 405, 1, 406, 
	1, 408, 407, 409, 410, 407, 1, 412, 
	411, 413, 414, 411, 1, 1, 412, 413, 
	415, 415, 416, 417, 415, 417, 417, 417, 
	1, 415, 415, 417, 415, 417, 417, 417, 
	1, 418, 418, 419, 420, 421, 418, 421, 
	421, 421, 1, 422, 422, 416, 423, 424, 
	422, 424, 424, 424, 1, 412, 416, 413, 
	416, 1, 423, 423, 423, 424, 423, 424, 
	424, 424, 1, 425, 425, 426, 423, 424, 
	425, 424, 424, 424, 1, 427, 1, 428, 
	1, 429, 1, 430, 1, 431, 431, 431, 
	1, 432, 432, 433, 432, 1, 433, 433, 
	435, 436, 434, 433, 434, 434, 434, 1, 
	437, 437, 438, 439, 440, 437, 440, 440, 
	440, 1, 441, 441, 442, 443, 444, 441, 
	444, 444, 444, 1, 446, 445, 447, 445, 
	1, 446, 445, 447, 448, 445, 448, 448, 
	448, 1, 1, 446, 447, 450, 449, 451, 
	452, 453, 449, 453, 453, 453, 1, 446, 
	454, 447, 455, 456, 454, 456, 456, 456, 
	1, 455, 455, 455, 456, 455, 456, 456, 
	456, 1, 458, 457, 459, 455, 456, 457, 
	456, 456, 456, 1, 443, 443, 443, 444, 
	443, 444, 444, 444, 1, 460, 460, 461, 
	443, 444, 460, 444, 444, 444, 1, 462, 
	1, 463, 1, 464, 1, 465, 1, 466, 
	1, 467, 1, 468, 1, 469, 1, 469, 
	469, 442, 469, 1, 470, 1, 471, 1, 
	472, 1, 473, 473, 473, 1, 473, 473, 
	474, 473, 1, 475, 1, 476, 1, 469, 
	1, 477, 1, 478, 1, 479, 1, 480, 
	480, 480, 1, 480, 480, 481, 480, 1, 
	482, 1, 483, 1, 484, 1, 485, 1, 
	486, 1, 487, 1, 488, 1, 489, 1, 
	490, 490, 490, 1, 490, 490, 491, 490, 
	491, 491, 491, 1, 492, 492, 493, 495, 
	494, 492, 494, 494, 494, 1, 496, 496, 
	497, 499, 498, 496, 498, 498, 498, 1, 
	497, 497, 497, 498, 497, 498, 498, 498, 
	1, 500, 500, 497, 501, 498, 500, 498, 
	498, 498, 1, 499, 499, 502, 499, 502, 
	502, 502, 1, 504, 503, 505, 506, 507, 
	503, 507, 507, 507, 1, 509, 508, 510, 
	511, 512, 508, 512, 512, 512, 1, 1, 
	509, 510, 511, 511, 511, 512, 511, 512, 
	512, 512, 1, 514, 513, 515, 511, 512, 
	513, 512, 512, 512, 1, 71, 70, 71, 
	516, 70, 70, 97, 517, 96, 70, 188, 
	518, 187, 71, 519, 70, 521, 520, 522, 
	520, 70, 269, 268, 270, 523, 524, 525, 
	526, 527, 271, 268, 1, 274, 273, 271, 
	273, 528, 0
};

static const short _mmp_parser_trans_targs_wi[] = {
	1, 0, 2, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 29, 201, 28, 32, 
	33, 37, 30, 31, 34, 35, 36, 197, 
	34, 35, 36, 38, 39, 40, 41, 42, 
	43, 42, 43, 44, 107, 45, 46, 105, 
	106, 45, 46, 105, 106, 47, 48, 100, 
	101, 49, 53, 49, 50, 51, 52, 386, 
	54, 55, 56, 57, 387, 98, 59, 60, 
	61, 62, 63, 64, 65, 66, 67, 68, 
	69, 70, 71, 72, 73, 74, 388, 96, 
	75, 388, 77, 78, 79, 80, 81, 386, 
	82, 84, 83, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 95, 97, 99, 
	102, 48, 100, 103, 104, 102, 103, 104, 
	102, 48, 100, 45, 46, 108, 109, 110, 
	111, 111, 112, 113, 114, 115, 116, 117, 
	116, 117, 118, 119, 196, 120, 148, 149, 
	195, 121, 122, 123, 124, 125, 126, 127, 
	128, 136, 137, 129, 130, 131, 132, 133, 
	134, 135, 134, 135, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	151, 150, 152, 153, 389, 155, 156, 157, 
	158, 159, 390, 181, 183, 161, 162, 163, 
	164, 165, 166, 165, 166, 167, 168, 169, 
	179, 180, 168, 169, 179, 180, 170, 391, 
	173, 175, 172, 174, 176, 391, 173, 177, 
	178, 177, 178, 176, 391, 173, 168, 169, 
	182, 184, 185, 186, 187, 188, 189, 190, 
	191, 192, 193, 194, 34, 35, 36, 197, 
	198, 199, 200, 202, 203, 204, 205, 206, 
	207, 208, 209, 210, 211, 212, 213, 214, 
	215, 216, 217, 218, 219, 393, 237, 221, 
	392, 220, 220, 392, 222, 223, 224, 225, 
	226, 227, 228, 235, 236, 227, 228, 235, 
	236, 229, 392, 230, 231, 232, 392, 230, 
	233, 234, 232, 233, 234, 232, 392, 230, 
	227, 228, 392, 239, 240, 241, 242, 243, 
	244, 282, 244, 245, 246, 247, 248, 281, 
	249, 249, 250, 251, 278, 252, 253, 254, 
	277, 254, 255, 274, 256, 257, 258, 273, 
	258, 259, 270, 260, 261, 262, 269, 263, 
	392, 264, 265, 266, 392, 264, 267, 268, 
	266, 267, 268, 266, 392, 264, 271, 261, 
	262, 272, 275, 257, 258, 276, 279, 253, 
	254, 280, 284, 285, 286, 287, 293, 288, 
	289, 290, 392, 291, 292, 290, 392, 291, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	302, 303, 304, 305, 310, 306, 307, 392, 
	308, 309, 312, 313, 314, 315, 316, 317, 
	392, 318, 319, 317, 392, 318, 319, 320, 
	323, 321, 322, 323, 324, 325, 322, 324, 
	325, 322, 323, 327, 328, 329, 330, 331, 
	331, 332, 333, 344, 353, 334, 335, 342, 
	343, 334, 335, 342, 343, 336, 392, 337, 
	338, 339, 392, 337, 340, 341, 339, 340, 
	341, 339, 392, 337, 334, 335, 345, 346, 
	347, 348, 349, 350, 351, 352, 354, 355, 
	356, 357, 358, 359, 360, 362, 363, 364, 
	365, 366, 367, 368, 369, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	377, 378, 379, 380, 377, 380, 381, 382, 
	392, 383, 384, 385, 382, 392, 383, 384, 
	385, 382, 392, 383, 58, 76, 154, 160, 
	52, 386, 171, 238, 283, 311, 326, 361, 
	392
};

static const unsigned char _mmp_parser_trans_actions_wi[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 95, 147, 95, 92, 
	0, 1, 0, 0, 0, 0, 0, 41, 
	41, 0, 0, 0, 0, 104, 104, 17, 
	101, 0, 0, 0, 19, 0, 71, 0, 
	0, 47, 47, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 62, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 65, 0, 
	0, 1, 0, 0, 0, 0, 0, 68, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	107, 167, 107, 17, 101, 0, 0, 19, 
	23, 155, 23, 21, 21, 101, 19, 19, 
	21, 0, 19, 19, 19, 19, 21, 21, 
	0, 0, 0, 131, 0, 0, 47, 74, 
	47, 1, 0, 0, 0, 0, 0, 0, 
	59, 0, 0, 0, 0, 0, 0, 0, 
	41, 41, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 59, 0, 0, 0, 0, 0, 
	0, 41, 41, 0, 0, 0, 104, 104, 
	17, 101, 0, 0, 0, 19, 0, 71, 
	0, 0, 0, 0, 107, 167, 107, 17, 
	101, 0, 19, 23, 155, 23, 21, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 98, 15, 13, 
	13, 13, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 163, 0, 0, 
	55, 0, 1, 57, 0, 0, 0, 0, 
	0, 104, 104, 17, 101, 0, 0, 0, 
	19, 0, 127, 0, 0, 107, 192, 107, 
	17, 101, 0, 0, 19, 23, 172, 23, 
	21, 21, 80, 0, 0, 0, 0, 0, 
	25, 5, 0, 0, 0, 0, 0, 5, 
	27, 0, 0, 0, 0, 0, 0, 29, 
	5, 0, 0, 0, 0, 0, 31, 5, 
	0, 0, 0, 0, 0, 33, 5, 0, 
	119, 0, 0, 151, 216, 151, 17, 101, 
	0, 0, 19, 110, 210, 110, 0, 11, 
	89, 5, 0, 11, 86, 5, 0, 11, 
	83, 5, 0, 0, 0, 37, 0, 0, 
	0, 35, 159, 35, 5, 0, 77, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 0, 0, 123, 
	0, 9, 0, 0, 0, 0, 0, 45, 
	187, 45, 45, 0, 143, 0, 0, 0, 
	0, 0, 104, 104, 17, 101, 0, 0, 
	19, 21, 21, 0, 0, 0, 0, 43, 
	0, 0, 0, 0, 0, 104, 104, 17, 
	101, 0, 0, 0, 19, 0, 139, 0, 
	0, 107, 204, 107, 17, 101, 0, 0, 
	19, 23, 182, 23, 21, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 104, 17, 101, 104, 
	0, 0, 19, 0, 21, 21, 0, 107, 
	198, 107, 17, 101, 0, 135, 0, 0, 
	19, 23, 177, 23, 0, 0, 0, 0, 
	47, 113, 47, 0, 0, 0, 0, 0, 
	53
};

static const unsigned char _mmp_parser_to_state_actions[] = {
	0, 49, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 49, 0, 0, 49, 49, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 49, 49, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 49, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 49, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 39, 0, 0, 39, 
	0, 0, 39, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 3, 0, 
	0, 0, 0, 0, 3, 0, 0, 0, 
	3, 0, 0, 0, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 3, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 49, 0, 0, 0, 0, 0, 
	116, 0
};

static const unsigned char _mmp_parser_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	51, 0
};

static const short _mmp_parser_eof_trans[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 273, 276, 276, 276, 
	276, 276, 276, 276, 276, 276, 276, 276, 
	276, 276, 276, 276, 276, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 529
};

static const int mmp_parser_start = 1;
static const int mmp_parser_first_final = 386;
static const int mmp_parser_error = 0;

static const int mmp_parser_en_group_mol_struct_stmt_scanner = 392;
static const int mmp_parser_en_main = 1;

#line 139 "NanorexMMPImportExport.rl"


// static data

char const NanorexMMPImportExport::_s_bondOrderString[NUM_BOND_TYPES] = {
	'1', '2', '3', 'a', 'g', 'c'
};

char const
NanorexMMPImportExport::_s_bondOrderNameString[NUM_BOND_TYPES][16] =
{
	"single", "double", "triple", "aromatic", "graphitic", "carbomeric"
};

char const NanorexMMPImportExport::_s_hybridizationName[8][8] = {
	"none", "sp", "sp2", "sp3", "X-hyb4", "X-hyb5", "X-hyb6", "X-hyb7"
};


/* CONSTRUCTOR */
NanorexMMPImportExport::NanorexMMPImportExport()
{
	reset();
}

/* DESTRUCTOR */
NanorexMMPImportExport::~NanorexMMPImportExport()
{
}


/* FUNCTION: reset */
void NanorexMMPImportExport::reset(void)
{
	lineNum = 0;
	atomPtr = NULL;
	bondPtr = NULL;
	foundAtomList.clear();
	targetAtomList.clear();
	molPtr = NULL;
	molSetPtr = NULL;
	while(!molSetPtrStack.empty()) molSetPtrStack.pop();
	stackSize = 2;
	stack.resize(stackSize, 0);
	
    // initialize the ragel engine
	
#line 1108 "NanorexMMPImportExport.cpp"
	{
	cs = mmp_parser_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}
#line 186 "NanorexMMPImportExport.rl"
}


/* FUNCTION: importFromFile */
NXCommandResult*
NanorexMMPImportExport::
importFromFile(NXMoleculeSet *rootMoleculeSetPtr,
               NXDataStoreInfo *dataStoreInfo,
               const std::string& theFilename,
               int /*frameSetId*/, int /*frameIndex*/)
{
	bool success = true;
	NXCommandResult *result = new NXCommandResult();
	result->setResult(NX_CMD_SUCCESS);
	
	ifstream mmpfile(theFilename.c_str(), ios::in);
	if(!mmpfile) {
		populateCommandResult(result,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
		success = false;
	}
	else {
		inputFilename = theFilename;
		success = readMMP(mmpfile, rootMoleculeSetPtr);
	}
	
	// Set the meta information about the data store.
	if (success) {
		dataStoreInfo->setIsSingleStructure(true);
	}
	
	return result;
}


/* FUNCTION: readMMP */
bool NanorexMMPImportExport::readMMP(istream& instream,
                                     NXMoleculeSet *rootMoleculeSetPtr)
{
	reset();
	
	p = RagelIstreamPtr(instream);
	pe = RagelIstreamPtr(instream, 0, ios::end);
	eof = pe;
	
	molSetPtr = rootMoleculeSetPtr;
	// molSetPtrStack.push(molSetPtr);
	
    /// @todo handle first 'group' statement and molSetPtrStack initialization
	
    // Ragel parser implementation
	bool success = true;
	
#line 1171 "NanorexMMPImportExport.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _mmp_parser_actions + _mmp_parser_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 40:
#line 1 "NanorexMMPImportExport.rl"
	{ts = p;}
	break;
#line 1192 "NanorexMMPImportExport.cpp"
		}
	}

	_keys = _mmp_parser_trans_keys + _mmp_parser_key_offsets[cs];
	_trans = _mmp_parser_index_offsets[cs];

	_klen = _mmp_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _mmp_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _mmp_parser_indicies[_trans];
_eof_trans:
	cs = _mmp_parser_trans_targs_wi[_trans];

	if ( _mmp_parser_trans_actions_wi[_trans] == 0 )
		goto _again;

	_acts = _mmp_parser_actions + _mmp_parser_trans_actions_wi[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 24 "NanorexMMPImportExport.rl"
	{++lineNum;}
	break;
	case 2:
#line 39 "NanorexMMPImportExport.rl"
	{intVal = intVal*10 + ((*p)-'0');}
	break;
	case 4:
#line 44 "NanorexMMPImportExport.rl"
	{intVal2 = intVal2*10 + ((*p)-'0');}
	break;
	case 5:
#line 47 "NanorexMMPImportExport.rl"
	{intVal=-intVal;}
	break;
	case 6:
#line 51 "NanorexMMPImportExport.rl"
	{stringVal.clear(); stringVal = stringVal + (*p); doubleVal = HUGE_VAL;}
	break;
	case 7:
#line 52 "NanorexMMPImportExport.rl"
	{stringVal = stringVal + (*p);}
	break;
	case 8:
#line 53 "NanorexMMPImportExport.rl"
	{doubleVal = atof(stringVal.c_str());}
	break;
	case 9:
#line 71 "NanorexMMPImportExport.rl"
	{ charStringWithSpaceStart = p-1; }
	break;
	case 10:
#line 72 "NanorexMMPImportExport.rl"
	{ charStringWithSpaceStop = p; }
	break;
	case 11:
#line 81 "NanorexMMPImportExport.rl"
	{ stringVal.resize(charStringWithSpaceStop - charStringWithSpaceStart + 1);
			std::copy(charStringWithSpaceStart, charStringWithSpaceStop+1, stringVal.begin());
		}
	break;
	case 12:
#line 92 "NanorexMMPImportExport.rl"
	{ stringVal2.resize(charStringWithSpaceStop - charStringWithSpaceStart + 1);
			std::copy(charStringWithSpaceStart, charStringWithSpaceStop+1, stringVal2.begin());
		}
	break;
	case 13:
#line 26 "NanorexMMPImportExport.rl"
	{ atomId = intVal; /*cerr << "atomId = " << atomId << endl;*/}
	break;
	case 14:
#line 31 "NanorexMMPImportExport.rl"
	{ atomicNum = intVal; /*cerr << "atomId = " << atomId << endl;*/}
	break;
	case 15:
#line 34 "NanorexMMPImportExport.rl"
	{x = intVal; }
	break;
	case 16:
#line 35 "NanorexMMPImportExport.rl"
	{y = intVal; }
	break;
	case 17:
#line 36 "NanorexMMPImportExport.rl"
	{z = intVal; }
	break;
	case 18:
#line 47 "NanorexMMPImportExport.rl"
	{ atomStyle = stringVal;
		    /*cerr << "atom_style = " << stringVal << endl;*/
		}
	break;
	case 19:
#line 52 "NanorexMMPImportExport.rl"
	{
		// stripTrailingWhiteSpaces(atomStyle); 
		newAtom(atomId, atomicNum, x, y, z, atomStyle);
		// cerr << "p = " << p << endl;
	}
	break;
	case 20:
#line 69 "NanorexMMPImportExport.rl"
	{
		newBond(stringVal, intVal);
	}
	break;
	case 21:
#line 75 "NanorexMMPImportExport.rl"
	{ stringVal = (*p); }
	break;
	case 22:
#line 80 "NanorexMMPImportExport.rl"
	{
		newBondDirection(intVal, intVal2);
	}
	break;
	case 24:
#line 14 "NanorexMMPImportExport.rl"
	{
			if(stringVal2 == "")
				stringVal2 = "def";
			newMolecule(stringVal, stringVal2);
		}
	break;
	case 25:
#line 14 "NanorexMMPImportExport.rl"
	{ newViewDataGroup(); }
	break;
	case 26:
#line 24 "NanorexMMPImportExport.rl"
	{ endViewDataGroup(); }
	break;
	case 27:
#line 33 "NanorexMMPImportExport.rl"
	{ end1(); }
	break;
	case 28:
#line 39 "NanorexMMPImportExport.rl"
	{ newClipboardGroup(); }
	break;
	case 29:
#line 46 "NanorexMMPImportExport.rl"
	{ endClipboardGroup(); }
	break;
	case 30:
#line 61 "NanorexMMPImportExport.rl"
	{ newGroupInfo(stringVal, stringVal2); }
	break;
	case 31:
#line 66 "NanorexMMPImportExport.rl"
	{ stringVal2.clear(); }
	break;
	case 32:
#line 71 "NanorexMMPImportExport.rl"
	{ newMolStructGroup(stringVal, stringVal2); }
	break;
	case 33:
#line 87 "NanorexMMPImportExport.rl"
	{ stringVal2.clear(); }
	break;
	case 34:
#line 97 "NanorexMMPImportExport.rl"
	{ newMolStructGroup(stringVal, stringVal2); }
	break;
	case 35:
#line 102 "NanorexMMPImportExport.rl"
	{ stringVal.clear(); }
	break;
	case 36:
#line 107 "NanorexMMPImportExport.rl"
	{ endGroup(stringVal); }
	break;
	case 37:
#line 119 "NanorexMMPImportExport.rl"
	{ {
	if((int)stack.size() == stackSize) {
		stackSize += stackSize;
	    stack.resize(stackSize, 0);
		// cerr << "Resized stack" << endl;
	}
{stack[top++] = cs; cs = 392; goto _again;}} }
	break;
	case 41:
#line 1 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 42:
#line 108 "NanorexMMPImportExport.rl"
	{act = 8;}
	break;
	case 43:
#line 81 "NanorexMMPImportExport.rl"
	{te = p+1;{
		infoOpenGroup
	}}
	break;
	case 44:
#line 85 "NanorexMMPImportExport.rl"
	{te = p+1;{
		/// @todo
	}}
	break;
	case 45:
#line 52 "NanorexMMPImportExport.rl"
	{te = p+1;{
		// stripTrailingWhiteSpaces(atomStyle); 
		newAtom(atomId, atomicNum, x, y, z, atomStyle);
		// cerr << "p = " << p << endl;
	}}
	break;
	case 46:
#line 69 "NanorexMMPImportExport.rl"
	{te = p+1;{
		newBond(stringVal, intVal);
	}}
	break;
	case 47:
#line 80 "NanorexMMPImportExport.rl"
	{te = p+1;{
		newBondDirection(intVal, intVal2);
	}}
	break;
	case 48:
#line 94 "NanorexMMPImportExport.rl"
	{te = p+1;{
		endGroup(stringval);
		{cs = stack[--top]; goto _again;}
	}}
	break;
	case 49:
#line 89 "NanorexMMPImportExport.rl"
	{te = p+1;{
		newGroup(stringval, stringval2);
		{
	if((int)stack.size() == stackSize) {
		stackSize += stackSize;
	    stack.resize(stackSize, 0);
		// cerr << "Resized stack" << endl;
	}
{stack[top++] = cs; cs = 392; goto _again;}}
	}}
	break;
	case 50:
#line 108 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 51:
#line 108 "NanorexMMPImportExport.rl"
	{te = p;p--;}
	break;
	case 52:
#line 108 "NanorexMMPImportExport.rl"
	{{p = ((te))-1;}}
	break;
	case 53:
#line 1 "NanorexMMPImportExport.rl"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	default: break;
	}
	}
	break;
#line 1504 "NanorexMMPImportExport.cpp"
		}
	}

_again:
	_acts = _mmp_parser_actions + _mmp_parser_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 38 "NanorexMMPImportExport.rl"
	{intVal=(*p)-'0';}
	break;
	case 3:
#line 43 "NanorexMMPImportExport.rl"
	{intVal2=(*p)-'0';}
	break;
	case 23:
#line 13 "NanorexMMPImportExport.rl"
	{ stringVal2.clear(); /* in case there is no 'style' string'*/ }
	break;
	case 38:
#line 1 "NanorexMMPImportExport.rl"
	{ts = 0;}
	break;
	case 39:
#line 1 "NanorexMMPImportExport.rl"
	{act = 0;}
	break;
#line 1533 "NanorexMMPImportExport.cpp"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _mmp_parser_eof_trans[cs] > 0 ) {
		_trans = _mmp_parser_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}
#line 240 "NanorexMMPImportExport.rl"
	
    // End-of-parsing sanity checks
	if(molSetPtrStack.size() != 0) {
		NXLOG_WARNING("NanorexMMPImportExport",
		              "At least one group has no matching egroup statement");
	}
	return success;
}


/* FUNCTION: createNewMoleculeSet */
void NanorexMMPImportExport::createNewMoleculeSet(void)
{
	if(molSetPtr != NULL) {
		NXMoleculeSet *newMolSetPtr = new NXMoleculeSet;
		newMolSetPtr->setTitle(stringval);
		molSetPtr->addChild(newMolSetPtr);
		molSetPtrStack.push(newMolSetPtr);
		molSetPtr = newMolSetPtr;
	}
}


/* FUNCTION: closeMoleculeSet */
void NanorexMMPImportExport::closeMoleculeSet(void)
{
	molSetPtrStack.pop();
	molSetPtr = (molSetPtrStack.size() == 0) ? NULL : molSetPtrStack.top();
}


/* FUNCTION: createNewMolecule */
inline void NanorexMMPImportExport::createNewMolecule(void)
{ 
	atomPtr = NULL;
	bondPtr = NULL;
	molPtr = NULL;
	molPtr = molSetPtr->newMolecule();
}


/* FUNCTION: applyAtomType */
void NanorexMMPImportExport::applyAtomType(string const& keyStr,
                                           string const& valueStr)
{
	if(molPtr != NULL && atomPtr != NULL) {
		if(keyStr == "atomtype") { // hybridization info
			if(valueStr == "sp") atomPtr->SetHyb(1);
			else if(valueStr == "sp2") atomPtr->SetHyb(2);
			else if(valueStr == "sp2_g") atomPtr->SetHyb(2);
			else if(valueStr == "sp3") atomPtr->SetHyb(3);
			else if(valueStr == "sp3d") atomPtr->SetHyb(3);
            // else ignore
		}
	}
}




/* FUNCTION: exportToFile */
NXCommandResult*
NanorexMMPImportExport::
exportToFile(NXMoleculeSet *molSetPtr,
             NXDataStoreInfo */*dataStoreInfo*/,
             const std::string& theFilename,
             int /*frameSetId*/, int /*frameIndex*/)
{
	NXCommandResult *result = new NXCommandResult();
	result->setResult(NX_CMD_SUCCESS);
	
	ofstream mmpfile(theFilename.c_str(), ios::out);
	if(!mmpfile) {
		populateCommandResult(result,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
	}
	else {
		PrintMoleculeSet(mmpfile, molSetPtr);
		mmpfile.close();
	}
	return result;
}


/* FUNCTION: GetAtomID */
/* static */
int NanorexMMPImportExport::GetAtomID(OBAtom *atomPtr)
{
	NXAtomData *atomIDData = 
		static_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	int atomID = atomIDData->GetIdx();
	return atomID;
}


/* FUNCTION: GetAtomRenderStyleCode */
/* static */
string const&
NanorexMMPImportExport::GetAtomRenderStyleCode(OBAtom *const atomPtr)
{
	NXAtomData *atomDataPtr =
		static_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	string const& atomStyle = atomDataPtr->GetRenderStyleCode();
	return atomStyle;
}


/* FUNCTION: PrintMolecule */
/* static */
void NanorexMMPImportExport::PrintMolecule(ostream& o,
                                           OBMol *const molPtr)
{
	set<int> prevAtomIdx;
	set<int> prevBondIdx; /// @todo - replace with simple bond count
	
	o << "mol (" << molPtr->GetTitle() << ')' << endl;
	
	OBAtomIterator atomIter;
	OBAtom *atomPtr = NULL;
    // For each atom ...
	for(atomPtr = molPtr->BeginAtom(atomIter);
	    atomPtr != NULL;
	    atomPtr = molPtr->NextAtom(atomIter))
	{
        // ... write the 'atom' line ...
		int atomID = GetAtomID(atomPtr);
		o << "atom " << atomID << " (" << atomPtr->GetAtomicNum() << ") " << '('
			<< atomPtr->x() << ',' << atomPtr->y() << ',' << atomPtr->z()
			<< ") " << GetAtomRenderStyleCode(atomPtr) << endl;
		
		if(atomPtr->GetHyb() != 0) {
			o << "info atom atomtype = "
				<< _s_hybridizationName[atomPtr->GetHyb()];
		}
		
        // ... write the 'bond' lines for this atom ...
        // ... first sort bonds by type ...
		OBBondIterator bondIter;
		OBBond *bondPtr = NULL;
		vector<int> bondCategories[6];
		for(bondPtr = atomPtr->BeginBond(bondIter);
		    bondPtr != NULL;
		    bondPtr = atomPtr->NextBond(bondIter))
		{
            // write bond statement only if target atom was previously written
			OBAtom *nbrAtomPtr = bondPtr->GetNbrAtom(atomPtr);
			int nbrAtomID = GetAtomID(nbrAtomPtr);
			if(prevAtomIdx.find(nbrAtomID) != prevAtomIdx.end()) {
				int bondOrder = bondPtr->GetBondOrder();
				bondCategories[bondOrder-1].push_back(nbrAtomID);
                // record bond for sanity check at end
				prevBondIdx.insert(bondPtr->GetIdx());
			}
		}
		
        // ... write the bonds, one line per type ...
		for(int i=0; i<6; ++i) {
			int J = bondCategories[i].size();
			if(J > 0) {
				o << "bond" << _s_bondOrderString[i];
				for(int j=0; j<J; ++j)
					o << ' ' << bondCategories[i][j];
				o  << endl;
			}
		}
		
        // record atom as 'previously written'
		prevAtomIdx.insert(atomID);
	}
	
    // debug diagnostics
	ostringstream debugMsg;
	debugMsg << "# atoms check ";
	if(molPtr->NumAtoms() == prevAtomIdx.size())
		debugMsg << "PASS ("  << molPtr->NumAtoms() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumAtoms() << " != " << prevAtomIdx.size()<< endl;
	
	debugMsg << "# bonds check ";
	if(molPtr->NumBonds() == prevBondIdx.size())
		debugMsg << "PASS (" << molPtr->NumBonds() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumBonds() << " != " << prevBondIdx.size()<< endl;
	
	debugMsg.flush();
	NXLOG_DEBUG("NanorexMMPImportExport::PrintMoleculeSet",
	            debugMsg.str().c_str());
}


/* FUNCTION: PrintMoleculeSet */
/* static */
void NanorexMMPImportExport::PrintMoleculeSet(ostream& o,
                                              NXMoleculeSet *const molSetPtr)
{
	// Iterate over all child molecules
	OBMolIterator molIter;
	for(molIter = molSetPtr->moleculesBegin();
	    molIter != molSetPtr->moleculesEnd();
	    ++molIter)
	{
		PrintMolecule(o, *molIter);
	}
	
    // Iterate over all child molecule sets
	NXMoleculeSetIterator molSetIter;
	for(molSetIter = molSetPtr->childrenBegin();
	    molSetIter != molSetPtr->childrenEnd();
	    ++molSetIter)
	{
		PrintMoleculeSet(o, *molSetIter);
	}
}


/* FUNCTION: populateCommandResult */
void
NanorexMMPImportExport::populateCommandResult (NXCommandResult* result,
                                               const string& message)
{
	result->setResult(NX_PLUGIN_REPORTS_ERROR);
	vector<QString> resultVector;
	resultVector.push_back("OpenBabelImportExport");
	resultVector.push_back(message.c_str());
	result->setParamVector(resultVector);
}

Q_EXPORT_PLUGIN2 (NanorexMMPImportExport, NanorexMMPImportExport)

