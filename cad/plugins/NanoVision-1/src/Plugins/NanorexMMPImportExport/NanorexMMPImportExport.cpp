#line 1 "NanorexMMPImportExport.rl"
// *********************** GENERATED BY RAGEL 6.0 *******************
// ** Do not edit directly. Edit NanorexMMPImportExport.rl instead **
// ******************************************************************

// Copyright 2008 Nanorex, Inc.  See LICENSE file for details.

#include "NanorexMMPImportExport.h"
#include <Nanorex/Interface/NXAtomData.h>
#include <Nanorex/Utility/NXUtility.h>
#include <QFileInfo>

#define VERBOSE

#if defined(VERBOSE)

#if 0
#define CDEBUG(s) DEBUG_MSG(inputFilename, lineNum, s)
inline void DEBUG_MSG(string const& filename, int line, string const& s)
{
	NXLOG_DEBUG(filename, NXUtility::itos(line)+": "+s);
/*    Nanorex::NXLogger* logger = Nanorex::NXLogger::Instance();
    if (logger != 0)
        logger->log(Nanorex::NXLogLevel_Info, filename, msg.str());*/
}
#endif

#define CERR(s) { cerr << inputFilename << ": " << NXUtility::itos(lineNum) \
<< ": " << s << endl; }
// #define CDEBUG(s) NXLOG_DEBUG(inputFilename, NXUtility::itos(lineNum)+": "+s)
#define CDEBUG(s) { cerr << inputFilename << ": " << NXUtility::itos(lineNum) \
<< ": " << s << endl; }
#define CLOG(s) NXLOG_INFO(inputFilename, NXUtility::itos(lineNum)+": "+s)

#else
#define CDEBUG(s)
#define CLOG(s)
#endif

#define CSEVERE(s) NXLOG_SEVERE(inputFilename, NXUtility::itos(lineNum)+": "+s)



#line 102 "NanorexMMPImportExport.rl"


#line 106 "NanorexMMPImportExport.rl"

// static data from Ragel


#line 53 "NanorexMMPImportExport.cpp"
static const char _mmp_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	17, 1, 18, 1, 21, 1, 22, 1, 
	26, 1, 30, 1, 32, 1, 33, 1, 
	37, 1, 41, 1, 43, 1, 57, 1, 
	58, 2, 0, 29, 2, 0, 53, 2, 
	0, 55, 2, 0, 56, 2, 5, 12, 
	2, 5, 13, 2, 5, 14, 2, 6, 
	7, 2, 6, 8, 2, 6, 9, 2, 
	8, 15, 2, 35, 24, 2, 37, 0, 
	2, 41, 42, 3, 0, 16, 51, 3, 
	0, 19, 54, 3, 0, 20, 52, 3, 
	0, 23, 49, 3, 0, 25, 50, 3, 
	0, 27, 38, 3, 0, 28, 39, 3, 
	0, 28, 46, 3, 0, 31, 40, 3, 
	0, 34, 48, 3, 0, 36, 47, 3, 
	6, 8, 15, 3, 17, 0, 53, 3, 
	44, 0, 45, 4, 9, 0, 20, 52, 
	4, 9, 0, 23, 49, 4, 9, 0, 
	25, 50, 4, 9, 0, 36, 47, 4, 
	33, 0, 34, 48, 5, 6, 9, 0, 
	20, 52, 5, 6, 9, 0, 23, 49, 
	5, 6, 9, 0, 25, 50, 5, 6, 
	9, 0, 36, 47, 5, 8, 15, 0, 
	16, 51, 6, 6, 8, 15, 0, 16, 
	51
};

static const short _mmp_parser_key_offsets[] = {
	0, 0, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 17, 23, 25, 27, 29, 
	31, 33, 37, 42, 43, 44, 45, 46, 
	47, 48, 49, 55, 61, 62, 63, 64, 
	65, 70, 75, 80, 81, 82, 83, 87, 
	92, 93, 94, 95, 100, 102, 107, 108, 
	109, 110, 111, 116, 127, 141, 155, 160, 
	165, 166, 167, 168, 173, 178, 179, 180, 
	181, 182, 187, 192, 193, 194, 195, 196, 
	197, 198, 199, 200, 205, 210, 215, 216, 
	217, 221, 223, 225, 227, 240, 254, 256, 
	257, 258, 259, 260, 261, 265, 271, 278, 
	283, 288, 290, 297, 299, 303, 309, 311, 
	313, 315, 317, 319, 323, 328, 329, 330, 
	331, 332, 333, 334, 335, 336, 341, 343, 
	354, 357, 360, 363, 368, 375, 382, 388, 
	395, 403, 409, 414, 420, 429, 433, 441, 
	447, 456, 460, 468, 474, 483, 487, 495, 
	501, 507, 520, 522, 537, 552, 566, 581, 
	589, 593, 601, 609, 617, 621, 629, 637, 
	645, 649, 657, 665, 673, 680, 683, 686, 
	689, 697, 702, 709, 717, 725, 727, 735, 
	738, 741, 744, 747, 750, 753, 756, 759, 
	762, 767, 774, 781, 788, 796, 802, 804, 
	812, 819, 822, 825, 828, 831, 834, 841, 
	848, 850, 863, 875, 890, 905, 911, 925, 
	940, 943, 946, 949, 952, 958, 970, 985, 
	1000, 1006, 1008, 1022, 1037, 1040, 1043, 1046, 
	1051, 1059, 1062, 1065, 1068, 1073, 1085, 1100, 
	1115, 1129, 1144, 1156, 1171, 1186, 1188, 1202, 
	1217, 1220, 1223, 1226, 1229, 1234, 1246, 1261, 
	1276, 1290, 1305, 1317, 1332, 1347, 1349, 1363, 
	1378, 1381, 1384, 1387, 1390, 1393, 1396, 1399, 
	1402, 1407, 1419, 1434, 1449, 1463, 1478, 1490, 
	1505, 1520, 1522, 1536, 1551, 1554, 1557, 1562, 
	1568, 1580, 1595, 1610, 1616, 1629, 1631, 1646, 
	1661, 1675, 1690, 1704, 1719, 1721, 1721, 1733
};

static const char _mmp_parser_trans_keys[] = {
	10, 32, 109, 9, 13, 109, 112, 102, 
	111, 114, 109, 97, 116, 9, 32, 11, 
	13, 9, 32, 11, 13, 48, 57, 48, 
	57, 48, 57, 48, 57, 48, 57, 48, 
	57, 9, 32, 11, 13, 9, 32, 114, 
	11, 13, 101, 113, 117, 105, 114, 101, 
	100, 10, 32, 35, 59, 9, 13, 10, 
	32, 103, 107, 9, 13, 114, 111, 117, 
	112, 9, 32, 40, 11, 13, 9, 32, 
	40, 11, 13, 9, 32, 86, 11, 13, 
	105, 101, 119, 9, 32, 11, 13, 9, 
	32, 68, 11, 13, 97, 116, 97, 9, 
	32, 41, 11, 13, 10, 35, 10, 32, 
	103, 9, 13, 114, 111, 117, 112, 9, 
	32, 40, 11, 13, 9, 32, 95, 11, 
	13, 48, 57, 65, 90, 97, 122, 9, 
	32, 41, 95, 11, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, 9, 32, 41, 
	95, 11, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, 10, 32, 35, 9, 13, 
	10, 32, 101, 9, 13, 110, 100, 49, 
	10, 32, 35, 9, 13, 10, 32, 103, 
	9, 13, 114, 111, 117, 112, 9, 32, 
	40, 11, 13, 9, 32, 67, 11, 13, 
	108, 105, 112, 98, 111, 97, 114, 100, 
	9, 32, 41, 11, 13, 10, 32, 35, 
	9, 13, 10, 32, 101, 9, 13, 110, 
	100, 9, 32, 11, 13, -1, 10, -1, 
	10, -1, 10, 9, 32, 95, 11, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	9, 32, 41, 95, 11, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	101, 108, 118, 105, 110, 9, 32, 11, 
	13, 9, 32, 11, 13, 48, 57, 10, 
	32, 35, 9, 13, 48, 57, 10, 32, 
	35, 9, 13, 10, 32, 103, 9, 13, 
	-1, 10, 10, 32, 35, 9, 13, 48, 
	57, -1, 10, 9, 32, 11, 13, 9, 
	32, 11, 13, 48, 57, 48, 57, 48, 
	57, 48, 57, 48, 57, 48, 57, 9, 
	32, 11, 13, 9, 32, 112, 11, 13, 
	114, 101, 102, 101, 114, 114, 101, 100, 
	10, 32, 35, 9, 13, -1, 10, -1, 
	10, 32, 97, 98, 101, 103, 105, 109, 
	9, 13, -1, 10, 116, -1, 10, 111, 
	-1, 10, 109, -1, 10, 32, 9, 13, 
	-1, 10, 32, 9, 13, 48, 57, -1, 
	10, 32, 9, 13, 48, 57, -1, 10, 
	32, 40, 9, 13, -1, 10, 32, 9, 
	13, 48, 57, -1, 10, 32, 41, 9, 
	13, 48, 57, -1, 10, 32, 41, 9, 
	13, -1, 10, 32, 9, 13, -1, 10, 
	32, 40, 9, 13, -1, 10, 32, 43, 
	45, 9, 13, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, -1, 
	10, 32, 43, 45, 9, 13, 48, 57, 
	-1, 10, 48, 57, -1, 10, 32, 44, 
	9, 13, 48, 57, -1, 10, 32, 44, 
	9, 13, -1, 10, 32, 43, 45, 9, 
	13, 48, 57, -1, 10, 48, 57, -1, 
	10, 32, 41, 9, 13, 48, 57, -1, 
	10, 32, 41, 9, 13, -1, 10, 32, 
	35, 9, 13, -1, 10, 32, 35, 95, 
	9, 13, 48, 57, 65, 90, 97, 122, 
	-1, 10, -1, 10, 32, 35, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 35, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	41, 9, 13, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 41, 9, 13, 48, 
	57, -1, 10, 32, 41, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 32, 
	44, 9, 13, 48, 57, -1, 10, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 44, 9, 13, 48, 
	57, -1, 10, 32, 41, 9, 13, 48, 
	57, -1, 10, 32, 9, 13, 48, 57, 
	-1, 10, 111, -1, 10, 110, -1, 10, 
	100, -1, 10, 95, 97, 99, 103, 49, 
	51, -1, 10, 32, 9, 13, -1, 10, 
	32, 9, 13, 48, 57, -1, 10, 32, 
	35, 9, 13, 48, 57, -1, 10, 32, 
	35, 9, 13, 48, 57, -1, 10, -1, 
	10, 32, 35, 9, 13, 48, 57, -1, 
	10, 100, -1, 10, 105, -1, 10, 114, 
	-1, 10, 101, -1, 10, 99, -1, 10, 
	116, -1, 10, 105, -1, 10, 111, -1, 
	10, 110, -1, 10, 32, 9, 13, -1, 
	10, 32, 9, 13, 48, 57, -1, 10, 
	32, 9, 13, 48, 57, -1, 10, 32, 
	9, 13, 48, 57, -1, 10, 32, 35, 
	9, 13, 48, 57, -1, 10, 32, 35, 
	9, 13, -1, 10, -1, 10, 32, 35, 
	9, 13, 48, 57, -1, 10, 32, 9, 
	13, 48, 57, -1, 10, 103, -1, 10, 
	114, -1, 10, 111, -1, 10, 117, -1, 
	10, 112, -1, 10, 32, 35, 40, 9, 
	13, -1, 10, 32, 35, 40, 9, 13, 
	-1, 10, -1, 10, 32, 41, 95, 9, 
	13, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 41, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 41, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 9, 13, -1, 
	10, 32, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	41, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 114, -1, 
	10, 111, -1, 10, 117, -1, 10, 112, 
	-1, 10, 32, 40, 9, 13, -1, 10, 
	32, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 41, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 41, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 35, 9, 13, -1, 10, 
	-1, 10, 32, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 41, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 110, 
	-1, 10, 102, -1, 10, 111, -1, 10, 
	32, 9, 13, -1, 10, 32, 97, 99, 
	111, 9, 13, -1, 10, 116, -1, 10, 
	111, -1, 10, 109, -1, 10, 32, 9, 
	13, -1, 10, 32, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	61, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 61, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 61, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 35, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 35, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, -1, 10, 32, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 35, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 104, -1, 10, 117, -1, 
	10, 110, -1, 10, 107, -1, 10, 32, 
	9, 13, -1, 10, 32, 95, 9, 13, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 61, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	61, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 61, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	35, 95, 9, 13, 45, 46, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 35, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, -1, 10, 32, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 35, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 112, -1, 10, 101, 
	-1, 10, 110, -1, 10, 103, -1, 10, 
	114, -1, 10, 111, -1, 10, 117, -1, 
	10, 112, -1, 10, 32, 9, 13, -1, 
	10, 32, 95, 9, 13, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 61, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 61, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 32, 61, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 95, 9, 13, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 35, 95, 9, 
	13, 45, 46, 48, 57, 65, 90, 97, 
	122, -1, 10, 32, 35, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, -1, 10, 32, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 35, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, 111, -1, 10, 108, -1, 10, 32, 
	9, 13, -1, 10, 32, 40, 9, 13, 
	-1, 10, 32, 95, 9, 13, 48, 57, 
	65, 90, 97, 122, -1, 10, 32, 41, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 41, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 35, 9, 13, 
	-1, 10, 32, 35, 95, 9, 13, 48, 
	57, 65, 90, 97, 122, -1, 10, -1, 
	10, 32, 35, 95, 9, 13, 45, 46, 
	48, 57, 65, 90, 97, 122, -1, 10, 
	32, 35, 95, 9, 13, 45, 46, 48, 
	57, 65, 90, 97, 122, -1, 10, 32, 
	95, 9, 13, 45, 46, 48, 57, 65, 
	90, 97, 122, -1, 10, 32, 35, 95, 
	9, 13, 45, 46, 48, 57, 65, 90, 
	97, 122, -1, 10, 32, 95, 9, 13, 
	45, 46, 48, 57, 65, 90, 97, 122, 
	-1, 10, 32, 41, 95, 9, 13, 45, 
	46, 48, 57, 65, 90, 97, 122, -1, 
	10, -1, 10, 32, 35, 97, 98, 101, 
	103, 105, 109, 9, 13, -1, 10, 32, 
	97, 98, 101, 103, 105, 109, 9, 13, 
	0
};

static const char _mmp_parser_single_lengths[] = {
	0, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 0, 0, 0, 0, 
	0, 2, 3, 1, 1, 1, 1, 1, 
	1, 1, 4, 4, 1, 1, 1, 1, 
	3, 3, 3, 1, 1, 1, 2, 3, 
	1, 1, 1, 3, 2, 3, 1, 1, 
	1, 1, 3, 3, 4, 4, 3, 3, 
	1, 1, 1, 3, 3, 1, 1, 1, 
	1, 3, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 3, 3, 1, 1, 
	2, 2, 2, 2, 3, 4, 2, 1, 
	1, 1, 1, 1, 2, 2, 3, 3, 
	3, 2, 3, 2, 2, 2, 0, 0, 
	0, 0, 0, 2, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 2, 9, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	4, 4, 3, 4, 5, 2, 4, 4, 
	5, 2, 4, 4, 5, 2, 4, 4, 
	4, 5, 2, 5, 5, 4, 5, 4, 
	2, 4, 4, 4, 2, 4, 4, 4, 
	2, 4, 4, 4, 3, 3, 3, 3, 
	6, 3, 3, 4, 4, 2, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 4, 4, 2, 4, 
	3, 3, 3, 3, 3, 3, 5, 5, 
	2, 5, 4, 5, 5, 4, 4, 5, 
	3, 3, 3, 3, 4, 4, 5, 5, 
	4, 2, 4, 5, 3, 3, 3, 3, 
	6, 3, 3, 3, 3, 4, 5, 5, 
	4, 5, 4, 5, 5, 2, 4, 5, 
	3, 3, 3, 3, 3, 4, 5, 5, 
	4, 5, 4, 5, 5, 2, 4, 5, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 4, 5, 5, 4, 5, 4, 5, 
	5, 2, 4, 5, 3, 3, 3, 4, 
	4, 5, 5, 4, 5, 2, 5, 5, 
	4, 5, 4, 5, 2, 0, 10, 9
};

static const char _mmp_parser_range_lengths[] = {
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 1, 1, 
	0, 0, 0, 1, 0, 1, 0, 0, 
	0, 0, 1, 4, 5, 5, 1, 1, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	1, 0, 0, 0, 5, 5, 0, 0, 
	0, 0, 0, 0, 1, 2, 2, 1, 
	1, 0, 2, 0, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 1, 
	0, 0, 0, 1, 2, 2, 1, 2, 
	2, 1, 1, 1, 2, 1, 2, 1, 
	2, 1, 2, 1, 2, 1, 2, 1, 
	1, 4, 0, 5, 5, 5, 5, 2, 
	1, 2, 2, 2, 1, 2, 2, 2, 
	1, 2, 2, 2, 2, 0, 0, 0, 
	1, 1, 2, 2, 2, 0, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 2, 2, 2, 2, 1, 0, 2, 
	2, 0, 0, 0, 0, 0, 1, 1, 
	0, 4, 4, 5, 5, 1, 5, 5, 
	0, 0, 0, 0, 1, 4, 5, 5, 
	1, 0, 5, 5, 0, 0, 0, 1, 
	1, 0, 0, 0, 1, 4, 5, 5, 
	5, 5, 4, 5, 5, 0, 5, 5, 
	0, 0, 0, 0, 1, 4, 5, 5, 
	5, 5, 4, 5, 5, 0, 5, 5, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 4, 5, 5, 5, 5, 4, 5, 
	5, 0, 5, 5, 0, 0, 1, 1, 
	4, 5, 5, 1, 4, 0, 5, 5, 
	5, 5, 5, 5, 0, 0, 1, 1
};

static const short _mmp_parser_index_offsets[] = {
	0, 0, 5, 7, 9, 11, 13, 15, 
	17, 19, 21, 25, 30, 32, 34, 36, 
	38, 40, 44, 49, 51, 53, 55, 57, 
	59, 61, 63, 69, 75, 77, 79, 81, 
	83, 88, 93, 98, 100, 102, 104, 108, 
	113, 115, 117, 119, 124, 127, 132, 134, 
	136, 138, 140, 145, 153, 163, 173, 178, 
	183, 185, 187, 189, 194, 199, 201, 203, 
	205, 207, 212, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 238, 243, 248, 250, 
	252, 256, 259, 262, 265, 274, 284, 287, 
	289, 291, 293, 295, 297, 301, 306, 312, 
	317, 322, 325, 331, 334, 338, 343, 345, 
	347, 349, 351, 353, 357, 362, 364, 366, 
	368, 370, 372, 374, 376, 378, 383, 386, 
	397, 401, 405, 409, 414, 420, 426, 432, 
	438, 445, 451, 456, 462, 470, 474, 481, 
	487, 495, 499, 506, 512, 520, 524, 531, 
	537, 543, 553, 556, 567, 578, 588, 599, 
	606, 610, 617, 624, 631, 635, 642, 649, 
	656, 660, 667, 674, 681, 687, 691, 695, 
	699, 707, 712, 718, 725, 732, 735, 742, 
	746, 750, 754, 758, 762, 766, 770, 774, 
	778, 783, 789, 795, 801, 808, 814, 817, 
	824, 830, 834, 838, 842, 846, 850, 857, 
	864, 867, 877, 886, 897, 908, 914, 924, 
	935, 939, 943, 947, 951, 957, 966, 977, 
	988, 994, 997, 1007, 1018, 1022, 1026, 1030, 
	1035, 1043, 1047, 1051, 1055, 1060, 1069, 1080, 
	1091, 1101, 1112, 1121, 1132, 1143, 1146, 1156, 
	1167, 1171, 1175, 1179, 1183, 1188, 1197, 1208, 
	1219, 1229, 1240, 1249, 1260, 1271, 1274, 1284, 
	1295, 1299, 1303, 1307, 1311, 1315, 1319, 1323, 
	1327, 1332, 1341, 1352, 1363, 1373, 1384, 1393, 
	1404, 1415, 1418, 1428, 1439, 1443, 1447, 1452, 
	1458, 1467, 1478, 1489, 1495, 1505, 1508, 1519, 
	1530, 1540, 1551, 1561, 1572, 1575, 1576, 1588
};

static const short _mmp_parser_indicies[] = {
	2, 0, 3, 0, 1, 4, 1, 5, 
	1, 6, 1, 7, 1, 8, 1, 9, 
	1, 10, 1, 11, 1, 12, 12, 12, 
	1, 12, 12, 12, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 19, 19, 1, 19, 19, 20, 19, 
	1, 21, 1, 22, 1, 23, 1, 24, 
	1, 25, 1, 26, 1, 27, 1, 28, 
	27, 29, 30, 27, 1, 28, 31, 32, 
	33, 31, 1, 34, 1, 35, 1, 36, 
	1, 37, 1, 38, 38, 39, 38, 1, 
	40, 40, 41, 40, 1, 41, 41, 42, 
	41, 1, 43, 1, 44, 1, 45, 1, 
	46, 46, 46, 1, 46, 46, 47, 46, 
	1, 48, 1, 49, 1, 50, 1, 50, 
	50, 51, 50, 1, 52, 53, 1, 55, 
	54, 56, 54, 1, 57, 1, 58, 1, 
	59, 1, 60, 1, 60, 60, 61, 60, 
	1, 61, 61, 62, 61, 62, 62, 62, 
	1, 63, 63, 64, 66, 63, 65, 66, 
	66, 66, 1, 67, 67, 68, 70, 67, 
	69, 70, 70, 70, 1, 71, 68, 72, 
	68, 1, 74, 73, 75, 73, 1, 76, 
	1, 77, 1, 78, 1, 79, 78, 80, 
	78, 1, 82, 81, 83, 81, 1, 84, 
	1, 85, 1, 86, 1, 87, 1, 87, 
	87, 88, 87, 1, 88, 88, 89, 88, 
	1, 90, 1, 91, 1, 92, 1, 93, 
	1, 94, 1, 95, 1, 96, 1, 97, 
	1, 97, 97, 98, 97, 1, 99, 98, 
	100, 98, 1, 102, 101, 103, 101, 1, 
	104, 1, 105, 1, 106, 106, 106, 1, 
	1, 99, 100, 1, 79, 80, 1, 71, 
	72, 69, 69, 70, 69, 69, 70, 70, 
	70, 1, 107, 107, 108, 70, 107, 69, 
	70, 70, 70, 1, 1, 52, 53, 109, 
	1, 110, 1, 111, 1, 112, 1, 113, 
	1, 114, 114, 114, 1, 114, 114, 114, 
	115, 1, 117, 116, 118, 116, 119, 1, 
	121, 120, 122, 120, 1, 121, 123, 32, 
	123, 1, 1, 121, 122, 117, 116, 118, 
	116, 119, 1, 1, 28, 29, 124, 124, 
	124, 1, 124, 124, 124, 125, 1, 126, 
	1, 127, 1, 128, 1, 129, 1, 130, 
	1, 131, 131, 131, 1, 131, 131, 132, 
	131, 1, 133, 1, 134, 1, 135, 1, 
	136, 1, 137, 1, 138, 1, 139, 1, 
	140, 1, 28, 140, 29, 140, 1, 141, 
	143, 142, 141, 145, 144, 146, 147, 148, 
	149, 150, 151, 144, 142, 141, 143, 152, 
	142, 141, 143, 153, 142, 141, 143, 154, 
	142, 141, 143, 155, 155, 142, 141, 143, 
	155, 155, 156, 142, 141, 143, 157, 157, 
	158, 142, 141, 143, 159, 160, 159, 142, 
	141, 143, 160, 160, 161, 142, 141, 143, 
	162, 163, 162, 164, 142, 141, 143, 162, 
	163, 162, 142, 141, 143, 165, 165, 142, 
	141, 143, 166, 167, 166, 142, 141, 143, 
	167, 168, 169, 167, 170, 142, 141, 143, 
	170, 142, 141, 143, 171, 172, 171, 173, 
	142, 141, 143, 171, 172, 171, 142, 141, 
	143, 174, 175, 176, 174, 177, 142, 141, 
	143, 177, 142, 141, 143, 178, 179, 178, 
	180, 142, 141, 143, 178, 179, 178, 142, 
	141, 143, 181, 182, 183, 181, 184, 142, 
	141, 143, 184, 142, 141, 143, 185, 186, 
	185, 187, 142, 141, 143, 185, 186, 185, 
	142, 141, 189, 188, 190, 188, 142, 141, 
	189, 188, 190, 191, 188, 191, 191, 191, 
	142, 141, 189, 190, 141, 193, 192, 194, 
	196, 192, 195, 196, 196, 196, 142, 141, 
	189, 197, 190, 199, 197, 198, 199, 199, 
	199, 142, 141, 143, 198, 199, 198, 198, 
	199, 199, 199, 142, 141, 201, 200, 202, 
	199, 200, 198, 199, 199, 199, 142, 141, 
	143, 185, 186, 185, 187, 142, 141, 143, 
	203, 142, 141, 143, 204, 205, 204, 206, 
	142, 141, 143, 204, 205, 204, 206, 142, 
	141, 143, 178, 179, 178, 180, 142, 141, 
	143, 207, 142, 141, 143, 208, 209, 208, 
	210, 142, 141, 143, 208, 209, 208, 210, 
	142, 141, 143, 171, 172, 171, 173, 142, 
	141, 143, 211, 142, 141, 143, 212, 213, 
	212, 214, 142, 141, 143, 212, 213, 212, 
	214, 142, 141, 143, 162, 163, 162, 164, 
	142, 141, 143, 157, 157, 158, 142, 141, 
	143, 215, 142, 141, 143, 216, 142, 141, 
	143, 217, 142, 141, 143, 219, 218, 218, 
	218, 218, 142, 141, 143, 220, 220, 142, 
	141, 143, 220, 220, 221, 142, 141, 223, 
	222, 224, 222, 225, 142, 141, 227, 226, 
	228, 226, 221, 142, 141, 227, 228, 141, 
	223, 222, 224, 222, 225, 142, 141, 143, 
	229, 142, 141, 143, 230, 142, 141, 143, 
	231, 142, 141, 143, 232, 142, 141, 143, 
	233, 142, 141, 143, 234, 142, 141, 143, 
	235, 142, 141, 143, 236, 142, 141, 143, 
	237, 142, 141, 143, 238, 238, 142, 141, 
	143, 238, 238, 239, 142, 141, 143, 240, 
	240, 241, 142, 141, 143, 240, 240, 242, 
	142, 141, 244, 243, 245, 243, 246, 142, 
	141, 244, 243, 245, 243, 142, 141, 244, 
	245, 141, 244, 243, 245, 243, 246, 142, 
	141, 143, 240, 240, 241, 142, 141, 143, 
	247, 142, 141, 143, 248, 142, 141, 143, 
	249, 142, 141, 143, 250, 142, 141, 143, 
	251, 142, 141, 253, 252, 254, 255, 252, 
	142, 141, 257, 256, 258, 259, 256, 142, 
	141, 257, 258, 141, 143, 260, 261, 262, 
	260, 262, 262, 262, 142, 141, 143, 260, 
	262, 260, 262, 262, 262, 142, 141, 143, 
	263, 264, 266, 263, 265, 266, 266, 266, 
	142, 141, 143, 267, 261, 269, 267, 268, 
	269, 269, 269, 142, 141, 257, 261, 258, 
	261, 142, 141, 143, 268, 269, 268, 268, 
	269, 269, 269, 142, 141, 143, 270, 271, 
	269, 270, 268, 269, 269, 269, 142, 141, 
	143, 272, 142, 141, 143, 273, 142, 141, 
	143, 274, 142, 141, 143, 275, 142, 141, 
	143, 275, 276, 275, 142, 141, 143, 276, 
	277, 276, 277, 277, 277, 142, 141, 143, 
	278, 279, 281, 278, 280, 281, 281, 281, 
	142, 141, 143, 282, 283, 285, 282, 284, 
	285, 285, 285, 142, 141, 286, 283, 287, 
	283, 142, 141, 286, 287, 141, 143, 284, 
	285, 284, 284, 285, 285, 285, 142, 141, 
	143, 288, 289, 285, 288, 284, 285, 285, 
	285, 142, 141, 143, 290, 142, 141, 143, 
	291, 142, 141, 143, 292, 142, 141, 143, 
	293, 293, 142, 141, 143, 293, 294, 295, 
	296, 293, 142, 141, 143, 297, 142, 141, 
	143, 298, 142, 141, 143, 299, 142, 141, 
	143, 300, 300, 142, 141, 143, 300, 301, 
	300, 301, 301, 301, 142, 141, 143, 302, 
	305, 304, 302, 303, 304, 304, 304, 142, 
	141, 143, 306, 309, 308, 306, 307, 308, 
	308, 308, 142, 141, 143, 307, 308, 307, 
	307, 308, 308, 308, 142, 141, 143, 310, 
	311, 308, 310, 307, 308, 308, 308, 142, 
	141, 143, 309, 312, 309, 312, 312, 312, 
	142, 141, 314, 313, 315, 317, 313, 316, 
	317, 317, 317, 142, 141, 319, 318, 320, 
	322, 318, 321, 322, 322, 322, 142, 141, 
	319, 320, 141, 143, 321, 322, 321, 321, 
	322, 322, 322, 142, 141, 324, 323, 325, 
	322, 323, 321, 322, 322, 322, 142, 141, 
	143, 326, 142, 141, 143, 327, 142, 141, 
	143, 328, 142, 141, 143, 329, 142, 141, 
	143, 330, 330, 142, 141, 143, 330, 331, 
	330, 331, 331, 331, 142, 141, 143, 332, 
	335, 334, 332, 333, 334, 334, 334, 142, 
	141, 143, 336, 339, 338, 336, 337, 338, 
	338, 338, 142, 141, 143, 337, 338, 337, 
	337, 338, 338, 338, 142, 141, 143, 340, 
	341, 338, 340, 337, 338, 338, 338, 142, 
	141, 143, 339, 342, 339, 342, 342, 342, 
	142, 141, 344, 343, 345, 347, 343, 346, 
	347, 347, 347, 142, 141, 349, 348, 350, 
	352, 348, 351, 352, 352, 352, 142, 141, 
	349, 350, 141, 143, 351, 352, 351, 351, 
	352, 352, 352, 142, 141, 354, 353, 355, 
	352, 353, 351, 352, 352, 352, 142, 141, 
	143, 356, 142, 141, 143, 357, 142, 141, 
	143, 358, 142, 141, 143, 359, 142, 141, 
	143, 360, 142, 141, 143, 361, 142, 141, 
	143, 362, 142, 141, 143, 363, 142, 141, 
	143, 364, 364, 142, 141, 143, 364, 365, 
	364, 365, 365, 365, 142, 141, 143, 366, 
	369, 368, 366, 367, 368, 368, 368, 142, 
	141, 143, 370, 373, 372, 370, 371, 372, 
	372, 372, 142, 141, 143, 371, 372, 371, 
	371, 372, 372, 372, 142, 141, 143, 374, 
	375, 372, 374, 371, 372, 372, 372, 142, 
	141, 143, 373, 376, 373, 376, 376, 376, 
	142, 141, 378, 377, 379, 381, 377, 380, 
	381, 381, 381, 142, 141, 383, 382, 384, 
	386, 382, 385, 386, 386, 386, 142, 141, 
	383, 384, 141, 143, 385, 386, 385, 385, 
	386, 386, 386, 142, 141, 388, 387, 389, 
	386, 387, 385, 386, 386, 386, 142, 141, 
	143, 390, 142, 141, 143, 391, 142, 141, 
	143, 392, 392, 142, 141, 143, 392, 393, 
	392, 142, 141, 143, 393, 394, 393, 394, 
	394, 394, 142, 141, 143, 395, 396, 398, 
	395, 397, 398, 398, 398, 142, 141, 143, 
	399, 400, 402, 399, 401, 402, 402, 402, 
	142, 141, 404, 403, 405, 403, 142, 141, 
	404, 403, 405, 406, 403, 406, 406, 406, 
	142, 141, 404, 405, 141, 408, 407, 409, 
	411, 407, 410, 411, 411, 411, 142, 141, 
	404, 412, 405, 414, 412, 413, 414, 414, 
	414, 142, 141, 143, 413, 414, 413, 413, 
	414, 414, 414, 142, 141, 416, 415, 417, 
	414, 415, 413, 414, 414, 414, 142, 141, 
	143, 401, 402, 401, 401, 402, 402, 402, 
	142, 141, 143, 418, 419, 402, 418, 401, 
	402, 402, 402, 142, 1, 421, 420, 106, 
	1, 145, 144, 420, 146, 147, 148, 149, 
	150, 151, 144, 142, 422, 145, 144, 146, 
	147, 148, 149, 150, 151, 144, 142, 0
};

static const short _mmp_parser_trans_targs_wi[] = {
	1, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 99, 100, 27, 
	28, 87, 29, 30, 31, 32, 33, 34, 
	33, 34, 35, 36, 37, 38, 39, 40, 
	41, 42, 43, 44, 45, 86, 45, 45, 
	46, 47, 48, 49, 50, 51, 52, 53, 
	54, 84, 85, 53, 54, 84, 85, 55, 
	83, 55, 55, 56, 57, 58, 59, 60, 
	82, 60, 60, 61, 62, 63, 64, 65, 
	66, 67, 68, 69, 70, 71, 72, 73, 
	74, 75, 76, 77, 81, 77, 77, 78, 
	79, 80, 293, 53, 54, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	95, 96, 97, 96, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 294, 118, 294, 
	119, 295, 120, 165, 193, 208, 220, 276, 
	121, 122, 123, 124, 125, 126, 164, 126, 
	127, 128, 129, 130, 163, 131, 131, 132, 
	133, 160, 134, 135, 136, 159, 136, 137, 
	156, 138, 139, 140, 155, 140, 141, 152, 
	142, 143, 144, 151, 145, 294, 146, 147, 
	148, 294, 146, 149, 150, 148, 149, 150, 
	148, 294, 146, 153, 143, 144, 154, 157, 
	139, 140, 158, 161, 135, 136, 162, 166, 
	167, 168, 169, 175, 170, 171, 172, 294, 
	173, 174, 172, 294, 173, 176, 177, 178, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	187, 192, 188, 189, 294, 190, 191, 194, 
	195, 196, 197, 198, 199, 294, 200, 201, 
	199, 294, 200, 201, 202, 205, 203, 204, 
	205, 206, 207, 204, 206, 207, 204, 205, 
	209, 210, 211, 212, 213, 214, 215, 216, 
	218, 219, 215, 216, 218, 219, 294, 217, 
	215, 216, 221, 222, 223, 224, 225, 240, 
	256, 226, 227, 228, 229, 230, 231, 232, 
	233, 234, 231, 232, 233, 234, 231, 234, 
	235, 236, 294, 237, 238, 239, 236, 294, 
	237, 238, 239, 236, 294, 237, 241, 242, 
	243, 244, 245, 246, 247, 248, 249, 250, 
	247, 248, 249, 250, 247, 250, 251, 252, 
	294, 253, 254, 255, 252, 294, 253, 254, 
	255, 252, 294, 253, 257, 258, 259, 260, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 270, 267, 268, 269, 270, 267, 270, 
	271, 272, 294, 273, 274, 275, 272, 294, 
	273, 274, 275, 272, 294, 273, 277, 278, 
	279, 280, 281, 282, 283, 290, 291, 282, 
	283, 290, 291, 284, 294, 285, 286, 287, 
	294, 285, 288, 289, 287, 288, 289, 287, 
	294, 285, 282, 283, 292, 294, 294
};

static const unsigned char _mmp_parser_trans_actions_wi[] = {
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 39, 39, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 119, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 81, 
	81, 13, 78, 0, 0, 0, 15, 123, 
	0, 0, 1, 0, 0, 0, 0, 57, 
	0, 0, 1, 41, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 131, 0, 0, 1, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 47, 93, 47, 5, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 55, 0, 66, 
	0, 151, 0, 0, 43, 0, 90, 35, 
	0, 0, 0, 0, 0, 21, 5, 0, 
	0, 0, 0, 0, 5, 23, 0, 0, 
	0, 0, 0, 0, 25, 5, 0, 0, 
	0, 0, 0, 27, 5, 0, 0, 0, 
	0, 0, 29, 5, 0, 99, 0, 0, 
	143, 210, 143, 13, 78, 0, 0, 15, 
	87, 204, 87, 0, 11, 75, 5, 0, 
	11, 72, 5, 0, 11, 69, 5, 0, 
	0, 0, 33, 0, 0, 0, 31, 147, 
	31, 5, 0, 60, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 0, 0, 103, 0, 9, 0, 
	0, 0, 0, 0, 45, 175, 45, 45, 
	0, 135, 0, 0, 0, 0, 0, 81, 
	81, 13, 78, 0, 0, 15, 17, 17, 
	0, 0, 0, 0, 0, 0, 81, 81, 
	13, 78, 0, 0, 0, 15, 127, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 81, 13, 
	78, 81, 0, 0, 15, 0, 17, 17, 
	0, 84, 180, 84, 13, 78, 0, 107, 
	0, 0, 15, 19, 155, 19, 0, 0, 
	0, 0, 0, 0, 81, 13, 78, 81, 
	0, 0, 15, 0, 17, 17, 0, 84, 
	192, 84, 13, 78, 0, 115, 0, 0, 
	15, 19, 165, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 81, 13, 
	78, 81, 0, 0, 15, 0, 17, 17, 
	0, 84, 198, 84, 13, 78, 0, 139, 
	0, 0, 15, 19, 170, 19, 0, 0, 
	0, 0, 0, 81, 81, 13, 78, 0, 
	0, 0, 15, 0, 111, 0, 0, 84, 
	186, 84, 13, 78, 0, 0, 15, 19, 
	160, 19, 17, 17, 0, 63, 53
};

static const unsigned char _mmp_parser_to_state_actions[] = {
	0, 49, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 49, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 49, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 49, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 3, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 3, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 0, 7, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 96, 0
};

static const unsigned char _mmp_parser_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 51, 0
};

static const short _mmp_parser_eof_trans[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 142, 142, 142, 142, 
	142, 142, 142, 142, 0, 0, 0, 423
};

static const int mmp_parser_start = 1;
static const int mmp_parser_first_final = 293;
static const int mmp_parser_error = 0;

static const int mmp_parser_en_group_scanner = 294;
static const int mmp_parser_en_main = 1;

#line 110 "NanorexMMPImportExport.rl"


// static data from class NanorexMMPImportExport

char const NanorexMMPImportExport::_s_bondOrderString[NUM_BOND_TYPES] = {
	'1', '2', '3', 'a', 'g', 'c'
};

char const
NanorexMMPImportExport::_s_bondOrderNameString[NUM_BOND_TYPES][16] =
{
	"single", "double", "triple", "aromatic", "graphitic", "carbomeric"
};

char const NanorexMMPImportExport::_s_hybridizationName[8][8] = {
	"none", "sp", "sp2", "sp3", "X-hyb4", "X-hyb5", "X-hyb6", "X-hyb7"
};


/* CONSTRUCTOR */
NanorexMMPImportExport::NanorexMMPImportExport()
{
	reset();
}

/* DESTRUCTOR */
NanorexMMPImportExport::~NanorexMMPImportExport()
{
}


/* FUNCTION: reset */
void NanorexMMPImportExport::reset(void)
{
	inputFilename.clear();
	dataStoreInfo = (NXDataStoreInfo*) NULL;
	
	lineNum = 0;
	insideViewDataGroup = false;
	insideClipboardGroup = false;
	
	atomPtr = NULL;
	bondPtr = NULL;
	foundAtomList.clear();
	targetAtomList.clear();
	molPtr = NULL;
	molSetPtr = NULL;
	molSetPtrStack.clear();
	molStyle = "def";
	
	clipboardGroup = NULL;
	
	// defaultAtomStyle = "def";
	// defaultAtomStyleStack.clear();
	
	// ragel stack
	stackSize = 2;
	stack.clear();
	stack.resize(stackSize, 0);
	
    // initialize the ragel engine
	
#line 972 "NanorexMMPImportExport.cpp"
	{
	cs = mmp_parser_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}
#line 172 "NanorexMMPImportExport.rl"
}


/* FUNCTION: importFromFile */
NXCommandResult*
NanorexMMPImportExport::
importFromFile(NXMoleculeSet *rootMoleculeSetPtr,
               NXDataStoreInfo *dsInfo,
               const std::string& theFilename,
               int /*frameSetId*/, int /*frameIndex*/)
{
	reset();
	bool success = true;
		
	NXCommandResult *result = new NXCommandResult();
	result->setResult(NX_CMD_SUCCESS);
	
	ifstream mmpfile(theFilename.c_str(), ios::in);
	if(!mmpfile) {
		populateCommandResult(result,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
		success = false;
	}
	else {
		inputFilename = theFilename;
		dataStoreInfo = dsInfo;
		success = readMMP(mmpfile, rootMoleculeSetPtr);
	}
	
	// Set the meta information about the data store.
	if (success) {
		dataStoreInfo->setIsSingleStructure(true);
	}
	
	return result;
}


/* FUNCTION: readMMP */
bool NanorexMMPImportExport::readMMP(istream& instream,
                                     NXMoleculeSet *rootMoleculeSetPtr)
{
	p = RagelIstreamPtr(instream);
	pe = RagelIstreamPtr(instream, 0, ios::end);
	eof = pe;
	
	this->rootMoleculeSetPtr = rootMoleculeSetPtr;
	molSetPtr = NULL;
	// molSetPtrStack.push(molSetPtr);
	
    /// @todo handle first 'group' statement and molSetPtrStack initialization
	
    // Ragel parser implementation
	bool success = true;
	
#line 1037 "NanorexMMPImportExport.cpp"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _mmp_parser_actions + _mmp_parser_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 43:
#line 1 "NanorexMMPImportExport.rl"
	{ts = p;}
	break;
#line 1058 "NanorexMMPImportExport.cpp"
		}
	}

	_keys = _mmp_parser_trans_keys + _mmp_parser_key_offsets[cs];
	_trans = _mmp_parser_index_offsets[cs];

	_klen = _mmp_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _mmp_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _mmp_parser_indicies[_trans];
_eof_trans:
	cs = _mmp_parser_trans_targs_wi[_trans];

	if ( _mmp_parser_trans_actions_wi[_trans] == 0 )
		goto _again;

	_acts = _mmp_parser_actions + _mmp_parser_trans_actions_wi[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 24 "NanorexMMPImportExport.rl"
	{++lineNum;}
	break;
	case 2:
#line 41 "NanorexMMPImportExport.rl"
	{intVal = intVal*10 + ((*p)-'0');}
	break;
	case 4:
#line 46 "NanorexMMPImportExport.rl"
	{intVal2 = intVal2*10 + ((*p)-'0');}
	break;
	case 5:
#line 49 "NanorexMMPImportExport.rl"
	{intVal=-intVal;}
	break;
	case 6:
#line 73 "NanorexMMPImportExport.rl"
	{ charStringWithSpaceStart = p-1; }
	break;
	case 7:
#line 74 "NanorexMMPImportExport.rl"
	{ charStringWithSpaceStop = p; }
	break;
	case 8:
#line 83 "NanorexMMPImportExport.rl"
	{ stringVal.resize(charStringWithSpaceStop - charStringWithSpaceStart + 1);
			std::copy(charStringWithSpaceStart, charStringWithSpaceStop+1, stringVal.begin());
		}
	break;
	case 9:
#line 94 "NanorexMMPImportExport.rl"
	{ stringVal2.resize(charStringWithSpaceStop - charStringWithSpaceStart + 1);
			std::copy(charStringWithSpaceStart, charStringWithSpaceStop+1, stringVal2.begin());
		}
	break;
	case 10:
#line 29 "NanorexMMPImportExport.rl"
	{ atomId = intVal; /*cerr << "atomId = " << atomId << endl;*/ }
	break;
	case 11:
#line 34 "NanorexMMPImportExport.rl"
	{ atomicNum = intVal; /*cerr << "atomId = " << atomId << endl;*/}
	break;
	case 12:
#line 37 "NanorexMMPImportExport.rl"
	{x = intVal; }
	break;
	case 13:
#line 38 "NanorexMMPImportExport.rl"
	{y = intVal; }
	break;
	case 14:
#line 39 "NanorexMMPImportExport.rl"
	{z = intVal; }
	break;
	case 15:
#line 50 "NanorexMMPImportExport.rl"
	{ atomStyle = stringVal;
		    /*cerr << "atom_style = " << stringVal << endl;*/
		}
	break;
	case 16:
#line 67 "NanorexMMPImportExport.rl"
	{ newAtom(atomId, atomicNum, x, y, z, atomStyle); }
	break;
	case 17:
#line 71 "NanorexMMPImportExport.rl"
	{
		newBond(stringVal, intVal);
	}
	break;
	case 18:
#line 77 "NanorexMMPImportExport.rl"
	{ stringVal = *p; }
	break;
	case 19:
#line 87 "NanorexMMPImportExport.rl"
	{
		newBondDirection(intVal, intVal2);
	}
	break;
	case 20:
#line 102 "NanorexMMPImportExport.rl"
	{
		// stripTrailingWhiteSpaces(stringVal);
		// stripTrailingWhiteSpaces(stringVal2);
		newAtomInfo(stringVal, stringVal2);
	}
	break;
	case 21:
#line 9 "NanorexMMPImportExport.rl"
	{lineStart=p;}
	break;
	case 23:
#line 16 "NanorexMMPImportExport.rl"
	{
			if(stringVal2 == "")
				stringVal2 = "def";
			newMolecule(stringVal, stringVal2);
		}
	break;
	case 24:
#line 24 "NanorexMMPImportExport.rl"
	{lineStart=p;}
	break;
	case 25:
#line 35 "NanorexMMPImportExport.rl"
	{ newChunkInfo(stringVal, stringVal2); }
	break;
	case 26:
#line 26 "NanorexMMPImportExport.rl"
	{ lineStart = p; }
	break;
	case 27:
#line 29 "NanorexMMPImportExport.rl"
	{ newViewDataGroup(); }
	break;
	case 28:
#line 40 "NanorexMMPImportExport.rl"
	{ newMolStructGroup(stringVal/*, stringVal2*/); }
	break;
	case 29:
#line 47 "NanorexMMPImportExport.rl"
	{ end1(); }
	break;
	case 30:
#line 51 "NanorexMMPImportExport.rl"
	{ lineStart = p; }
	break;
	case 31:
#line 56 "NanorexMMPImportExport.rl"
	{ newClipboardGroup(); }
	break;
	case 32:
#line 60 "NanorexMMPImportExport.rl"
	{lineStart=p;}
	break;
	case 33:
#line 61 "NanorexMMPImportExport.rl"
	{ stringVal.clear(); }
	break;
	case 34:
#line 67 "NanorexMMPImportExport.rl"
	{ endGroup(stringVal); }
	break;
	case 35:
#line 71 "NanorexMMPImportExport.rl"
	{lineStart=p;}
	break;
	case 36:
#line 81 "NanorexMMPImportExport.rl"
	{ newOpenGroupInfo(stringVal, stringVal2); }
	break;
	case 37:
#line 65 "NanorexMMPImportExport.rl"
	{ kelvinTemp = intVal; }
	break;
	case 38:
#line 79 "NanorexMMPImportExport.rl"
	{ p--; {
	if((int)stack.size() == stackSize) {
		stackSize += stackSize;
	    stack.resize(stackSize, 0);
		// cerr << "Resized stack" << endl;
	}
{stack[top++] = cs; cs = 294; goto _again;}} }
	break;
	case 39:
#line 82 "NanorexMMPImportExport.rl"
	{ p--; {
	if((int)stack.size() == stackSize) {
		stackSize += stackSize;
	    stack.resize(stackSize, 0);
		// cerr << "Resized stack" << endl;
	}
{stack[top++] = cs; cs = 294; goto _again;}} }
	break;
	case 40:
#line 87 "NanorexMMPImportExport.rl"
	{ p--; {
	if((int)stack.size() == stackSize) {
		stackSize += stackSize;
	    stack.resize(stackSize, 0);
		// cerr << "Resized stack" << endl;
	}
{stack[top++] = cs; cs = 294; goto _again;}} }
	break;
	case 44:
#line 1 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 45:
#line 102 "NanorexMMPImportExport.rl"
	{act = 11;}
	break;
	case 46:
#line 89 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 47:
#line 90 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 48:
#line 91 "NanorexMMPImportExport.rl"
	{te = p+1;{{cs = stack[--top]; goto _again;}}}
	break;
	case 49:
#line 92 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 50:
#line 93 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 51:
#line 94 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 52:
#line 95 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 53:
#line 96 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 54:
#line 97 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 55:
#line 100 "NanorexMMPImportExport.rl"
	{te = p+1;}
	break;
	case 56:
#line 102 "NanorexMMPImportExport.rl"
	{te = p+1;{ cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}}
	break;
	case 57:
#line 102 "NanorexMMPImportExport.rl"
	{te = p;p--;{ cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}}
	break;
	case 58:
#line 1 "NanorexMMPImportExport.rl"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 11:
	{{p = ((te))-1;} cerr << lineNum << ": Syntax error or unsupported statement:\n\t";
			  std::copy(ts, te, std::ostream_iterator<char>(cerr));
			  cerr << endl;
			}
	break;
	default: break;
	}
	}
	break;
#line 1390 "NanorexMMPImportExport.cpp"
		}
	}

_again:
	_acts = _mmp_parser_actions + _mmp_parser_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 40 "NanorexMMPImportExport.rl"
	{intVal=(*p)-'0';}
	break;
	case 3:
#line 45 "NanorexMMPImportExport.rl"
	{intVal2=(*p)-'0';}
	break;
	case 22:
#line 11 "NanorexMMPImportExport.rl"
	{ stringVal2.clear(); /* 'style' string optional */ }
	break;
	case 41:
#line 1 "NanorexMMPImportExport.rl"
	{ts = 0;}
	break;
	case 42:
#line 1 "NanorexMMPImportExport.rl"
	{act = 0;}
	break;
#line 1419 "NanorexMMPImportExport.cpp"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _mmp_parser_eof_trans[cs] > 0 ) {
		_trans = _mmp_parser_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}
#line 228 "NanorexMMPImportExport.rl"
	
    // End-of-parsing sanity checks
	if(molSetPtrStack.size() != 0) {
		NXLOG_WARNING("NanorexMMPImportExport",
		              "At least one group has no matching egroup statement");
	}
	return success;
}


/* FUNCTION newAtom */
void NanorexMMPImportExport::newAtom(int id, int atomicNum, int x, int y, int z,
                                     string const& style)
{
	if(molPtr == NULL) {
		CSEVERE("No parent molecule for atom");
		return;
	}
	
	// error if id was previously specified
	map<int,OBAtom*>::const_iterator atomExistsQuery =
		foundAtomList.find(id);
	if(atomExistsQuery != foundAtomList.end()) {
		NXLOG_SEVERE("NanorexMMPImportExport",
		             "Atom-id " + NXUtility::itos(id) + " is repeated");
		return;
	}
	
	
	atomPtr = molPtr->NewAtom();
	NXAtomData *atomDataPtr = new NXAtomData(atomicNum);
	atomDataPtr->setIdx(id);
	atomDataPtr->setRenderStyleCode(style);
	atomPtr->SetData(atomDataPtr); // atomic number
	
	foundAtomList[id] = atomPtr;
	
	double const LENGTH_SCALE = 1.0e-13;
	atomPtr->SetVector(double(x) * LENGTH_SCALE,
	                   double(y) * LENGTH_SCALE,
	                   double(z) * LENGTH_SCALE);
	bondPtr = NULL;	
	
	CDEBUG("atom " + NXUtility::itos(atomId) + " (" + NXUtility::itos(atomicNum)
	       + ") (" + NXUtility::itos(x) + ',' + NXUtility::itos(y) + ',' +
	       NXUtility::itos(z) + ") " + atomStyle);
}


/* FUNCTION: newAtomInfo*/
void NanorexMMPImportExport::newAtomInfo(string const& key,
                                         string const& value)
{
	if(insideViewDataGroup)
		return;
	
	if(atomPtr != NULL) {
		if(key == "atomtype") { // hybridization info
			if(value == "sp") atomPtr->SetHyb(1);
			else if(value == "sp2") atomPtr->SetHyb(2);
			else if(value == "sp2_g") atomPtr->SetHyb(2);
			else if(value == "sp3") atomPtr->SetHyb(3);
			else if(value == "sp3d") atomPtr->SetHyb(3);
            // else ignore
		}
	}
	
	CDEBUG("info atom '" + key + "' = '" + value + "'");
}


/* FUNCTION: newBond */
void NanorexMMPImportExport::newBond(string const& bondType, int targetAtomId)
{
	if(insideViewDataGroup)
		return;
	
	assert(molPtr != NULL && atomPtr != NULL);
	
	map<int,OBAtom*>::iterator targetAtomExistsQuery =
		foundAtomList.find(targetAtomId);
	
	if(targetAtomExistsQuery == foundAtomList.end()) {
		CSEVERE("**ERROR** attempting to bond to non-existent atomID "
		       + NXUtility::itos(targetAtomId));
	}
	else {
		OBAtom *const targetAtomPtr = targetAtomExistsQuery->second;
		// guard against duplicates
		// also a hack to protect against Ragel's duplicate parsing
		// when encountering a blank line
		if(molPtr->GetBond(atomPtr, targetAtomPtr) == NULL) {
			// bond was not previously encountered, include
			CDEBUG("bonding atom #" + NXUtility::itos(atomPtr->GetIdx()) +
			       " to atom #" + NXUtility::itos(targetAtomPtr->GetIdx()));
			bondPtr = molPtr->NewBond();
			bondOrder = GetBondOrderFromType(bondType);
			bondPtr->SetBondOrder(bondOrder);
			bondPtr->SetBegin(atomPtr);
			bondPtr->SetEnd(targetAtomPtr);
			atomPtr->AddBond(bondPtr);
			targetAtomPtr->AddBond(bondPtr);
			CDEBUG("bond" + bondType + " " + NXUtility::itos(targetAtomId));
		}
		else {
			CSEVERE("bond to atom #" + NXUtility::itos(targetAtomId) +
			       " already exists");
		}
	}
	
}


/* FUNCTION: GetBondOrderFromType */
int NanorexMMPImportExport::GetBondOrderFromType(string const& type)
{
	if(type == "1")
		return 1;
	else if(type == "2")
	        return 2;
	else if(type == "3")
		return 3;
	else if(type == "a")
		return 4;
	else if(type == "c")
		return 5;
	else if (type == "g")
		return 6;
	else {
		return -1;
	}
}


/* FUNCTION: newBondDirection */
void NanorexMMPImportExport::newBondDirection(int atomId1, int atomId2)
{
	assert(false);
}


/* FUNCTION: newMolecule */
void
NanorexMMPImportExport::newMolecule(string const& name, string const& style)
{
	if(insideViewDataGroup)
		return;
	
	atomPtr = NULL;
	bondPtr = NULL;
	molPtr = molSetPtr->newMolecule();
	molPtr->SetTitle(name.c_str());
	if(style == "")
		molStyle = "def";
	else
		molStyle = style;
	CDEBUG("mol (" + name + ") " + style);
}


/* FUNCTION: newViewDataGroup */
void NanorexMMPImportExport::newViewDataGroup(void)
{
	insideViewDataGroup = true;
	CDEBUG("[special] group (View Data)");
}


/* FUNCTION: newMolStructGroup */
void NanorexMMPImportExport::newMolStructGroup(string const& name)
{
// 	if(insideClipboardGroup && molSetPtr == NULL) {
// 		// no active top-level group
// 		molSetPtr = new NXMoleculeSet;
// 		molSetPtr->setTitle(name);
// 		// dataStoreInfo->addClipboardStructure(molSetPtr);
// 	}
	
	// if in "View Data" group, ignore
	
	// if(molSetPtr != NULL) {
	/*else*/ if(!insideViewDataGroup) {
		// if in principal molecule-set group or active clipboard group
		
		if(molSetPtr == NULL) {
			// must be inside principal structure group
			assert(!insideClipboardGroup);
			molSetPtr = rootMoleculeSetPtr;
		}
// 		else if(!insideClipboardGroup && molSetPtr == NULL) {
// 			// entering principal structure group
// 			// all changes should go to supplied pointer
// 			molSetPtr = rootMoleculeSetPtr;
// 		}
		else {
			// If not at top-level inside principal structure group or
			// clipboard group, allocate new structure
			NXMoleculeSet *newMolSetPtr = new NXMoleculeSet;
			molSetPtr->addChild(newMolSetPtr);
			molSetPtrStack.push_back(molSetPtr);
			molSetPtr = newMolSetPtr;
		}
		molSetPtr->setTitle(name);
	}
	
	// ++molStructGroupLevel;
	
	CDEBUG("group (" + name + ")");
}


/* FUNCTION: newClipboardGroup */
void NanorexMMPImportExport::newClipboardGroup(void)
{
	assert(molSetPtr == NULL);
	assert(molSetPtrStack.size() == 0);
	
	if(!insideClipboardGroup && clipboardGroup == (NXMoleculeSet*) NULL) {
		clipboardGroup = new NXMoleculeSet;
		clipboardGroup->setTitle("Clipboard");
		molSetPtr = clipboardGroup;
		insideClipboardGroup = true;
		dataStoreInfo->setClipboardStructure(clipboardGroup);
		CDEBUG("[special] group (Clipboard)");
	}
	else {
		CSEVERE("Redefinition of 'Clipboard' group");
	}
}


/* FUNCTION: endGroup */
void NanorexMMPImportExport::endGroup(string const& name)
{
	// Must ensure that molSetPtr = NULL between top-level structure groups
	// Top-level structure groups are defined as the principal structure group
	// that occurs between the "View Data" and the "Clipboard" groups in the MMP
	// file, and those from various top-level 'group' statements in the
	// "Clipboard" group
	
	string groupName;
	if(insideViewDataGroup)
		groupName = "View Data";
	else if(insideClipboardGroup)
		groupName = (molSetPtr == NULL) ? "Clipboard" : molSetPtr->getTitle();
	else
		groupName = molSetPtr->getTitle();
	
	
	if(name != groupName) {
		NXLOG_WARNING("NanorexMMPImportExport",
		              "egroup (" + name + ") attempting to close "
		              "group (" + groupName + ')');
	}
	

	if(insideViewDataGroup) {
		insideViewDataGroup = false;
		molSetPtr = NULL;
	}
	else {
		// non top-level structure groups in clipboard or in the
		// principal structure group
		if(molSetPtrStack.size() == 0)  {
			molSetPtr = NULL;
			if(insideClipboardGroup)
				insideClipboardGroup = false;
		}
		else {
			molSetPtr = molSetPtrStack.back();
			molSetPtrStack.pop_back();
		}
	}
	
	CDEBUG("egroup (" + groupName + ')');
}


/* FUNCTION: newOpenGroupInfo */
void NanorexMMPImportExport::newOpenGroupInfo(std::string const& key,
                                              std::string const& value)
{
	/// @todo
	CDEBUG("info opengroup " + key + " = " + value);
}


/* FUNCTION: newChunkInfo */
void
NanorexMMPImportExport::newChunkInfo(std::string const& key,
                                     std::string const& value)
{
	CDEBUG("info chunk " + key + " = " + value);
	
	if(insideViewDataGroup)
		return;

	/// @todo
}


/* FUNCTION: end1 */
void NanorexMMPImportExport::end1(void)
{
	/// @todo
	CDEBUG("end1");
}


/* FUNCTION: exportToFile */
NXCommandResult*
NanorexMMPImportExport::
exportToFile(NXMoleculeSet *molSetPtr,
             NXDataStoreInfo */*dataStoreInfo*/,
             const std::string& theFilename,
             int /*frameSetId*/, int /*frameIndex*/)
{
	NXCommandResult *result = new NXCommandResult();
	result->setResult(NX_CMD_SUCCESS);
	
	ofstream mmpfile(theFilename.c_str(), ios::out);
	if(!mmpfile) {
		populateCommandResult(result,
		                      (string("Couldn't open file: ") + theFilename)
		                      .c_str());
	}
	else {
		PrintMoleculeSet(mmpfile, molSetPtr);
		mmpfile.close();
	}
	return result;
}


/* FUNCTION: GetAtomID */
/* static */
int NanorexMMPImportExport::GetAtomID(OBAtom *atomPtr)
{
	NXAtomData *atomIDData = 
		dynamic_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	int atomID = atomIDData->getIdx();
	return atomID;
}


/* FUNCTION: GetAtomRenderStyleCode */
/* static */
string const&
NanorexMMPImportExport::GetAtomRenderStyleCode(OBAtom *const atomPtr)
{
	NXAtomData *atomDataPtr =
		dynamic_cast<NXAtomData*>(atomPtr->GetData(NXAtomDataType));
	string const& atomStyle = atomDataPtr->getRenderStyleCode();
	return atomStyle;
}


/* FUNCTION: PrintMolecule */
/* static */
void NanorexMMPImportExport::PrintMolecule(ostream& o,
                                           OBMol *const molPtr)
{
	set<int> prevAtomIdx;
	set<int> prevBondIdx; /// @todo - replace with simple bond count
	
	o << "mol (" << molPtr->GetTitle() << ')' << endl;
	
	OBAtomIterator atomIter;
	OBAtom *atomPtr = NULL;
    // For each atom ...
	for(atomPtr = molPtr->BeginAtom(atomIter);
	    atomPtr != NULL;
	    atomPtr = molPtr->NextAtom(atomIter))
	{
        // ... write the 'atom' line ...
		int atomID = GetAtomID(atomPtr);
		o << "atom " << atomID << " (" << atomPtr->GetAtomicNum() << ") " << '('
			<< atomPtr->x() << ',' << atomPtr->y() << ',' << atomPtr->z()
			<< ") " << GetAtomRenderStyleCode(atomPtr) << endl;
		
		if(atomPtr->GetHyb() != 0) {
			o << "info atom atomtype = "
				<< _s_hybridizationName[atomPtr->GetHyb()];
		}
		
        // ... write the 'bond' lines for this atom ...
        // ... first sort bonds by type ...
		OBBondIterator bondIter;
		OBBond *bondPtr = NULL;
		vector<int> bondCategories[6];
		for(bondPtr = atomPtr->BeginBond(bondIter);
		    bondPtr != NULL;
		    bondPtr = atomPtr->NextBond(bondIter))
		{
            // write bond statement only if target atom was previously written
			OBAtom *nbrAtomPtr = bondPtr->GetNbrAtom(atomPtr);
			int nbrAtomID = GetAtomID(nbrAtomPtr);
			if(prevAtomIdx.find(nbrAtomID) != prevAtomIdx.end()) {
				int bondOrder = bondPtr->GetBondOrder();
				bondCategories[bondOrder-1].push_back(nbrAtomID);
                // record bond for sanity check at end
				prevBondIdx.insert(bondPtr->GetIdx());
			}
		}
		
        // ... write the bonds, one line per type ...
		for(int i=0; i<6; ++i) {
			int J = bondCategories[i].size();
			if(J > 0) {
				o << "bond" << _s_bondOrderString[i];
				for(int j=0; j<J; ++j)
					o << ' ' << bondCategories[i][j];
				o  << endl;
			}
		}
		
        // record atom as 'previously written'
		prevAtomIdx.insert(atomID);
	}
	
    // debug diagnostics
	ostringstream debugMsg;
	debugMsg << "# atoms check ";
	if(molPtr->NumAtoms() == prevAtomIdx.size())
		debugMsg << "PASS ("  << molPtr->NumAtoms() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumAtoms() << " != " << prevAtomIdx.size()<< endl;
	
	debugMsg << "# bonds check ";
	if(molPtr->NumBonds() == prevBondIdx.size())
		debugMsg << "PASS (" << molPtr->NumBonds() << ')' << endl;
	else
		debugMsg << "FAIL: "
		<< molPtr->NumBonds() << " != " << prevBondIdx.size()<< endl;
	
	debugMsg.flush();
	NXLOG_DEBUG("NanorexMMPImportExport::PrintMoleculeSet",
	            debugMsg.str().c_str());
}


/* FUNCTION: PrintMoleculeSet */
/* static */
void NanorexMMPImportExport::PrintMoleculeSet(ostream& o,
                                              NXMoleculeSet *const molSetPtr)
{
	// Iterate over all child molecules
	OBMolIterator molIter;
	for(molIter = molSetPtr->moleculesBegin();
	    molIter != molSetPtr->moleculesEnd();
	    ++molIter)
	{
		PrintMolecule(o, *molIter);
	}
	
    // Iterate over all child molecule sets
	NXMoleculeSetIterator molSetIter;
	for(molSetIter = molSetPtr->childrenBegin();
	    molSetIter != molSetPtr->childrenEnd();
	    ++molSetIter)
	{
		PrintMoleculeSet(o, *molSetIter);
	}
}


/* FUNCTION: populateCommandResult */
void
NanorexMMPImportExport::populateCommandResult (NXCommandResult* result,
                                               const string& message)
{
	result->setResult(NX_PLUGIN_REPORTS_ERROR);
	vector<QString> resultVector;
	resultVector.push_back("OpenBabelImportExport");
	resultVector.push_back(message.c_str());
	result->setParamVector(resultVector);
}

Q_EXPORT_PLUGIN2 (NanorexMMPImportExport, NanorexMMPImportExport)

