# Copyright 2004-2007 Nanorex, Inc.  See LICENSE file for details. 
"""
selectAtomsMode.py 

$Id$


History:

Some things that need cleanup in this code [bruce 060721 comment]: ####@@@@
- redundant use of glRenderMode (see comment where that is used)

- drag algorithms for various object types and modifier keys are split over
lots of methods with lots of common but not identical code. For example, a
set of atoms and jigs can be dragged in the same way, by two different
pieces of code depending on whether an atom or jig in the set was clicked
on. If this was cleaned up, so that objects clicked on would answer
questions about how to drag them, and if a drag_handler object was created
to handle the drag (or the object itself can act as one, if only it is
dragged and if it knows how), the code would be clearer, some bugs would be
easier to fix, and some NFRs easier to implement. [bruce 060728 -- I'm
adding drag_handlers for use by new kinds of draggable or buttonlike things
(only in selectAtoms mode and subclasses), but not changing how old dragging
code works.]

- Ninad 070216 split this out of selectMode.py 

"""


from PyQt4.Qt import QMouseEvent

import env

from chem import Atom
from jigs import Jig
from bonds import Bond
from elements import Singlet

from debug import print_compact_traceback
from Utility import Group

from selectMode import selectMode
from selectMode import DRAG_STICKINESS_LIMIT

from debug_prefs import debug_pref, Choice_boolean_True

from prefs_constants import bondHighlightColor_prefs_key
from prefs_constants import bondpointHighlightColor_prefs_key
from prefs_constants import atomHighlightColor_prefs_key
from prefs_constants import deleteBondHighlightColor_prefs_key
from prefs_constants import deleteAtomHighlightColor_prefs_key

class selectAtomsMode(selectMode):
    """
    Select Atoms Mode
    """
    modename = 'SELECTATOMS'
    default_mode_status_text = "Mode: Select Atoms"
    highlight_singlets = False 
        # Don't highlight singlets in selectAtomsMode. Fixes bug 1540. mark 060220.
    water_enabled = False # Fixes bug 1583. mark 060301.

    eCCBtab1 = [1, 2,
                5, 6, 7, 8, 9, 10,
                13, 14, 15, 16, 17, 18,
                32, 33, 34, 35, 36,
                51, 52, 53, 54]

    def __init__(self, glpane):
        selectMode.__init__(self, glpane)

    def Enter(self): 
        selectMode.Enter(self)        
        self.o.assy.permit_pick_atoms()
        self.w.win_update()
            #k needed? I doubt it, I bet caller of Enter does it
            # [bruce comment 050517]

        # Reinitialize previously picked atoms (ppas).
        self.o.assy.ppa2 = self.o.assy.ppa3 = None

        self.o.selatom = None
        self.reset_drag_vars()
        self.dont_update_gui = True # until changed in init_gui
        self.graphicsMode.ignore_next_leftUp_event = False
            # Set to True in leftDouble() and checked by the left*Up()
            # event handlers to determine whether they should ignore the
            # (second) left*Up event generated by the second LMB up/release
            # event in a double click.

    def reset_drag_vars(self):
        """
        Overrides L{selectMode.reset_drag_vars}
        """
        selectMode.reset_drag_vars(self)

        self.smooth_reshaping_drag = False
            # set to True when we're going to do a "smooth-reshaping drag" in 
            #the current drag. [bruce 070412]
            ###WARNING: this method is in selectAtomsMode.py in Qt3 branch, and
            ##in selectMode.py in Qt4 branch.
            # When merging this change from Qt3 to Qt4, this specific part will
            # need manual merging
            # (unless this entire method is first moved over in Qt3, but that 
            #  might complicate the merging as well, in the short run, though 
            # it would be a good change in the longer run).


    def set_selection_filter(self, enabled):
        """
        Set/ Unset selection filter. Subclasses should override this
	@param: enabled: boolean that decides whether to turn 
	selection filter on or off.
	"""
        pass 


    def get_real_atom_under_cursor(self, event):
        """
        If the object under the cursor is a real atom, return it.  
        Otherwise, return None.
        """
        obj = self.get_obj_under_cursor(event)
        if isinstance(obj, Atom):
            if not obj.is_singlet():
                return obj
        return None

    def bond_type_changer_is_active(self): #bruce 060702
        """
        [subclasses can override this; see depositMode implem for docstring]
        """
        return False

    def _getAtomHighlightColor(self, selobj):
        """
	Return the Atom highlight color 
	@return: Highlight color of the object (Atom or Singlet)
	""" 
        assert isinstance(selobj, Atom)

        if selobj.is_singlet():
            return self._getSingletHighlightColor()
        else:
            if self.only_highlight_singlets: 
                # Above is True only when dragging a bondpoint (in Build mode).
                # Highlight this atom if it has bondpoints.
                if selobj.singNeighbors():
                    if self.current_obj in selobj.singNeighbors(): 
                        # Do not highlight the atom that the current 
                        # singlet belongs to.
                        # Fixes bug 1522. mark 060301.
                        return None
                    return env.prefs[atomHighlightColor_prefs_key]
                        # Possible bug: bruce 070413 seems to observe this not 
                        # working except when the mouse goes over
                        # the end of a bond attached to that atom 
                        # (which counts as the atom for highlighting),
                        # or when the atom is already highlighted. 
                        # (Could it be the cursor going over the rubberband
                        # line? Not always. But it might be intermittent.)
                elif selobj.element.symbol == 'Sh':
                    ##e and isinstance(self.current_obj, Atom), and is_singlet, 
                    ## and its neighbor is a Pl:
                    # bruce 070413 KLUGE: make new depositMode behavior in 
                    #(a specialcase of) this case possible
                    ###e [needs to be generalized, and made so that only one 
                    ###place needs to know this condition;
                    # note that the above is not the complete condition since 
                    # i got lazy (and this NFR is urgent)]
                    ##if env.debug():
                        ##print "highlighting Sh like a bondpoint"
                    # look like bondpoint, since treated as one--
                    return env.prefs[bondpointHighlightColor_prefs_key] 
                else:
                    return None
            if self.o.modkeys == 'Shift+Control':
                return env.prefs[deleteAtomHighlightColor_prefs_key]
            else:
                return env.prefs[atomHighlightColor_prefs_key]

    def _getSingletHighlightColor(self):
        """
	Return the Singlet highlight color 
	@return: Highlight color of the Singlet
	"""
        # added highlight_singlets to fix bug 1540. mark 060220.
        if self.highlight_singlets: 
            #bruce 060702 part of fixing bug 833 item 1
            likebond = self.bond_type_changer_is_active() 
            if likebond:
                # clicks in this tool-state modify the bond, 
                # not the bondpoint, so let the color hint at that
                return env.prefs[bondHighlightColor_prefs_key]
            else:
                return env.prefs[bondpointHighlightColor_prefs_key]
        else:
            return None

    def _getBondHighlightColor(self, selobj):
        """
	Return the Bond highlight color 
	@return: Highlight color of the bond
	"""
        assert isinstance(selobj, Bond)
        # Following might be an outdated or 'not useful anymore' comment. 
        # Keeping it for now -- Ninad 2007-10-14

        #bruce 050822 experiment: debug_pref to control whether to highlight 
        # bonds
        # (when False they'll still obscure other things -- need to see if 
        # this works for Mark ###@@@)
        # ###@@@ PROBLEM with this implem: they still have a cmenu and 
        #can be deleted by cmd-del (since still in selobj);
        # how would we *completely* turn this off? Need to see how 
        # GLPane decides whether a drawn thing is highlightable --
        # maybe just by whether it can draw_with_abs_coords? 
        # Maybe by whether it has a glname (not toggleable instantly)?
        # ... now i've modified GLPane to probably fix that...
        highlight_bonds = debug_pref("highlight bonds", Choice_boolean_True)
        if not highlight_bonds:
            return None
        ###@@@ use checkbox to control this; when false, return None
        if selobj.atom1.is_singlet() or selobj.atom2.is_singlet():
            # this should never happen, since singlet-bond is part of 
            # singlet for selobj purposes [bruce 050708]
            print "bug: selobj is a bond to a bondpoint, should have " \
                  "borrowed glname from that bondpoint", selobj
            return None # precaution
        else:
            if self.only_highlight_singlets:
                return None
            if self.o.modkeys == 'Shift+Control': 
                return env.prefs[deleteBondHighlightColor_prefs_key]
            else:
                return env.prefs[bondHighlightColor_prefs_key] 

    def update_selatom(self, 
                       event, 
                       singOnly = False, 
                       resort_to_prior = True):
        """
        Keep glpane.selatom up-to-date, as atom under mouse based on <event>; 
        When <singOnly> is True, only keep singlets up-to-date. 
        [not sure what that phrase means -- bruce 060726]

        Note: this method changes glpane.selatom but it
        never changes glpane.selobj. It is deprecated
        in favor of using update_selobj and glpane.selobj alone.

        When <resort_to_prior> is true (the default), then if
        selobj is not presently known, use the prior value;
        otherwise use None. (As of 071025 no callers change
        the default behavior.)

        Warning: glpane.selobj is not updated except by paintGL,
        and glpane.selatom is based on it, so after a mouse motion
        it will not become correct until after the next repaint.
        """
        #bruce 050124 split this out of bareMotion so options can vary
        #bruce 071025 revised docstring, removed msg_about_click option
        
        glpane = self.o
        if event is None:
            # event (and thus its x,y position) is not known 
            # [bruce 050612 added this possibility]
            known = False
        else:
            known = self.update_selobj(event) 
            # this might do gl_update (but the paintGL triggered by that 
            # only happens later!),
            # and (when it does) might not know the correct obj...
            # so it returns True iff it did know the correct obj (or None) to 
            #store into glpane.selobj, False if not.
        assert known in [False, True], \
               "known should be False or True, not %r" % (known,)
        
        # If not known, use None or use the prior one? This is up to the caller
        # since the best policy varies. Default is resort_to_prior = True since 
        # some callers need this and I did not yet scan them all and fix them.
        # [bruce circa 050610]
        # Update: it might be that resort_to_prior = True is the only
        # correct value for any caller. Not sure. For now, leave in the code
        # for both ways. [bruce 071025]

        selobj = glpane.selobj

        if not known:
            if resort_to_prior: 
                pass # stored one is what this says to use, and is what we'll 
                     # use
                ## print "resort_to_prior using",glpane.selobj
                    # [this is rare, I guess since paintGL usually has time 
                    #  to run after bareMotion before clicks]
            else:
                selobj = None
        oldselatom = glpane.selatom
        atm = selobj
        if not isinstance(atm, Atom):
            atm = None
        if atm is not None and (atm.element is Singlet or not singOnly):
            pass # we'll use this atm as the new selatom
        else:
            atm = None # otherwise we'll use None
        glpane.selatom = atm

        if glpane.selatom is not oldselatom:
            # update display (probably redundant with side effect of 
            # update_selobj; ok if it is, and I'm not sure it always is #k)
            glpane.gl_update_highlight() # draws selatom too, since its chunk 
            # is not hidden [comment might be obs, as of 050610]

        return # from update_selatom


    # == LMB event handling methods ====================================
    #
    # The following sections include all the LMB event handling methods for
    # selectAtomsMode. The section is organized in the following order and
    # includes the following methods:
    #
    #   - LMB down-click (button press) methods
    #       leftShiftDown()
    #       leftCntlDown()
    #       leftDown()
    #
    #   - LMB drag methods
    #       leftShiftDrag()
    #       leftDrag()
    # 
    #   - LMB up-click (button release) methods
    #       leftShiftUp()
    #       leftCntlUp()
    #       leftUp()
    #
    #   - LMB double-click method (only one)
    #       leftDouble()
    #
    # For more information about the LMB event handling scheme, go to
    # http://www.nanoengineer-1.net/ and click on the "Build Mode UI
    # Specification" link.

    # == LMB down-click (button press) methods


    def leftDown(self, event):
        """
        Event handler for all LMB press events.
        """
        # Note: the code of selectAtomsMode and selectMolsMode .leftDown methods
        # is very similar, so I'm removing the redundant comments from
        # the other one (selectMolsMode); i.e. some of this method's comments
        # also apply to the same code in the same method in selectMolsMode.
        # [bruce 071022]

        self.set_cmdname('BuildClick')
            # TODO: this should be set again later (during the same drag)
            # to a more specific command name.

        self.o.assy.permit_pick_atoms()
            # Fixes bug 1413, 1477, 1478 and 1479.  Mark 060218.
        self.reset_drag_vars()
        env.history.statusbar_msg(" ")
            # get rid of obsolete msg from bareMotion [bruce 050124; imperfect]

        self.LMB_press_event = QMouseEvent(event)
            # Make a copy of this event and save it. 
            # We will need it later if we change our mind and start selecting
            # a 2D region in leftDrag(). Copying the event in this way is
            # necessary because Qt will overwrite <event> later (in leftDrag)
            # if we simply set self.LMB_press_event = event.  mark 060220.

        self.LMB_press_pt_xy = (event.pos().x(), event.pos().y())
            # <LMB_press_pt_xy> is the position of the mouse in window
            # coordinates when the LMB was pressed. Used in
            # mouse_within_stickiness_limit (called by leftDrag() and other
            # methods). We don't bother to vertically flip y using self.height
            # (as mousepoints does), since this is only used for drag distance
            # within single drags.

        obj = self.get_obj_under_cursor(event)
            # If highlighting is turned on, get_obj_under_cursor() returns
            # atoms, singlets, bonds, jigs, or anything that can be highlighted
            # and end up in glpane.selobj. [bruce revised this comment, 060725]
            # (It can also return a "background object" from testmode, as of
            # bruce 070322.)
            # If highlighting is turned off, get_obj_under_cursor() returns
            # atoms and singlets (not bonds or jigs).
            # [not sure if that's still true -- probably not. bruce 060725 addendum]

        if obj is None: # Cursor over empty space.
            self.emptySpaceLeftDown(event)
            return

        #bruce 060725 new feature. Any selobj can decide how clicks/drags
        # on it should behave, if it wants to. Normally this will not apply
        # to an Atom, Bond, or Jig, but there's no reason it couldn't in
        # theory (except that some code may check for those classes first,
        # before checking for selobj using this API).
        # WARNING: API is experimental and is very likely to be modified.
        # (But note that testmode and the exprs module do depend on it.)
        # For example, we're likely to tell it some modkeys, something
        # about this mode, the mousepoints, etc, and to respond more
        # fundamentally to whatever is returned.
        # (see also mouseover_statusbar_message, used in GLPane.set_selobj)
        method = getattr(obj, 'leftClick', None)
        if method:
            done = self.call_leftClick_method(method, obj, event)
            if done:
                return

        self.doObjectSpecificLeftDown(obj, event)

        self.w.win_update()
            #k (is this always desirable? note, a few cases above return
            # early just so they can skip it.)
        
        return # from selectAtomsMode.leftDown

    def call_leftClick_method(self, method, obj, event): #bruce 071022 split this out
        """
        ###doc
        [return True if nothing more should be done to handle this event,
        False if it should be handled in the usual way]
        """
        gl_event_info = self.dragstart_using_GL_DEPTH( event, more_info = True)
        self._drag_handler_gl_event_info = gl_event_info 
        farQ_junk, hitpoint, wX, wY, depth, farZ = gl_event_info
        del wX, wY, depth, farZ
        try:
            retval = method(hitpoint, event, self)
                ##e more args later -- mouseray? modkeys?
                # or use callbacks to get them?
                #bruce 061120 changed args from (hitpoint, self) to
                # (hitpoint, event, self) [where self is the mode object]
                # a new part of the drag_handler API is access by method to
                # self._drag_handler_gl_event_info [bruce 061206]
                #e (we might decide to change that to a dict so it's easily
                # extendable after that, or we might add more attrs
                # or methods of self which the method call is specifically
                # allowed to access as part of that API #e)
        except:
            print_compact_traceback("exception ignored in %r.leftClick: " % (obj,))
            return True
        # If retval is None, the object just wanted to know about the click,
        # and now we handle it normally (including the usual special cases for
        # Atom, etc).
        # If retval is a drag handler (#doc), we let that object handle
        # everything about the drag. (Someday, all of our object/modkey-specific
        # code should be encapsulated into drag handlers.)
        # If retval is something else... not sure, so nevermind for now, just
        # assume it's a drag handler. ###@@@
        self.drag_handler = retval # needed even if this is None
            ##e should wrap with something which exception-protects all method
            # calls
        if self.drag_handler is not None:
            # We're using a drag_handler to override most of our behavior for
            # this drag.
            self.dragHandlerSetup(self.drag_handler, event)
                # does updates if needed
            return True
        return False

    # == LMB drag methods

    def leftDrag(self, event):
        """
        Event handler for all LMB+Drag events.
        """
        # Do not change the order of the following conditionals unless you know
        # what you're doing.  mark 060208.

        if self.mouse_within_stickiness_limit(event, DRAG_STICKINESS_LIMIT):
            # [let this happen even for drag_handlers -- bruce 060728]
            return

        if self.cursor_over_when_LMB_pressed == 'Empty Space':
            if self.drag_handler is not None:
##                print "possible bug (fyi): self.drag_handler is not None, "\
##                "but cursor_over_when_LMB_pressed == 'Empty Space'", \
##                      self.drag_handler #bruce 060728
                # bruce 070322: this is permitted now, and we let the
                # drag_handler handle it (for testmode & exprs module)...
                # however, I don't think this new feature will be made use of
                # yet, since testmode will instead sometimes override
                # get_obj_under_cursor to make it return a background object
                # rather than None, so this code will not set
                # cursor_over_when_LMB_pressed to 'Empty Space'.
                self.dragHandlerDrag(self.drag_handler, event)
                    # does updates if needed
            else:
                self.emptySpaceLeftDrag(event)
            return

        if self.o.modkeys is not None:
            # If a drag event has happened after the cursor was over an atom
            # and a modkey is pressed, do a 2D region selection as if the
            # atom were absent.
            # [let this happen even for drag_handlers -- bruce 060728]
            self.emptySpaceLeftDown(self.LMB_press_event)
            #bruce 060721 question: why don't we also do emptySpaceLeftDrag
            # at this point?
            return

        if self.drag_handler is not None:
            #bruce 060728
            self.dragHandlerDrag(self.drag_handler, event)
                # does updates if needed
            return

        obj = self.current_obj

        if obj is None: # Nothing dragged (or clicked); return.
            return

        self.doObjectSpecificLeftDrag(obj, event)

        # No gl_update() needed. Already taken care of.
        return

    def doObjectSpecificLeftDrag(self, object, event):
        """
	Call objectLeftDrag methods depending on the object instance.
	Overrides selectMode.doObjectSpecificLeftDrag

	@param object: object under consideration. 
	@type  object: instance 
	@param event: Left drag mouse event 
	@type  event: QMouseEvent instance
	"""
        obj = object

        if isinstance(obj, Atom):
            if obj.is_singlet(): # Bondpoint
                self.singletDrag(obj, event)
            else: # Real atom
                self.atomDrag(obj, event)        
        elif isinstance(obj, Bond): # Bond
            self.bondDrag(obj, event)        
        elif isinstance(obj, Jig): # Jig
            self.jigDrag(obj, event)        
        else: # Something else
            pass

    def posn_str(self, atm): #bruce 041123
        """
        Return the position of an atom
        as a string for use in our status messages.
        (Also works if given an atom's position vector itself -- kluge, sorry.)
        """
        try:
            x,y,z = atm.posn()
        except AttributeError:
            x,y,z = atm # kluge to accept either arg type
        return "(%.2f, %.2f, %.2f)" % (x,y,z)


    # == LMB up-click (button release) methods

    def leftUp(self, event):
        """
        Event handler for all LMB release events.
        """
        env.history.flush_saved_transients()

        if self.ignore_next_leftUp_event:
            # This event is the second leftUp of a double click, so ignore it.
            # [REVIEW: will resetting this flag here cause trouble for a triple
            #  click? I guess/hope not, since that also calls leftDouble and
            #  sets this. bruce comment 071022]
            self.ignore_next_leftUp_event = False
            self.update_selobj(event) # Fixes bug 1467. mark 060307.
            return

        if self.cursor_over_when_LMB_pressed == 'Empty Space':
            self.emptySpaceLeftUp(event)
            return

        if self.mouse_within_stickiness_limit(event, DRAG_STICKINESS_LIMIT):
            event = self.LMB_press_event
                # pretend the mouse didn't move -- this replaces our argument
                # event, for passing to *leftUp methods [bruce 060728 comment]

        if self.drag_handler:
            #bruce 060728
            self.dragHandlerLeftUp(self.drag_handler, event) # does updates if needed
            self.leftUp_reset_a_few_drag_vars() #k needed??
            return

        obj = self.current_obj

        if obj is None: # Nothing dragged (or clicked); return.
            return

        self.doObjectSpecificLeftUp(obj, event)


        self.leftUp_reset_a_few_drag_vars()
        #bruce 041130 comment: it forgets selatom, but doesn't repaint,
        # so selatom is still visible; then the next event will probably
        # set it again; all this seems ok for now, so I'll leave it alone.
        #bruce 041206: I changed my mind, since it seems dangerous to leave
        # it visible (seemingly active) but not active. So I'll repaint here.
        # In future we can consider first simulating a update_selatom at the
        # current location (to set selatom again, if appropriate), but it's
        # not clear this would be good, so *this* is what I won't do for now.
        #self.o.gl_update() #& Now handled in modkey*() methods. mark 060210.

        return # from selectAtomsMode.leftUp

    def leftUp_reset_a_few_drag_vars(self):
        """
        reset a few drag vars at the end of leftUp --
        might not be safe to reset them all
        (e.g. if some are used by leftDouble)
        """
        #bruce 060728 split this out, guessed docstring
        self.baggage = []
        self.current_obj = None #bruce 041130 fix bug 230
            # later: i guess this attr had a different name then [bruce 060721]
        self.o.selatom = None #bruce 041208 for safety in case it's killed
        return

    # == LMB double-click method

    def leftDouble(self, event): # mark 060126.
        """
        Double click event handler for the left mouse button.

        @note: Also called for a triple click event.
        These can be distinguished using the flag
        self.glpane.tripleClick.
        """

        self.ignore_next_leftUp_event = True

        if isinstance(self.obj_doubleclicked, Atom):
            if self.obj_doubleclicked.is_singlet():
                self.singletLeftDouble()
                return
            else:
                self.atomLeftDouble()

        if isinstance(self.obj_doubleclicked, Bond):
            self.bondLeftDouble()

        if isinstance(self.obj_doubleclicked, Jig):
            self.jigLeftDouble()

    # == end of LMB event handler methods

    def update_cursor_for_no_MB(self):
        """
        Update the cursor for 'Select Atoms' mode (selectAtomsMode)
        """
        ## print "selectAtomsMode.update_cursor_for_no_MB(): button=",\
        ## self.o.button, ", modkeys=", self.o.modkeys

        if self.w.selection_filter_enabled:
            self.update_cursor_for_no_MB_selection_filter_enabled()
        else:
            self.update_cursor_for_no_MB_selection_filter_disabled()

    def update_cursor_for_no_MB_selection_filter_disabled(self):
        """
        Update the cursor for when the Selection Filter is disabled (default).
        """
        if self.o.modkeys is None:
            self.o.setCursor(self.w.SelectAtomsCursor)
        elif self.o.modkeys == 'Shift':
            self.o.setCursor(self.w.SelectAtomsAddCursor)
        elif self.o.modkeys == 'Control':
            self.o.setCursor(self.w.SelectAtomsSubtractCursor)
        elif self.o.modkeys == 'Shift+Control':
            self.o.setCursor(self.w.DeleteCursor)
        else:
            print "Error in update_cursor_for_no_MB(): Invalid modkey=", self.o.modkeys
        return

    def update_cursor_for_no_MB_selection_filter_enabled(self):
        """
        Update the cursor for when the Selection Filter is enabled.
        """
        if self.o.modkeys is None:
            self.o.setCursor(self.w.SelectAtomsFilterCursor)
        elif self.o.modkeys == 'Shift':
            self.o.setCursor(self.w.SelectAtomsAddFilterCursor)
        elif self.o.modkeys == 'Control':
            self.o.setCursor(self.w.SelectAtomsSubtractFilterCursor)
        elif self.o.modkeys == 'Shift+Control':
            self.o.setCursor(self.w.DeleteFilterCursor) # Fixes bug 1604. mark 060303.
        else:
            print "Error in update_cursor_for_no_MB(): Invalid modkey=", self.o.modkeys
        return

    def rightShiftDown(self, event):
        selectMode.rightShiftDown(self, event)
        self.o.setCursor(self.w.SelectAtomsCursor)

    def rightCntlDown(self, event):          
        selectMode.rightCntlDown(self, event)
        self.o.setCursor(self.w.SelectAtomsCursor)

    def _highlightAtoms(self, grp):
        """
        Highlight atoms or chunks inside ESPImage jigs.
        """
        # Note: this is not directly related to
        # ESPImage's translucency (handled by code in
        # Utility and/or GraphicsMode which detects its
        # .draw_later_due_to_translucency setting).
        # Rather it's due to its wanting to overdraw
        # certain model objects. AFAIK it doesn't need
        # this separate pass to do that, but could just
        # do it inside its draw method, but I'm not sure --
        # maybe not unless that method ran during the usual
        # pass. If that alg was fixed so that esp draw did run then,
        # it could do this itself and not need this special case,
        # I suspect. [bruce 071026]
        
        from jigs_planes import ESPImage

        if isinstance(grp, ESPImage): 
            grp.highlightAtomChunks()
        elif isinstance(grp, Group):    
            for m in grp.members:
                if isinstance(m, ESPImage):
                    m.highlightAtomChunks()
                elif isinstance(m, Group):
                    self._highlightAtoms(m)
        return

    def Draw(self):
        """
        Draw the model for Select Atoms mode.
        """
        selectMode.Draw(self)
        self._highlightAtoms(self.o.assy.part.topnode)
        return

    pass # end of class selectAtomsMode

# end

