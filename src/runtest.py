#!/usr/bin/python

"""runtest.py description.test [--generate]

runs the described test and concatenates the results
to stdout (after removing lines which vary inconsequentially (e.g. dates)

if --generate is given, the results are written to $base.out, and
the end structure is written to $base.xyzcmp (if the test type
is "struct").

a description.test file looks like:

comment lines, which start with a #, and are ignored
blank lines, which are ignored
lines containing one of the following directives:

TYPE [ min | struct | dyn | fail ]
  Choose one of the given types of tests.  The test type controls
  the defaults for the other directives.  Test type "min" performs
  a minimization, and checks the program outputs, including the
  trace file and xyz file are identical.  Test type "struct" also
  performs a minimization, but relies on a structure comparison
  to test for success, rather than the exact program output.
  Test type "dyn" performs a dynamics run, and requires that output
  be identical, as for "min".  Default value for TYPE is "min".

INPUT files...
  The listed files are copied to the temporary directory before
  the test is run.  Defaults to the name of the description file
  with the .test replaced by .mmp ($base.mmp).

OUTPUT files...
  The listed files contain significant data to be compared.
  They are concatenated together, run through a sed script to
  remove inconsequential lines, and the result goes to stdout.
  In addition to files explicitly generated by the program
  stdout and stderr are available.  The file exitvalue contains
  the shell exit code $? resulting from executing the command.
  Defaults to "exitvalue stderr stdout $base.trc $base.xyz" for
  test types "min" and "dyn".  Defaults to "exitvalue structurematch stderr"
  for test type "struct".

PROGRAM command...
  This is the complete command line to run (excluding io redirection).
  Defaults to "/tmp/testsimulator -m -x $base.mmp" for test types "min" and
  "struct".  Defaults to "/tmp/testsimulator -f100 -t300 -i10 -x $base.mmp"
  for test type "dyn".

STRUCT file
  The listed file is compared against the $base.xyz file generated
  by PROGRAM.  Defaults to "" for test types "min" and "dyn", and
  no structure comparison is performed.  Defaults to "$base.xyzcmp"
  for test type "struct".

  # runtest.sh description.test [--generate]

runs the described test and concatenates the results
to stdout (after removing lines which vary inconsequentially (e.g. dates)

if --generate is given, the results are written to $base.out, and
  the end structure is written to $base.xyzcmp (if the test type
  is "struct").

a description.test file looks like:

comment lines, which start with a #, and are ignored
blank lines, which are ignored
lines containing one of the following directives:

TYPE [ min | struct | dyn ]
  Choose one of the given types of tests.  The test type controls
  the defaults for the other directives.  Test type "min" performs
  a minimization, and checks the program outputs, including the
  trace file and xyz file are identical.  Test type "struct" also
  performs a minimization, but relies on a structure comparison
  to test for success, rather than the exact program output.
  Test type "dyn" performs a dynamics run, and requires that output
  be identical, as for "min".  Default value for TYPE is "min".

INPUT files...
  The listed files are copied to the temporary directory before
  the test is run.  Defaults to the name of the description file
  with the .test replaced by .mmp ($base.mmp).

OUTPUT files...
  The listed files contain significant data to be compared.
  They are concatenated together, run through a sed script to
  remove inconsequential lines, and the result goes to stdout.
  In addition to files explicitly generated by the program
  stdout and stderr are available.  The file exitvalue contains
  the shell exit code $? resulting from executing the command.
  Defaults to "exitvalue stderr stdout $base.trc $base.xyz" for
  test types "min" and "dyn".  Defaults to "exitvalue structurematch stderr"
  for test type "struct".

PROGRAM command...
  This is the complete command line to run (excluding io redirection).
  Defaults to "/tmp/testsimulator -m -x $base.mmp" for test types "min" and
  "struct".  Defaults to "/tmp/testsimulator -f100 -t300 -i10 -x $base.mmp"
  for test type "dyn".

STRUCT file
  The listed file is compared against the $base.xyz file generated
  by PROGRAM.  Defaults to "" for test types "min" and "dyn", and
  no structure comparison is performed.  Defaults to "$base.xyzcmp"
  for test type "struct".


##################################################

NOTE: make sure you specify -x to generate a text
  file.  Otherwise you'll end up with binary data
  in your output file for comparison, which is
  probably not what you wanted.

##################################################

A minimizer test using the default command line and results
can be performed with an empty description file.  The other
test types can often be performed with just a TYPE directive.
"""

import sys
import os
import re
from os.path import join, split, dirname, basename
from shutil import copy
from subprocess import Popen

DEBUG = False

if DEBUG:
    def say(str):
        sys.stderr.write(str + os.linesep)
else:
    def say(str):
        pass

testSpecFile = sys.argv[1]
assert testSpecFile[-5:] == ".test"

DO_GENERATE = False
try:
    if sys.argv[2] == "--generate":
        DO_GENERATE = True
except IndexError:
    pass

tmpDir = "/tmp/runtest%d" % os.getpid()
say("tmpDir = " + tmpDir)
base = basename(testSpecFile[:-5])
here = os.getcwd()
dir = dirname(testSpecFile)
hereDir = join(here, dir)

altoutFile = join(hereDir, base + ".altout")

DEFAULT_INPUT = ("%s.mmp" % base,)
DEFAULT_OUTPUT_MIN = ("exitvalue", "stderr", "stdout",
                      base+".trc", base + ".xyz")
DEFAULT_OUTPUT_STRUCT = ("exitvalue", "structurematch", "stderr")
DEFAULT_PROGRAM_MIN = ("/tmp/testsimulator", "--minimize",
                       "--dump-as-text", base + ".mmp")
DEFAULT_PROGRAM_DYN = ("/tmp/testsimulator", "--num-frames=100",
                       "--temperature=300", "--iters-per-frame=10",
                       "--dump-as-text", base + ".mmp")
DEFAULT_STRUCT_MIN = None
DEFAULT_STRUCT_STRUCT = base + ".xyzcmp"

ALT_OUTPUT_FOR_STRUCT = ("exitvalue", "structurematch", "stderr",
                         "stdout", base + ".trc", base + ".xyz")

# if there is ever a problem, we should rm -rf tmpDir
# Bash: trap 'rm -rf $tmpDir' 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31

userType = "min"
userInput = ( )
userOutput = ( )
userProgram = None
userStruct = None

inf = open(testSpecFile)
for line in inf.read().split(os.linesep):
    if line[:4] == "TYPE":
        userType = line[4:].strip()
    elif line[:5] == "INPUT":
        # This is a tuple, not a string
        userInput = tuple(line[5:].split())
    elif line[:6] == "OUTPUT":
        # This is a tuple, not a string
        userOutput = tuple(line[6:].split())
    elif line[:7] == "PROGRAM":
        # This is a tuple, not a string
        userProgram = line[7:].split()
        userProgram[0] = join(here, userProgram[0])
        userProgram = tuple(userProgram)
    elif line[:6] == "STRUCT":
        userStruct = line[6:].strip()
    elif line[:1] == '#':
        pass
    elif len(line) > 0:
        print "%s has unrecognied line:\n%s" % (testSpecFile, line)
        sys.exit(1)
inf.close()

if userType == "min":
    input = userInput or DEFAULT_INPUT
    output = userOutput or DEFAULT_OUTPUT_MIN
    program = userProgram or DEFAULT_PROGRAM_MIN
    struct = userStruct or DEFAULT_STRUCT_MIN
elif userType == "struct":
    input = userInput or DEFAULT_INPUT
    output = userOutput or DEFAULT_OUTPUT_STRUCT
    program = userProgram or DEFAULT_PROGRAM_MIN
    struct = userStruct or DEFAULT_STRUCT_STRUCT
elif userType == "dyn":
    input = userInput or DEFAULT_INPUT
    output = userOutput or DEFAULT_OUTPUT_MIN
    program = userProgram or DEFAULT_PROGRAM_DYN
    struct = userStruct or DEFAULT_STRUCT_MIN
elif userType == "fail":
    input = userInput  # might be None
    output = userOutput
    program = userProgram or "echo fail"
    struct = userStruct
else:
    print "%s has unrecognied type:\n%s" % (testSpecFile, userType)
    sys.exit(1)

if DO_GENERATE:
    outxyz = join(hereDir, struct)
    outstd = join(hereDir, base + ".out")

DO_STRUCT_COMPARE = (struct != None)

def rmRF(rootPath):
    """Clean everything created temporarily"""
    for root, dirs, files in os.walk(rootPath, topdown=False):
        for name in files:
            os.remove(join(root, name))
        for name in dirs:
            os.rmdir(join(root, name))

rmRF(tmpDir)
os.mkdir(tmpDir)

for inputFile in input:
    copy(join(dir, inputFile), tmpDir)
    # if it fails, get a message from Python

if DO_STRUCT_COMPARE:
    if not DO_GENERATE:
        copy(join(dir, struct), tmpDir)

results = open(join(tmpDir, "results"), "w")
results.write("======= " + base + ".test =======" + os.linesep)
results.write(open(testSpecFile).read())
results.close()

os.chdir(tmpDir)

def run(prog):
    # Redirect standard ouput to "stdout" file
    # Redirect standard error to "stderr" file
    # Will this work on Windows?
    try:
        say(repr(prog))
        stdout = open("stdout", "a")
        stderr = open("stderr", "a")
        p = Popen(prog, stdout=stdout, stderr=stderr)
	#p = Popen(prog, stderr=stderr)
        stdout.close()
        stderr.close()
        rc = p.wait()
        say("return code = %d" % rc)
        return rc
    except OSError:
        sys.stderr.write(repr(prog) + os.linesep)
        raise

rc = run(program)

outf = open("exitvalue", "w")
outf.write(repr(rc))
outf.close()

dateTimeRegexp = re.compile("Date and Time: ")

if DEBUG:
    say("STDOUT")
    say(open("stdout").read())

if DO_STRUCT_COMPARE:
    stdout = open("stdout", "a")
    stderr = open("stderr", "a")
    str = "== structure comparison ==" + os.linesep
    stdout.write(str)
    stderr.write(str)
    structurematch = open("structurematch", "w")
    if DO_GENERATE:
        structurematch.write("0" + os.linesep)
    else:
        rc = run(("/tmp/testsimulator",
                  "--base-file=" + base + ".xyzcmp",
                  base + ".xyz"))
        structurematch.write(repr(rc) + os.linesep)
    structurematch.close()
    stdout.close()
    stderr.close()
    copy("results", altoutFile)
    altoutf = open(altoutFile, "a")
    for f in ALT_OUTPUT_FOR_STRUCT:
        altoutf.write("======= " + f + " =======" + os.linesep)
        for line in open(f).readlines():
            if dateTimeRegexp.match(line) == None:
                line = line.rstrip()
                altoutf.write(line + os.linesep)
    altoutf.close()

results = open("results", "a")
for f in output:
    say("Copying output from " + f)
    results.write("======= " + f + " =======" + os.linesep)
    for line in open(f).readlines():
        if dateTimeRegexp.match(line) == None:
            line = line.rstrip()
            say(f + '->' + line)
            results.write(line + os.linesep)
        else:
            say("Reject: " + line)
results.close()

if DO_GENERATE:
    copy("results", outstd)
    if DO_STRUCT_COMPARE:
        copy(base + ".xyz", outxyz)
    else:
        sys.stdout.write(open("results").read())

if DEBUG:
    say("\n\n=== results ===")
    say(open(tmpDir + "/results").read())
    say("\n\n=== stderr ===")
    say(open(tmpDir + "/stderr").read())
    say("\n\n=== stdout ===")
    say(open(tmpDir + "/stdout").read())

sys.exit(0)
