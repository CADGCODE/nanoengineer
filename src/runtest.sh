#!/bin/sh

# runtest.sh description.test
#
# runs the described test and concatenates the results
# to stdout (after removing lines which vary inconsequentially (e.g. dates)
#
# a description.test file looks like:
#
# comment lines, which start with a #, and are ignored
# blank lines, which are ignored
# lines containing one of the following directives:
#
# INPUT files...
#  The listed files are copied to the temporary directory before
#  the test is run.  Defaults to the name of the description file
#  with the .test replaced by .mmp ($base.mmp).
#
# OUTPUT files...
#  The listed files contain significant data to be compared.
#  They are concatenated together, run through a sed script to
#  remove inconsequential lines, and the result goes to stdout.
#  In addition to files explicitly generated by the program
#  stdout and stderr are available.  The file exitvalue contains
#  the shell exit code $? resulting from executing the command.
#  Defaults to "exitvalue stderr stdout $base.trc $base.xyz".
#
# PROGRAM command...
#  This is the complete command line to run (excluding io redirection).
#  Defaults to "simulator -m -x $base.mmp".
#
###################################################
#
# NOTE: make sure you specify -x to generate a text
#  file.  Otherwise you'll end up with binary data
#  in your output file for comparison, which is
#  probably not what you wanted.
#
###################################################
#
# A minimizer test using the default command line and results
# can be performed with an empty description file.
#

TMPDIR=/tmp/runtest$$
DESC=$1
base=`basename $DESC .test`
dir=`dirname $DESC`
INPUT="$base.mmp"
OUTPUT="exitvalue stderr stdout $base.trc $base.xyz"
PROGRAM="simulator -m -x $base.mmp"

trap 'rm -rf $TMPDIR' 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31

while read key value; do
	if [ x$key != x ]; then
		case $key in
		INPUT)
			INPUT=$value
			;;
		OUTPUT)
			OUTPUT=$value
			;;
		PROGRAM)
			PROGRAM=$value
			;;
		\#*)	;;
		*)
			echo in $DESC: unrecognized line: $key $value
			exit 1
		esac;
	fi
done < $DESC

rm -rf $TMPDIR
mkdir $TMPDIR
for i in $INPUT; do
	if cp $dir/$i $TMPDIR; then
		true;
	else
		echo failed to copy $dir/$i to $TMPDIR 1>&2;
		exit 1
	fi
done

echo ======= $base.test =======
cat $DESC

cd $TMPDIR

$PROGRAM > stdout 2> stderr
echo $? > exitvalue

for i in $OUTPUT; do
	echo ======= $i =======
	cat $i
done | sed '/Date and Time: /d'

exit 0
