
struct configuration 
{
  // Value of the function at this configuration, the "potential
  // energy".  Only valid if functionValueValid is non-zero.  Call
  // evaluate() to generate and return this value.
  double functionValue;

  // The position of this configuration in N-dimensional space.  These
  // are the values that we're changing as we search for the minimum
  // functionValue.  Always valid.
  double *coordinate;

  // N-dimensional vector pointing downhill from this configuration.
  // May be NULL if the gradient hasn't been evaluated here.
  double *gradient;

  // If this configuration was generated by a linear extrapolation
  // along the gradient of another configuration, then parameter is
  // the constant that the gradient vector was multiplied by to get to
  // this configuration.  Zero for the starting configuration in a
  // line (set to zero when the gradient is calculated).
  double parameter;

  // What functions/dimensions should be used for this configuration?
  struct functionDefinition *functionDefinition;

  // If caller wants to maintain any configuration dependant state
  // information, it can be saved here.  If this is non-null, the
  // freeExtra() function will be called when this configuration is
  // freed.  Otherwise, this field is not used by the minimizer.
  void *extra;

  // Used to avoid evaluating the function more than once for the same
  // configuration.
  int functionValueValid;

  // A simple reference count garbage collector.
  int referenceCount;
};

struct functionDefinition
{
  // This is the user function that is called to evaluate the
  // potential energy of a configuration.  It should take
  // p->coordinate as it's arguments, and set p->functionValue to the
  // result.
  void (*func)(struct configuration *p);

  // This is the user function that is called to evaluate the gradient
  // of the potential energy function.  It should take p->coordinate
  // as it's arguments, and set p->grandient to the result.  Note that
  // p->gradient is allocated before dfunc is called.
  void (*dfunc)(struct configuration *p);

  // Called whenever a configuration is freed, if the extra field is
  // non-null.  Set freeExtra to NULL if extra is never used.
  void (*freeExtra)(struct configuration *p);

  // How close do we need to get to the minimum?  Should be no smaller
  // than the square root of the machine precision.  Can it just be a
  // global?
  //double tolerance;

  // How big are the coordinate and gradient arrays?  This is the "N"
  // in N-dimensional below.
  int dimension;

  // How many times have we called (*func)()?
  int functionEvaluationCount;

  // How many times have we called (*dfunc)()?
  int gradientEvaluationCount;
};


extern struct configuration *makeConfiguration(struct functionDefinition *fd);

extern void freeConfiguration(struct configuration *conf);

extern void SetConfiguration(struct configuration **dst, struct configuration *src);

extern double evaluate(struct configuration *p);

extern void evaluateGradient(struct configuration *p);

extern struct configuration *minimize(struct configuration *p, int *iteration, int iterationLimit);

